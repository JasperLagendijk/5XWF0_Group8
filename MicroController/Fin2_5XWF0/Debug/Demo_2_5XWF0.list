
Demo_2_5XWF0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008f20  08008f20  00018f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009424  08009424  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  08009424  08009424  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009424  08009424  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009428  08009428  00019428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800942c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00000218  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a3f  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c9  00000000  00000000  00031c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00034fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d131  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012dc4  00000000  00000000  00052f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad590  00000000  00000000  00065d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001132e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005270  00000000  00000000  00113338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f04 	.word	0x08008f04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08008f04 	.word	0x08008f04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <__io_putchar+0x20>)
 8000bba:	f005 f854 	bl	8005c66 <HAL_UART_Transmit>

    return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000358 	.word	0x20000358

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 ff03 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f95d 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8000bda:	f000 fb99 	bl	8001310 <MX_DMA_Init>
  MX_GPIO_Init();
 8000bde:	f000 fbb5 	bl	800134c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be2:	f000 fb65 	bl	80012b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000be6:	f000 f9af 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bea:	f000 fa3b 	bl	8001064 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000bee:	f000 fae5 	bl	80011bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  printf("%s",TxStartMessage);
 8000bf2:	4988      	ldr	r1, [pc, #544]	; (8000e14 <main+0x248>)
 8000bf4:	4888      	ldr	r0, [pc, #544]	; (8000e18 <main+0x24c>)
 8000bf6:	f006 f84d 	bl	8006c94 <iprintf>

  //DC-AC PWM
  PWM_Period_AC = 64000000/(PWM_Freq_AC)-1;
 8000bfa:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <main+0x250>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a88      	ldr	r2, [pc, #544]	; (8000e20 <main+0x254>)
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b86      	ldr	r3, [pc, #536]	; (8000e24 <main+0x258>)
 8000c0a:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth_AC = (int)((PWM_Period_AC*PWM_DutyC_AC)/100);
 8000c0c:	4b85      	ldr	r3, [pc, #532]	; (8000e24 <main+0x258>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	4b83      	ldr	r3, [pc, #524]	; (8000e28 <main+0x25c>)
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c22:	eddf 6a82 	vldr	s13, [pc, #520]	; 8000e2c <main+0x260>
 8000c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2e:	ee17 2a90 	vmov	r2, s15
 8000c32:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <main+0x264>)
 8000c34:	601a      	str	r2, [r3, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim16, PWM_Period_AC);
 8000c36:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <main+0x258>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b7e      	ldr	r3, [pc, #504]	; (8000e34 <main+0x268>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c40:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <main+0x258>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b7b      	ldr	r3, [pc, #492]	; (8000e34 <main+0x268>)
 8000c48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM_PulseWidth_AC);
 8000c4a:	4b79      	ldr	r3, [pc, #484]	; (8000e30 <main+0x264>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b79      	ldr	r3, [pc, #484]	; (8000e34 <main+0x268>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	4877      	ldr	r0, [pc, #476]	; (8000e34 <main+0x268>)
 8000c58:	f003 ff5e 	bl	8004b18 <HAL_TIM_PWM_Start>
  printf("jojojoo\r\n");
 8000c5c:	4876      	ldr	r0, [pc, #472]	; (8000e38 <main+0x26c>)
 8000c5e:	f006 f89f 	bl	8006da0 <puts>
  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);			//TIM16 CH1N
 8000c62:	2100      	movs	r1, #0
 8000c64:	4873      	ldr	r0, [pc, #460]	; (8000e34 <main+0x268>)
 8000c66:	f004 fdff 	bl	8005868 <HAL_TIMEx_PWMN_Start>
  printf("jojo\r\n");
 8000c6a:	4874      	ldr	r0, [pc, #464]	; (8000e3c <main+0x270>)
 8000c6c:	f006 f898 	bl	8006da0 <puts>
  //DC-DC PWM
  PWM_Period_DC = 64000000/(2*PWM_Freq_DC)-1;
 8000c70:	4b73      	ldr	r3, [pc, #460]	; (8000e40 <main+0x274>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4a6a      	ldr	r2, [pc, #424]	; (8000e20 <main+0x254>)
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b70      	ldr	r3, [pc, #448]	; (8000e44 <main+0x278>)
 8000c82:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth_DC = (int)((PWM_Period_DC*PWM_DutyC_DC)/100);
 8000c84:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <main+0x278>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	ee07 3a90 	vmov	s15, r3
 8000c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c90:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <main+0x27c>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c9a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8000e2c <main+0x260>
 8000c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca6:	ee17 2a90 	vmov	r2, s15
 8000caa:	4b68      	ldr	r3, [pc, #416]	; (8000e4c <main+0x280>)
 8000cac:	601a      	str	r2, [r3, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period_DC);
 8000cae:	4b65      	ldr	r3, [pc, #404]	; (8000e44 <main+0x278>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b67      	ldr	r3, [pc, #412]	; (8000e50 <main+0x284>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cb8:	4b62      	ldr	r3, [pc, #392]	; (8000e44 <main+0x278>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b64      	ldr	r3, [pc, #400]	; (8000e50 <main+0x284>)
 8000cc0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DC);
 8000cc2:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <main+0x280>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b62      	ldr	r3, [pc, #392]	; (8000e50 <main+0x284>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4860      	ldr	r0, [pc, #384]	; (8000e50 <main+0x284>)
 8000cd0:	f003 ff22 	bl	8004b18 <HAL_TIM_PWM_Start>
  printf("PWM ok\r\n");
 8000cd4:	485f      	ldr	r0, [pc, #380]	; (8000e54 <main+0x288>)
 8000cd6:	f006 f863 	bl	8006da0 <puts>
  //ADC Init
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cda:	2100      	movs	r1, #0
 8000cdc:	485e      	ldr	r0, [pc, #376]	; (8000e58 <main+0x28c>)
 8000cde:	f001 f987 	bl	8001ff0 <HAL_ADCEx_Calibration_Start>
  printf("calibration ok\r\n");
 8000ce2:	485e      	ldr	r0, [pc, #376]	; (8000e5c <main+0x290>)
 8000ce4:	f006 f85c 	bl	8006da0 <puts>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Buff, 3);
 8000ce8:	2203      	movs	r2, #3
 8000cea:	495d      	ldr	r1, [pc, #372]	; (8000e60 <main+0x294>)
 8000cec:	485a      	ldr	r0, [pc, #360]	; (8000e58 <main+0x28c>)
 8000cee:	f001 f8a5 	bl	8001e3c <HAL_ADC_Start_DMA>
  printf("buff\r\n");
 8000cf2:	485c      	ldr	r0, [pc, #368]	; (8000e64 <main+0x298>)
 8000cf4:	f006 f854 	bl	8006da0 <puts>
  //MPPT
//  float I_in = meas_volt_1;		// have to convert to Amps (look it up)
//  float V_in = meas_volt_3;	// Starting value input voltage in V
//  float P_in = I_in*V_in;
  printf("floats ok\r\n");
 8000cf8:	485b      	ldr	r0, [pc, #364]	; (8000e68 <main+0x29c>)
 8000cfa:	f006 f851 	bl	8006da0 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  printf("The new D again: %.2f\r\n", PWM_DutyC_DC);
 8000cfe:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <main+0x27c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc20 	bl	8000548 <__aeabi_f2d>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4857      	ldr	r0, [pc, #348]	; (8000e6c <main+0x2a0>)
 8000d0e:	f005 ffc1 	bl	8006c94 <iprintf>
	  // ADC Measurements
	  PWM_DutyC_DC = meas_volt_1*111.1f;
 8000d12:	4b57      	ldr	r3, [pc, #348]	; (8000e70 <main+0x2a4>)
 8000d14:	edd3 7a00 	vldr	s15, [r3]
 8000d18:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000e74 <main+0x2a8>
 8000d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d20:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <main+0x27c>)
 8000d22:	edc3 7a00 	vstr	s15, [r3]
	  printf("ADC Voltage: %.2f V - Duty Cycle %d\r\n", meas_volt_1, (int)PWM_DutyC_DC);
 8000d26:	4b52      	ldr	r3, [pc, #328]	; (8000e70 <main+0x2a4>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc0c 	bl	8000548 <__aeabi_f2d>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4944      	ldr	r1, [pc, #272]	; (8000e48 <main+0x27c>)
 8000d36:	edd1 7a00 	vldr	s15, [r1]
 8000d3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d3e:	ee17 1a90 	vmov	r1, s15
 8000d42:	9100      	str	r1, [sp, #0]
 8000d44:	484c      	ldr	r0, [pc, #304]	; (8000e78 <main+0x2ac>)
 8000d46:	f005 ffa5 	bl	8006c94 <iprintf>


	  // Creating PWM for DC-AC
	  PWM_PulseWidth_AC = (int)((PWM_Period_AC*PWM_DutyC_AC)/100);
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <main+0x258>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <main+0x25c>)
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d60:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000e2c <main+0x260>
 8000d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6c:	ee17 2a90 	vmov	r2, s15
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <main+0x264>)
 8000d72:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM_PulseWidth_AC);
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <main+0x264>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <main+0x268>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34

	  // Creating PWM for DC-DC
//	  PWM_DutyC_DC = MPPT(&I_in, &V_in, &P_in, PWM_DutyC_DC);	// MPPT
	  PWM_PulseWidth_DC = (int)((PWM_Period_DC*PWM_DutyC_DC)/100);
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <main+0x278>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	ee07 3a90 	vmov	s15, r3
 8000d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <main+0x27c>)
 8000d8c:	edd3 7a00 	vldr	s15, [r3]
 8000d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d94:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000e2c <main+0x260>
 8000d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000da0:	ee17 2a90 	vmov	r2, s15
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <main+0x280>)
 8000da6:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DC);
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <main+0x280>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <main+0x284>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34

	  printf("Test\r\n");
 8000db2:	4832      	ldr	r0, [pc, #200]	; (8000e7c <main+0x2b0>)
 8000db4:	f005 fff4 	bl	8006da0 <puts>
	  printf("Duty Cycle DC: %.2f\r\n", PWM_DutyC_DC);
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <main+0x27c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fbc3 	bl	8000548 <__aeabi_f2d>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	482e      	ldr	r0, [pc, #184]	; (8000e80 <main+0x2b4>)
 8000dc8:	f005 ff64 	bl	8006c94 <iprintf>
	  printf("Duty Cycle AC: %.2f\r\n", PWM_DutyC_AC);
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <main+0x25c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fbb9 	bl	8000548 <__aeabi_f2d>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	482a      	ldr	r0, [pc, #168]	; (8000e84 <main+0x2b8>)
 8000ddc:	f005 ff5a 	bl	8006c94 <iprintf>
	  printf("ADC1/1: %.2f V\r\n", meas_volt_1);
 8000de0:	4b23      	ldr	r3, [pc, #140]	; (8000e70 <main+0x2a4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fbaf 	bl	8000548 <__aeabi_f2d>
 8000dea:	4602      	mov	r2, r0
 8000dec:	460b      	mov	r3, r1
 8000dee:	4826      	ldr	r0, [pc, #152]	; (8000e88 <main+0x2bc>)
 8000df0:	f005 ff50 	bl	8006c94 <iprintf>
	  printf("ADC1/2: %.2f V\r\n", meas_volt_2);
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <main+0x2c0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fba5 	bl	8000548 <__aeabi_f2d>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	460b      	mov	r3, r1
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <main+0x2c4>)
 8000e04:	f005 ff46 	bl	8006c94 <iprintf>

	  HAL_Delay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f000 fe4c 	bl	8001aa8 <HAL_Delay>
	  printf("The new D again: %.2f\r\n", PWM_DutyC_DC);
 8000e10:	e775      	b.n	8000cfe <main+0x132>
 8000e12:	bf00      	nop
 8000e14:	20000000 	.word	0x20000000
 8000e18:	08008f20 	.word	0x08008f20
 8000e1c:	2000002c 	.word	0x2000002c
 8000e20:	03d09000 	.word	0x03d09000
 8000e24:	20000408 	.word	0x20000408
 8000e28:	20000030 	.word	0x20000030
 8000e2c:	42c80000 	.word	0x42c80000
 8000e30:	2000040c 	.word	0x2000040c
 8000e34:	2000030c 	.word	0x2000030c
 8000e38:	08008f24 	.word	0x08008f24
 8000e3c:	08008f30 	.word	0x08008f30
 8000e40:	20000024 	.word	0x20000024
 8000e44:	20000400 	.word	0x20000400
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	20000404 	.word	0x20000404
 8000e50:	200002c0 	.word	0x200002c0
 8000e54:	08008f38 	.word	0x08008f38
 8000e58:	2000022c 	.word	0x2000022c
 8000e5c:	08008f40 	.word	0x08008f40
 8000e60:	200003dc 	.word	0x200003dc
 8000e64:	08008f50 	.word	0x08008f50
 8000e68:	08008f58 	.word	0x08008f58
 8000e6c:	08008f64 	.word	0x08008f64
 8000e70:	200003f4 	.word	0x200003f4
 8000e74:	42de3333 	.word	0x42de3333
 8000e78:	08008f7c 	.word	0x08008f7c
 8000e7c:	08008fa4 	.word	0x08008fa4
 8000e80:	08008fac 	.word	0x08008fac
 8000e84:	08008fc4 	.word	0x08008fc4
 8000e88:	08008fdc 	.word	0x08008fdc
 8000e8c:	200003f8 	.word	0x200003f8
 8000e90:	08008ff0 	.word	0x08008ff0

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b096      	sub	sp, #88	; 0x58
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fa84 	bl	80063b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000edc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 f9c4 	bl	8003274 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ef2:	f000 fab7 	bl	8001464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2302      	movs	r3, #2
 8000efc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	2102      	movs	r1, #2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f003 f9ec 	bl	80042f0 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f1e:	f000 faa1 	bl	8001464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f26:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fc14 	bl	800475c <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f3a:	f000 fa93 	bl	8001464 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3758      	adds	r7, #88	; 0x58
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
 8000f68:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b39      	ldr	r3, [pc, #228]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_ADC1_Init+0x118>)
 8000f9e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fac:	2203      	movs	r2, #3
 8000fae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b29      	ldr	r3, [pc, #164]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fcc:	f000 fda4 	bl	8001b18 <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fd6:	f000 fa45 	bl	8001464 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_ADC1_Init+0x118>)
 8000fe6:	f001 fb35 	bl	8002654 <HAL_ADCEx_MultiModeConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ff0:	f000 fa38 	bl	8001464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4813      	ldr	r0, [pc, #76]	; (8001060 <MX_ADC1_Init+0x118>)
 8001012:	f001 f85f 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800101c:	f000 fa22 	bl	8001464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001020:	2302      	movs	r3, #2
 8001022:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001024:	2302      	movs	r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_ADC1_Init+0x118>)
 800102e:	f001 f851 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001038:	f000 fa14 	bl	8001464 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800103c:	2304      	movs	r3, #4
 800103e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001040:	2303      	movs	r3, #3
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_ADC1_Init+0x118>)
 800104a:	f001 f843 	bl	80020d4 <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001054:	f000 fa06 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000022c 	.word	0x2000022c

08001064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b09a      	sub	sp, #104	; 0x68
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]
 8001096:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	222c      	movs	r2, #44	; 0x2c
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 f986 	bl	80063b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a4:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010a6:	4a44      	ldr	r2, [pc, #272]	; (80011b8 <MX_TIM1_Init+0x154>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80010b0:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010b2:	2220      	movs	r2, #32
 80010b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b6:	4b3f      	ldr	r3, [pc, #252]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80010c4:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d0:	4838      	ldr	r0, [pc, #224]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010d2:	f003 fc69 	bl	80049a8 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f9c2 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ea:	4619      	mov	r1, r3
 80010ec:	4831      	ldr	r0, [pc, #196]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010ee:	f003 ff13 	bl	8004f18 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010f8:	f000 f9b4 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010fc:	482d      	ldr	r0, [pc, #180]	; (80011b4 <MX_TIM1_Init+0x150>)
 80010fe:	f003 fcaa 	bl	8004a56 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001108:	f000 f9ac 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800110c:	2320      	movs	r3, #32
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001118:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800111c:	4619      	mov	r1, r3
 800111e:	4825      	ldr	r0, [pc, #148]	; (80011b4 <MX_TIM1_Init+0x150>)
 8001120:	f004 fc48 	bl	80059b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800112a:	f000 f99b 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	4818      	ldr	r0, [pc, #96]	; (80011b4 <MX_TIM1_Init+0x150>)
 8001154:	f003 fdcc 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800115e:	f000 f981 	bl	8001464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <MX_TIM1_Init+0x150>)
 8001198:	f004 fc7a 	bl	8005a90 <HAL_TIMEx_ConfigBreakDeadTime>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011a2:	f000 f95f 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <MX_TIM1_Init+0x150>)
 80011a8:	f000 fa22 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3768      	adds	r7, #104	; 0x68
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002c0 	.word	0x200002c0
 80011b8:	40012c00 	.word	0x40012c00

080011bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b092      	sub	sp, #72	; 0x48
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	222c      	movs	r2, #44	; 0x2c
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 f8e7 	bl	80063b0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011e2:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <MX_TIM16_Init+0xec>)
 80011e4:	4a31      	ldr	r2, [pc, #196]	; (80012ac <MX_TIM16_Init+0xf0>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <MX_TIM16_Init+0xec>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <MX_TIM16_Init+0xec>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <MX_TIM16_Init+0xec>)
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <MX_TIM16_Init+0xec>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <MX_TIM16_Init+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <MX_TIM16_Init+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800120e:	4826      	ldr	r0, [pc, #152]	; (80012a8 <MX_TIM16_Init+0xec>)
 8001210:	f003 fbca 	bl	80049a8 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800121a:	f000 f923 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <MX_TIM16_Init+0xec>)
 8001220:	f003 fc19 	bl	8004a56 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800122a:	f000 f91b 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	4815      	ldr	r0, [pc, #84]	; (80012a8 <MX_TIM16_Init+0xec>)
 8001254:	f003 fd4c 	bl	8004cf0 <HAL_TIM_PWM_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800125e:	f000 f901 	bl	8001464 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM16_Init+0xec>)
 800128a:	f004 fc01 	bl	8005a90 <HAL_TIMEx_ConfigBreakDeadTime>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001294:	f000 f8e6 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM16_Init+0xec>)
 800129a:	f000 f9a9 	bl	80015f0 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3748      	adds	r7, #72	; 0x48
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000030c 	.word	0x2000030c
 80012ac:	40014400 	.word	0x40014400

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012b6:	4a15      	ldr	r2, [pc, #84]	; (800130c <MX_USART2_UART_Init+0x5c>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012d6:	220c      	movs	r2, #12
 80012d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_USART2_UART_Init+0x58>)
 80012f4:	f004 fc69 	bl	8005bca <HAL_UART_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012fe:	f000 f8b1 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000358 	.word	0x20000358
 800130c:	40004400 	.word	0x40004400

08001310 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_DMA_Init+0x38>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <MX_DMA_Init+0x38>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6153      	str	r3, [r2, #20]
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_DMA_Init+0x38>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	200b      	movs	r0, #11
 8001334:	f001 fc5f 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001338:	200b      	movs	r0, #11
 800133a:	f001 fc78 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135c:	6153      	str	r3, [r2, #20]
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_GPIO_Init+0x5c>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <MX_GPIO_Init+0x5c>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_ADC_ConvCpltCallback>:
	printf("New D: %.2f\r\n", D);
	return D;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	// Prevent unused argument(s) compilation warning
	UNUSED(hadc);

		adc_val_1 = ADC_Buff[0];	//DC-DC Current sensor output value
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_ADC_ConvCpltCallback+0x94>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a22      	ldr	r2, [pc, #136]	; (8001444 <HAL_ADC_ConvCpltCallback+0x98>)
 80013ba:	6013      	str	r3, [r2, #0]
		adc_val_2 = ADC_Buff[1];	//DC-DC Voltage output value
 80013bc:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_ADC_ConvCpltCallback+0x94>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <HAL_ADC_ConvCpltCallback+0x9c>)
 80013c2:	6013      	str	r3, [r2, #0]
		adc_val_3 = ADC_Buff[2];	//DC-DC Voltage input value
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <HAL_ADC_ConvCpltCallback+0x94>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4a20      	ldr	r2, [pc, #128]	; (800144c <HAL_ADC_ConvCpltCallback+0xa0>)
 80013ca:	6013      	str	r3, [r2, #0]

		meas_volt_1 = (((float)adc_val_1)/4095.0f)*3.3f;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_ADC_ConvCpltCallback+0x98>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d8:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001450 <HAL_ADC_ConvCpltCallback+0xa4>
 80013dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001454 <HAL_ADC_ConvCpltCallback+0xa8>
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_ConvCpltCallback+0xac>)
 80013ea:	edc3 7a00 	vstr	s15, [r3]
		meas_volt_2 = (((float)adc_val_2)/4095.0f)*3.3f;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_ADC_ConvCpltCallback+0x9c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013fa:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001450 <HAL_ADC_ConvCpltCallback+0xa4>
 80013fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001402:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001454 <HAL_ADC_ConvCpltCallback+0xa8>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_ADC_ConvCpltCallback+0xb0>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
		meas_volt_3 = (((float)adc_val_3)/4095.0f)*3.3f;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_ADC_ConvCpltCallback+0xa0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001450 <HAL_ADC_ConvCpltCallback+0xa4>
 8001420:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001424:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001454 <HAL_ADC_ConvCpltCallback+0xa8>
 8001428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_ADC_ConvCpltCallback+0xb4>)
 800142e:	edc3 7a00 	vstr	s15, [r3]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	200003dc 	.word	0x200003dc
 8001444:	200003e8 	.word	0x200003e8
 8001448:	200003ec 	.word	0x200003ec
 800144c:	200003f0 	.word	0x200003f0
 8001450:	457ff000 	.word	0x457ff000
 8001454:	40533333 	.word	0x40533333
 8001458:	200003f4 	.word	0x200003f4
 800145c:	200003f8 	.word	0x200003f8
 8001460:	200003fc 	.word	0x200003fc

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_MspInit+0x44>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_MspInit+0x44>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_MspInit+0x44>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_MspInit+0x44>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014d8:	d14c      	bne.n	8001574 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_ADC_MspInit+0xc4>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4a27      	ldr	r2, [pc, #156]	; (800157c <HAL_ADC_MspInit+0xc4>)
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	6153      	str	r3, [r2, #20]
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_ADC_MspInit+0xc4>)
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_ADC_MspInit+0xc4>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_ADC_MspInit+0xc4>)
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	6153      	str	r3, [r2, #20]
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <HAL_ADC_MspInit+0xc4>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800150a:	230b      	movs	r3, #11
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f001 fd36 	bl	8002f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_ADC_MspInit+0xcc>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 800153e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001542:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800154a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 800154e:	2220      	movs	r2, #32
 8001550:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 800155a:	f001 fb82 	bl	8002c62 <HAL_DMA_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001564:	f7ff ff7e 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 800156c:	639a      	str	r2, [r3, #56]	; 0x38
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_ADC_MspInit+0xc8>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	2000027c 	.word	0x2000027c
 8001584:	40020008 	.word	0x40020008

08001588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <HAL_TIM_Base_MspInit+0x5c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d10c      	bne.n	80015b4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80015b2:	e010      	b.n	80015d6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0c      	ldr	r2, [pc, #48]	; (80015ec <HAL_TIM_Base_MspInit+0x64>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d10b      	bne.n	80015d6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6193      	str	r3, [r2, #24]
 80015ca:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <HAL_TIM_Base_MspInit+0x60>)
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40014400 	.word	0x40014400

080015f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <HAL_TIM_MspPostInit+0xe8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11e      	bne.n	8001650 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800162a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800163c:	2306      	movs	r3, #6
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f001 fca1 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800164e:	e03e      	b.n	80016ce <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM16)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <HAL_TIM_MspPostInit+0xf0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d139      	bne.n	80016ce <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	6153      	str	r3, [r2, #20]
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6153      	str	r3, [r2, #20]
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_TIM_MspPostInit+0xec>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800168a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f001 fc71 	bl	8002f90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80016be:	2301      	movs	r3, #1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <HAL_TIM_MspPostInit+0xf4>)
 80016ca:	f001 fc61 	bl	8002f90 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40014400 	.word	0x40014400
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_UART_MspInit+0x80>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d129      	bne.n	800175e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_UART_MspInit+0x84>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_UART_MspInit+0x84>)
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_UART_MspInit+0x84>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_UART_MspInit+0x84>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	4a11      	ldr	r2, [pc, #68]	; (800176c <HAL_UART_MspInit+0x84>)
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	6153      	str	r3, [r2, #20]
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_UART_MspInit+0x84>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800173a:	f248 0304 	movw	r3, #32772	; 0x8004
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174c:	2307      	movs	r3, #7
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f001 fc19 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40004400 	.word	0x40004400
 800176c:	40021000 	.word	0x40021000

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017bc:	f000 f954 	bl	8001a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ca:	f001 faf0 	bl	8002dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000027c 	.word	0x2000027c

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017f2:	f004 fdb3 	bl	800635c <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
	return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800181a:	e7fe      	b.n	800181a <_exit+0x12>

0800181c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
	}

return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff f999 	bl	8000ba8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
	}
	return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b6:	605a      	str	r2, [r3, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_isatty>:

int _isatty(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return 1;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f004 fd18 	bl	800635c <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	; (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20003000 	.word	0x20003000
 8001958:	00000400 	.word	0x00000400
 800195c:	20000410 	.word	0x20000410
 8001960:	20000428 	.word	0x20000428

08001964 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopForever+0xe>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopForever+0x16>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019b2:	f7ff ffd7 	bl	8001964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f004 fcd7 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019ba:	f7ff f907 	bl	8000bcc <main>

080019be <LoopForever>:

LoopForever:
    b LoopForever
 80019be:	e7fe      	b.n	80019be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019c0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80019cc:	0800942c 	.word	0x0800942c
  ldr r2, =_sbss
 80019d0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80019d4:	20000428 	.word	0x20000428

080019d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC1_2_IRQHandler>
	...

080019dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_Init+0x28>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_Init+0x28>)
 80019e6:	f043 0310 	orr.w	r3, r3, #16
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ec:	2003      	movs	r0, #3
 80019ee:	f001 f8f7 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f808 	bl	8001a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f8:	f7ff fd3a 	bl	8001470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40022000 	.word	0x40022000

08001a08 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_InitTick+0x54>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_InitTick+0x58>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 f90f 	bl	8002c4a <HAL_SYSTICK_Config>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00e      	b.n	8001a54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b0f      	cmp	r3, #15
 8001a3a:	d80a      	bhi.n	8001a52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f001 f8d7 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a48:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_InitTick+0x5c>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e000      	b.n	8001a54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000034 	.word	0x20000034
 8001a60:	2000003c 	.word	0x2000003c
 8001a64:	20000038 	.word	0x20000038

08001a68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x20>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_IncTick+0x24>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_IncTick+0x24>)
 8001a7a:	6013      	str	r3, [r2, #0]
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000003c 	.word	0x2000003c
 8001a8c:	20000414 	.word	0x20000414

08001a90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <HAL_GetTick+0x14>)
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000414 	.word	0x20000414

08001aa8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ab0:	f7ff ffee 	bl	8001a90 <HAL_GetTick>
 8001ab4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac0:	d005      	beq.n	8001ace <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_Delay+0x44>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4413      	add	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ace:	bf00      	nop
 8001ad0:	f7ff ffde 	bl	8001a90 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d8f7      	bhi.n	8001ad0 <HAL_Delay+0x28>
  {
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000003c 	.word	0x2000003c

08001af0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b09a      	sub	sp, #104	; 0x68
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e172      	b.n	8001e1e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d176      	bne.n	8001c38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d152      	bne.n	8001bf8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fca3 	bl	80014b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13b      	bne.n	8001bf8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fef7 	bl	8002974 <ADC_Disable>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d12f      	bne.n	8001bf8 <HAL_ADC_Init+0xe0>
 8001b98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12b      	bne.n	8001bf8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba8:	f023 0302 	bic.w	r3, r3, #2
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bd2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd4:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <HAL_ADC_Init+0x310>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a94      	ldr	r2, [pc, #592]	; (8001e2c <HAL_ADC_Init+0x314>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9a      	lsrs	r2, r3, #18
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bea:	e002      	b.n	8001bf2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f9      	bne.n	8001bec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d110      	bne.n	8001c38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f023 0312 	bic.w	r3, r3, #18
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f043 0201 	orr.w	r2, r3, #1
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 80df 	bne.w	8001e04 <HAL_ADC_Init+0x2ec>
 8001c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80da 	bne.w	8001e04 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80d2 	bne.w	8001e04 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	4b6f      	ldr	r3, [pc, #444]	; (8001e30 <HAL_ADC_Init+0x318>)
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7c:	d102      	bne.n	8001c84 <HAL_ADC_Init+0x16c>
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <HAL_ADC_Init+0x31c>)
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e002      	b.n	8001c8a <HAL_ADC_Init+0x172>
 8001c84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_ADC_Init+0x192>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_ADC_Init+0x192>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_ADC_Init+0x194>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d11c      	bne.n	8001cea <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_ADC_Init+0x1ba>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_Init+0x1ba>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_ADC_Init+0x1bc>
 8001cd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d108      	bne.n	8001cea <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7e5b      	ldrb	r3, [r3, #25]
 8001cee:	035b      	lsls	r3, r3, #13
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf4:	2a01      	cmp	r2, #1
 8001cf6:	d002      	beq.n	8001cfe <HAL_ADC_Init+0x1e6>
 8001cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_Init+0x1e8>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d10:	4313      	orrs	r3, r2
 8001d12:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d11b      	bne.n	8001d56 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7e5b      	ldrb	r3, [r3, #25]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	045a      	lsls	r2, r3, #17
 8001d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d36:	663b      	str	r3, [r7, #96]	; 0x60
 8001d38:	e00d      	b.n	8001d56 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	4313      	orrs	r3, r2
 8001d68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d114      	bne.n	8001da6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d8a:	f023 0302 	bic.w	r3, r3, #2
 8001d8e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
 8001d94:	039a      	lsls	r2, r3, #14
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001da2:	4313      	orrs	r3, r2
 8001da4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <HAL_ADC_Init+0x320>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001db6:	430b      	orrs	r3, r1
 8001db8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10c      	bne.n	8001ddc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f023 010f 	bic.w	r1, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	1e5a      	subs	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dda:	e007      	b.n	8001dec <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 020f 	bic.w	r2, r2, #15
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f023 0303 	bic.w	r3, r3, #3
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
 8001e02:	e00a      	b.n	8001e1a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f023 0312 	bic.w	r3, r3, #18
 8001e0c:	f043 0210 	orr.w	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3768      	adds	r7, #104	; 0x68
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000034 	.word	0x20000034
 8001e2c:	431bde83 	.word	0x431bde83
 8001e30:	50000300 	.word	0x50000300
 8001e34:	50000100 	.word	0x50000100
 8001e38:	fff0c007 	.word	0xfff0c007

08001e3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f040 80b9 	bne.w	8001fce <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_Start_DMA+0x2e>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e0b4      	b.n	8001fd4 <HAL_ADC_Start_DMA+0x198>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_ADC_Start_DMA+0x1a0>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 80a0 	bne.w	8001fc0 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fd13 	bl	80028ac <ADC_Enable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8092 	bne.w	8001fb6 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_ADC_Start_DMA+0x1a0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_Start_DMA+0x80>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eba:	d115      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d027      	beq.n	8001f26 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ede:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ee6:	e01e      	b.n	8001f26 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001efc:	d004      	beq.n	8001f08 <HAL_ADC_Start_DMA+0xcc>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <HAL_ADC_Start_DMA+0x1a4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d10e      	bne.n	8001f26 <HAL_ADC_Start_DMA+0xea>
 8001f08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d007      	beq.n	8001f26 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f32:	d106      	bne.n	8001f42 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f38:	f023 0206 	bic.w	r2, r3, #6
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_ADC_Start_DMA+0x1ac>)
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_ADC_Start_DMA+0x1b0>)
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	221c      	movs	r2, #28
 8001f6e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0210 	orr.w	r2, r2, #16
 8001f7e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3340      	adds	r3, #64	; 0x40
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f000 fea6 	bl	8002cf0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0204 	orr.w	r2, r2, #4
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	e00d      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fcc:	e001      	b.n	8001fd2 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	50000300 	.word	0x50000300
 8001fe0:	50000100 	.word	0x50000100
 8001fe4:	080027e1 	.word	0x080027e1
 8001fe8:	0800285b 	.word	0x0800285b
 8001fec:	08002877 	.word	0x08002877

08001ff0 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADCEx_Calibration_Start+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e05f      	b.n	80020cc <HAL_ADCEx_Calibration_Start+0xdc>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fcad 	bl	8002974 <ADC_Disable>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d14e      	bne.n	80020c2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002038:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800204e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800205e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002060:	f7ff fd16 	bl	8001a90 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002066:	e01c      	b.n	80020a2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002068:	f7ff fd12 	bl	8001a90 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d915      	bls.n	80020a2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002084:	d10d      	bne.n	80020a2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f023 0312 	bic.w	r3, r3, #18
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e014      	b.n	80020cc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020b0:	d0da      	beq.n	8002068 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b09b      	sub	sp, #108	; 0x6c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x22>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e2a4      	b.n	8002640 <HAL_ADC_ConfigChannel+0x56c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8288 	bne.w	800261e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d81c      	bhi.n	8002150 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	461a      	mov	r2, r3
 800212a:	231f      	movs	r3, #31
 800212c:	4093      	lsls	r3, r2
 800212e:	43db      	mvns	r3, r3
 8002130:	4019      	ands	r1, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	fa00 f203 	lsl.w	r2, r0, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
 800214e:	e063      	b.n	8002218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d81e      	bhi.n	8002196 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	3b1e      	subs	r3, #30
 800216c:	221f      	movs	r2, #31
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	4019      	ands	r1, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	3b1e      	subs	r3, #30
 8002188:	fa00 f203 	lsl.w	r2, r0, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
 8002194:	e040      	b.n	8002218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b0e      	cmp	r3, #14
 800219c:	d81e      	bhi.n	80021dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	3b3c      	subs	r3, #60	; 0x3c
 80021b2:	221f      	movs	r2, #31
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	4019      	ands	r1, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	3b3c      	subs	r3, #60	; 0x3c
 80021ce:	fa00 f203 	lsl.w	r2, r0, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38
 80021da:	e01d      	b.n	8002218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	3b5a      	subs	r3, #90	; 0x5a
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	4019      	ands	r1, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	3b5a      	subs	r3, #90	; 0x5a
 800220c:	fa00 f203 	lsl.w	r2, r0, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 80e5 	bne.w	80023f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d91c      	bls.n	800226a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6999      	ldr	r1, [r3, #24]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1e      	subs	r3, #30
 8002242:	2207      	movs	r2, #7
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	4019      	ands	r1, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6898      	ldr	r0, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	3b1e      	subs	r3, #30
 800225c:	fa00 f203 	lsl.w	r2, r0, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	619a      	str	r2, [r3, #24]
 8002268:	e019      	b.n	800229e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6959      	ldr	r1, [r3, #20]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	2207      	movs	r2, #7
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	4019      	ands	r1, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	6898      	ldr	r0, [r3, #8]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	08db      	lsrs	r3, r3, #3
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d84f      	bhi.n	8002360 <HAL_ADC_ConfigChannel+0x28c>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022fb 	.word	0x080022fb
 80022d0:	0800231d 	.word	0x0800231d
 80022d4:	0800233f 	.word	0x0800233f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022de:	4b94      	ldr	r3, [pc, #592]	; (8002530 <HAL_ADC_ConfigChannel+0x45c>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	0691      	lsls	r1, r2, #26
 80022e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ea:	430a      	orrs	r2, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022f6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f8:	e07e      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002300:	4b8b      	ldr	r3, [pc, #556]	; (8002530 <HAL_ADC_ConfigChannel+0x45c>)
 8002302:	4013      	ands	r3, r2
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	0691      	lsls	r1, r2, #26
 800230a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800230c:	430a      	orrs	r2, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002318:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800231a:	e06d      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002322:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_ADC_ConfigChannel+0x45c>)
 8002324:	4013      	ands	r3, r2
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	0691      	lsls	r1, r2, #26
 800232c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800232e:	430a      	orrs	r2, r1
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800233a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800233c:	e05c      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002344:	4b7a      	ldr	r3, [pc, #488]	; (8002530 <HAL_ADC_ConfigChannel+0x45c>)
 8002346:	4013      	ands	r3, r2
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	0691      	lsls	r1, r2, #26
 800234e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002350:	430a      	orrs	r2, r1
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800235c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800235e:	e04b      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002382:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ca:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	069b      	lsls	r3, r3, #26
 80023dc:	429a      	cmp	r2, r3
 80023de:	d10a      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023f0:	e001      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023f2:	bf00      	nop
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023f6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d108      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x344>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x344>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_ADC_ConfigChannel+0x346>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 810a 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d00f      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002446:	e049      	b.n	80024dc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b09      	cmp	r3, #9
 8002468:	d91c      	bls.n	80024a4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6999      	ldr	r1, [r3, #24]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	3b1b      	subs	r3, #27
 800247c:	2207      	movs	r2, #7
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4019      	ands	r1, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6898      	ldr	r0, [r3, #8]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1b      	subs	r3, #27
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	619a      	str	r2, [r3, #24]
 80024a2:	e01b      	b.n	80024dc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6959      	ldr	r1, [r3, #20]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	2207      	movs	r2, #7
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6898      	ldr	r0, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024dc:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_ADC_ConfigChannel+0x460>)
 80024de:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d015      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024f8:	2b11      	cmp	r3, #17
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800250c:	2b12      	cmp	r3, #18
 800250e:	f040 8091 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 808a 	bne.w	8002634 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d108      	bne.n	800253c <HAL_ADC_ConfigChannel+0x468>
 800252a:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_ADC_ConfigChannel+0x464>)
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e008      	b.n	8002542 <HAL_ADC_ConfigChannel+0x46e>
 8002530:	83fff000 	.word	0x83fff000
 8002534:	50000300 	.word	0x50000300
 8002538:	50000100 	.word	0x50000100
 800253c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002540:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b01      	cmp	r3, #1
 800254e:	d108      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x48e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x48e>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_ADC_ConfigChannel+0x490>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d150      	bne.n	800260a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002568:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b01      	cmp	r3, #1
 8002578:	d107      	bne.n	800258a <HAL_ADC_ConfigChannel+0x4b6>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x4b6>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_ADC_ConfigChannel+0x4b8>
 800258a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800258c:	2b00      	cmp	r3, #0
 800258e:	d13c      	bne.n	800260a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b10      	cmp	r3, #16
 8002596:	d11d      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x500>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a0:	d118      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80025a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ac:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ae:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_ADC_ConfigChannel+0x578>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_ADC_ConfigChannel+0x57c>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0c9a      	lsrs	r2, r3, #18
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025c4:	e002      	b.n	80025cc <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f9      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025d2:	e02e      	b.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d10b      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x520>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025e4:	d106      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025f0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	e01e      	b.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d11a      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002606:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002608:	e013      	b.n	8002632 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800261c:	e00a      	b.n	8002634 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f043 0220 	orr.w	r2, r3, #32
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002630:	e000      	b.n	8002634 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002632:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800263c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002640:	4618      	mov	r0, r3
 8002642:	376c      	adds	r7, #108	; 0x6c
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000034 	.word	0x20000034
 8002650:	431bde83 	.word	0x431bde83

08002654 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002654:	b480      	push	{r7}
 8002656:	b099      	sub	sp, #100	; 0x64
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266c:	d102      	bne.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800266e:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	e002      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002678:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0a2      	b.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800268e:	2302      	movs	r3, #2
 8002690:	e09b      	b.n	80027ca <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d17f      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d179      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026b4:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80026b6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d040      	beq.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026d2:	035b      	lsls	r3, r3, #13
 80026d4:	430b      	orrs	r3, r1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026da:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d15c      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800271e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	d14b      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800272c:	f023 030f 	bic.w	r3, r3, #15
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	6811      	ldr	r1, [r2, #0]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	430a      	orrs	r2, r1
 800273a:	431a      	orrs	r2, r3
 800273c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002740:	e03c      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d108      	bne.n	800276e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800276e:	2300      	movs	r3, #0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d123      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d107      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002790:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002792:	2b00      	cmp	r3, #0
 8002794:	d112      	bne.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800279e:	f023 030f 	bic.w	r3, r3, #15
 80027a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027a4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027a6:	e009      	b.n	80027bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f043 0220 	orr.w	r2, r3, #32
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027ba:	e000      	b.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027bc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80027ca:	4618      	mov	r0, r3
 80027cc:	3764      	adds	r7, #100	; 0x64
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	50000100 	.word	0x50000100
 80027dc:	50000300 	.word	0x50000300

080027e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d126      	bne.n	8002848 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002810:	2b00      	cmp	r3, #0
 8002812:	d115      	bne.n	8002840 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002818:	2b00      	cmp	r3, #0
 800281a:	d111      	bne.n	8002840 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7fe fdb3 	bl	80013ac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002846:	e004      	b.n	8002852 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff f941 	bl	8001af0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0204 	orr.w	r2, r3, #4
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff f931 	bl	8001b04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <ADC_Enable+0x2c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <ADC_Enable+0x2c>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <ADC_Enable+0x2e>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d143      	bne.n	8002966 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <ADC_Enable+0xc4>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00d      	beq.n	8002908 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e02f      	b.n	8002968 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002918:	f7ff f8ba 	bl	8001a90 <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800291e:	e01b      	b.n	8002958 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002920:	f7ff f8b6 	bl	8001a90 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d914      	bls.n	8002958 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d00d      	beq.n	8002958 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e007      	b.n	8002968 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b01      	cmp	r3, #1
 8002964:	d1dc      	bne.n	8002920 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	8000003f 	.word	0x8000003f

08002974 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <ADC_Disable+0x2c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <ADC_Disable+0x2c>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <ADC_Disable+0x2e>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d047      	beq.n	8002a36 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 030d 	and.w	r3, r3, #13
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10f      	bne.n	80029d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0202 	orr.w	r2, r2, #2
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2203      	movs	r2, #3
 80029ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80029cc:	f7ff f860 	bl	8001a90 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029d2:	e029      	b.n	8002a28 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f043 0210 	orr.w	r2, r3, #16
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f043 0201 	orr.w	r2, r3, #1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e023      	b.n	8002a38 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029f0:	f7ff f84e 	bl	8001a90 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d914      	bls.n	8002a28 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10d      	bne.n	8002a28 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d0dc      	beq.n	80029f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff29 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff3e 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff31 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa2 	bl	8002b9c <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e037      	b.n	8002ce8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f940 	bl	8002f50 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}  
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Start_IT+0x20>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e04a      	b.n	8002da6 <HAL_DMA_Start_IT+0xb6>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d13a      	bne.n	8002d98 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f8d4 	bl	8002ef4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 020e 	orr.w	r2, r2, #14
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 020a 	orr.w	r2, r2, #10
 8002d74:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0204 	bic.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
 8002da2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2204      	movs	r2, #4
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d024      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x72>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01f      	beq.n	8002e20 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e06:	2104      	movs	r1, #4
 8002e08:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e1e:	e065      	b.n	8002eec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	2202      	movs	r2, #2
 8002e26:	409a      	lsls	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d02c      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xdc>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d027      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 020a 	bic.w	r2, r2, #10
 8002e56:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	2102      	movs	r1, #2
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d035      	beq.n	8002eec <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e88:	e030      	b.n	8002eec <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2208      	movs	r2, #8
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d028      	beq.n	8002eec <HAL_DMA_IRQHandler+0x13e>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020e 	bic.w	r2, r2, #14
 8002eb2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
    }
  }
}  
 8002eea:	e7ff      	b.n	8002eec <HAL_DMA_IRQHandler+0x13e>
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b10      	cmp	r3, #16
 8002f20:	d108      	bne.n	8002f34 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f32:	e007      	b.n	8002f44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <DMA_CalcBaseAndBitshift+0x34>)
 8002f60:	4413      	add	r3, r2
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <DMA_CalcBaseAndBitshift+0x38>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	009a      	lsls	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <DMA_CalcBaseAndBitshift+0x3c>)
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	bffdfff8 	.word	0xbffdfff8
 8002f88:	cccccccd 	.word	0xcccccccd
 8002f8c:	40020000 	.word	0x40020000

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9e:	e14e      	b.n	800323e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8140 	beq.w	8003238 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d005      	beq.n	8002fd0 <HAL_GPIO_Init+0x40>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d130      	bne.n	8003032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003006:	2201      	movs	r2, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0201 	and.w	r2, r3, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b03      	cmp	r3, #3
 800303c:	d017      	beq.n	800306e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d123      	bne.n	80030c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0203 	and.w	r2, r3, #3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 809a 	beq.w	8003238 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003104:	4b55      	ldr	r3, [pc, #340]	; (800325c <HAL_GPIO_Init+0x2cc>)
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4a54      	ldr	r2, [pc, #336]	; (800325c <HAL_GPIO_Init+0x2cc>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6193      	str	r3, [r2, #24]
 8003110:	4b52      	ldr	r3, [pc, #328]	; (800325c <HAL_GPIO_Init+0x2cc>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800311c:	4a50      	ldr	r2, [pc, #320]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003146:	d013      	beq.n	8003170 <HAL_GPIO_Init+0x1e0>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a46      	ldr	r2, [pc, #280]	; (8003264 <HAL_GPIO_Init+0x2d4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00d      	beq.n	800316c <HAL_GPIO_Init+0x1dc>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a45      	ldr	r2, [pc, #276]	; (8003268 <HAL_GPIO_Init+0x2d8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <HAL_GPIO_Init+0x1d8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_GPIO_Init+0x2dc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d101      	bne.n	8003164 <HAL_GPIO_Init+0x1d4>
 8003160:	2303      	movs	r3, #3
 8003162:	e006      	b.n	8003172 <HAL_GPIO_Init+0x1e2>
 8003164:	2305      	movs	r3, #5
 8003166:	e004      	b.n	8003172 <HAL_GPIO_Init+0x1e2>
 8003168:	2302      	movs	r3, #2
 800316a:	e002      	b.n	8003172 <HAL_GPIO_Init+0x1e2>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <HAL_GPIO_Init+0x1e2>
 8003170:	2300      	movs	r3, #0
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	f002 0203 	and.w	r2, r2, #3
 8003178:	0092      	lsls	r2, r2, #2
 800317a:	4093      	lsls	r3, r2
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003182:	4937      	ldr	r1, [pc, #220]	; (8003260 <HAL_GPIO_Init+0x2d0>)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003190:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031de:	4a24      	ldr	r2, [pc, #144]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4013      	ands	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003232:	4a0f      	ldr	r2, [pc, #60]	; (8003270 <HAL_GPIO_Init+0x2e0>)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f aea9 	bne.w	8002fa0 <HAL_GPIO_Init+0x10>
  }
}
 800324e:	bf00      	nop
 8003250:	bf00      	nop
 8003252:	371c      	adds	r7, #28
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000
 8003260:	40010000 	.word	0x40010000
 8003264:	48000400 	.word	0x48000400
 8003268:	48000800 	.word	0x48000800
 800326c:	48000c00 	.word	0x48000c00
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800327a:	af00      	add	r7, sp, #0
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003284:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f001 b823 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 817d 	beq.w	80035aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80032b0:	4bbc      	ldr	r3, [pc, #752]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d00c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032bc:	4bb9      	ldr	r3, [pc, #740]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d15c      	bne.n	8003382 <HAL_RCC_OscConfig+0x10e>
 80032c8:	4bb6      	ldr	r3, [pc, #728]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d155      	bne.n	8003382 <HAL_RCC_OscConfig+0x10e>
 80032d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0x94>
 8003302:	4ba8      	ldr	r3, [pc, #672]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e015      	b.n	8003334 <HAL_RCC_OscConfig+0xc0>
 8003308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800331c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003320:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003324:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003330:	4b9c      	ldr	r3, [pc, #624]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003338:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800333c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003340:	fa92 f2a2 	rbit	r2, r2
 8003344:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003348:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800334c:	fab2 f282 	clz	r2, r2
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	f002 021f 	and.w	r2, r2, #31
 800335c:	2101      	movs	r1, #1
 800335e:	fa01 f202 	lsl.w	r2, r1, r2
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 811f 	beq.w	80035a8 <HAL_RCC_OscConfig+0x334>
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8116 	bne.w	80035a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f000 bfaf 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12e>
 8003394:	4b83      	ldr	r3, [pc, #524]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a82      	ldr	r2, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 800339a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e036      	b.n	8003410 <HAL_RCC_OscConfig+0x19c>
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x158>
 80033b2:	4b7c      	ldr	r3, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b79      	ldr	r3, [pc, #484]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a78      	ldr	r2, [pc, #480]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e021      	b.n	8003410 <HAL_RCC_OscConfig+0x19c>
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x184>
 80033de:	4b71      	ldr	r3, [pc, #452]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a70      	ldr	r2, [pc, #448]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	4b6e      	ldr	r3, [pc, #440]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6d      	ldr	r2, [pc, #436]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x19c>
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a66      	ldr	r2, [pc, #408]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 800340a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003410:	4b64      	ldr	r3, [pc, #400]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	f023 020f 	bic.w	r2, r3, #15
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	495f      	ldr	r1, [pc, #380]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003426:	4313      	orrs	r3, r2
 8003428:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d059      	beq.n	80034ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fe fb29 	bl	8001a90 <HAL_GetTick>
 800343e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003444:	f7fe fb24 	bl	8001a90 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d902      	bls.n	800345a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	f000 bf43 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 800345a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800346e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0x218>
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e015      	b.n	80034b8 <HAL_RCC_OscConfig+0x244>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034bc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80034c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80034c4:	fa92 f2a2 	rbit	r2, r2
 80034c8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80034cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0ab      	beq.n	8003444 <HAL_RCC_OscConfig+0x1d0>
 80034ec:	e05d      	b.n	80035aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe facf 	bl	8001a90 <HAL_GetTick>
 80034f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe faca 	bl	8001a90 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d902      	bls.n	800350e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	f000 bee9 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 800350e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003512:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003522:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x2cc>
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	e015      	b.n	800356c <HAL_RCC_OscConfig+0x2f8>
 8003540:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003544:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003558:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800355c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCC_OscConfig+0x330>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003570:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003574:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003578:	fa92 f2a2 	rbit	r2, r2
 800357c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003580:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003584:	fab2 f282 	clz	r2, r2
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	f042 0220 	orr.w	r2, r2, #32
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	f002 021f 	and.w	r2, r2, #31
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f202 	lsl.w	r2, r1, r2
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ab      	bne.n	80034f8 <HAL_RCC_OscConfig+0x284>
 80035a0:	e003      	b.n	80035aa <HAL_RCC_OscConfig+0x336>
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 817d 	beq.w	80038ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035c0:	4ba6      	ldr	r3, [pc, #664]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035cc:	4ba3      	ldr	r3, [pc, #652]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d172      	bne.n	80036be <HAL_RCC_OscConfig+0x44a>
 80035d8:	4ba0      	ldr	r3, [pc, #640]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d16c      	bne.n	80036be <HAL_RCC_OscConfig+0x44a>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	095b      	lsrs	r3, r3, #5
 8003602:	b2db      	uxtb	r3, r3
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_OscConfig+0x3a0>
 800360e:	4b93      	ldr	r3, [pc, #588]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	e013      	b.n	800363c <HAL_RCC_OscConfig+0x3c8>
 8003614:	2302      	movs	r3, #2
 8003616:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003626:	2302      	movs	r3, #2
 8003628:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800362c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003638:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	2202      	movs	r2, #2
 800363e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003642:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003646:	fa92 f2a2 	rbit	r2, r2
 800364a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800364e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f042 0220 	orr.w	r2, r2, #32
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00a      	beq.n	8003684 <HAL_RCC_OscConfig+0x410>
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d002      	beq.n	8003684 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f000 be2e 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b75      	ldr	r3, [pc, #468]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	21f8      	movs	r1, #248	; 0xf8
 800369a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036a2:	fa91 f1a1 	rbit	r1, r1
 80036a6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80036aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036ae:	fab1 f181 	clz	r1, r1
 80036b2:	b2c9      	uxtb	r1, r1
 80036b4:	408b      	lsls	r3, r1
 80036b6:	4969      	ldr	r1, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036bc:	e0fd      	b.n	80038ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8088 	beq.w	80037e0 <HAL_RCC_OscConfig+0x56c>
 80036d0:	2301      	movs	r3, #1
 80036d2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80036da:	fa93 f3a3 	rbit	r3, r3
 80036de:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80036e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	461a      	mov	r2, r3
 80036f8:	2301      	movs	r3, #1
 80036fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fe f9c8 	bl	8001a90 <HAL_GetTick>
 8003700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003706:	f7fe f9c3 	bl	8001a90 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d902      	bls.n	800371c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	f000 bde2 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 800371c:	2302      	movs	r3, #2
 800371e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003726:	fa93 f3a3 	rbit	r3, r3
 800372a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800372e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d102      	bne.n	800374c <HAL_RCC_OscConfig+0x4d8>
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	e013      	b.n	8003774 <HAL_RCC_OscConfig+0x500>
 800374c:	2302      	movs	r3, #2
 800374e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003752:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003756:	fa93 f3a3 	rbit	r3, r3
 800375a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800375e:	2302      	movs	r3, #2
 8003760:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003764:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003768:	fa93 f3a3 	rbit	r3, r3
 800376c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2202      	movs	r2, #2
 8003776:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800377a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800377e:	fa92 f2a2 	rbit	r2, r2
 8003782:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003786:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800378a:	fab2 f282 	clz	r2, r2
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f042 0220 	orr.w	r2, r2, #32
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f002 021f 	and.w	r2, r2, #31
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f202 	lsl.w	r2, r1, r2
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0af      	beq.n	8003706 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	4b2d      	ldr	r3, [pc, #180]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	21f8      	movs	r1, #248	; 0xf8
 80037bc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037c4:	fa91 f1a1 	rbit	r1, r1
 80037c8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037d0:	fab1 f181 	clz	r1, r1
 80037d4:	b2c9      	uxtb	r1, r1
 80037d6:	408b      	lsls	r3, r1
 80037d8:	4920      	ldr	r1, [pc, #128]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	600b      	str	r3, [r1, #0]
 80037de:	e06c      	b.n	80038ba <HAL_RCC_OscConfig+0x646>
 80037e0:	2301      	movs	r3, #1
 80037e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003800:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	461a      	mov	r2, r3
 8003808:	2300      	movs	r3, #0
 800380a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f940 	bl	8001a90 <HAL_GetTick>
 8003810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003816:	f7fe f93b 	bl	8001a90 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d902      	bls.n	800382c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	f000 bd5a 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 800382c:	2302      	movs	r3, #2
 800382e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800383e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	095b      	lsrs	r3, r3, #5
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d104      	bne.n	8003860 <HAL_RCC_OscConfig+0x5ec>
 8003856:	4b01      	ldr	r3, [pc, #4]	; (800385c <HAL_RCC_OscConfig+0x5e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e015      	b.n	8003888 <HAL_RCC_OscConfig+0x614>
 800385c:	40021000 	.word	0x40021000
 8003860:	2302      	movs	r3, #2
 8003862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003872:	2302      	movs	r3, #2
 8003874:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003878:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003884:	4bc8      	ldr	r3, [pc, #800]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2202      	movs	r2, #2
 800388a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800388e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800389a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800389e:	fab2 f282 	clz	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f042 0220 	orr.w	r2, r2, #32
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ad      	bne.n	8003816 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8110 	beq.w	8003af0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d079      	beq.n	80039d4 <HAL_RCC_OscConfig+0x760>
 80038e0:	2301      	movs	r3, #1
 80038e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	4bab      	ldr	r3, [pc, #684]	; (8003bac <HAL_RCC_OscConfig+0x938>)
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	461a      	mov	r2, r3
 8003906:	2301      	movs	r3, #1
 8003908:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fe f8c1 	bl	8001a90 <HAL_GetTick>
 800390e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003914:	f7fe f8bc 	bl	8001a90 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d902      	bls.n	800392a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	f000 bcdb 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 800392a:	2302      	movs	r3, #2
 800392c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003944:	2202      	movs	r2, #2
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	fa93 f2a3 	rbit	r2, r3
 8003956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003968:	2202      	movs	r2, #2
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	fa93 f2a3 	rbit	r2, r3
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003982:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003984:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003990:	2102      	movs	r1, #2
 8003992:	6019      	str	r1, [r3, #0]
 8003994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003998:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f1a3 	rbit	r1, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039aa:	6019      	str	r1, [r3, #0]
  return result;
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	fab3 f383 	clz	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0a0      	beq.n	8003914 <HAL_RCC_OscConfig+0x6a0>
 80039d2:	e08d      	b.n	8003af0 <HAL_RCC_OscConfig+0x87c>
 80039d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	fa93 f2a3 	rbit	r2, r3
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039f6:	601a      	str	r2, [r3, #0]
  return result;
 80039f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a00:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x938>)
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe f83b 	bl	8001a90 <HAL_GetTick>
 8003a1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a20:	f7fe f836 	bl	8001a90 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d902      	bls.n	8003a36 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	f000 bc55 	b.w	80042e0 <HAL_RCC_OscConfig+0x106c>
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a3e:	2202      	movs	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f2a3 	rbit	r2, r3
 8003a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a54:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a62:	2202      	movs	r2, #2
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f2a3 	rbit	r2, r3
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a86:	2202      	movs	r2, #2
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	fa93 f2a3 	rbit	r2, r3
 8003a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003aa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aaa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aae:	2102      	movs	r1, #2
 8003ab0:	6019      	str	r1, [r3, #0]
 8003ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	fa93 f1a3 	rbit	r1, r3
 8003ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ac8:	6019      	str	r1, [r3, #0]
  return result;
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	fab3 f383 	clz	r3, r3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d197      	bne.n	8003a20 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 81a1 	beq.w	8003e48 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b22:	61d3      	str	r3, [r2, #28]
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003b3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RCC_OscConfig+0x93c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d11a      	bne.n	8003b88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_RCC_OscConfig+0x93c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_RCC_OscConfig+0x93c>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fd ff97 	bl	8001a90 <HAL_GetTick>
 8003b62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	e009      	b.n	8003b7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b68:	f7fd ff92 	bl	8001a90 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e3b1      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	; (8003bb0 <HAL_RCC_OscConfig+0x93c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0ef      	beq.n	8003b68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x940>
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a02      	ldr	r2, [pc, #8]	; (8003ba8 <HAL_RCC_OscConfig+0x934>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	e03c      	b.n	8003c20 <HAL_RCC_OscConfig+0x9ac>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	10908120 	.word	0x10908120
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCC_OscConfig+0x96a>
 8003bc4:	4bc1      	ldr	r3, [pc, #772]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	4ac0      	ldr	r2, [pc, #768]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bca:	f023 0301 	bic.w	r3, r3, #1
 8003bce:	6213      	str	r3, [r2, #32]
 8003bd0:	4bbe      	ldr	r3, [pc, #760]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4abd      	ldr	r2, [pc, #756]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	6213      	str	r3, [r2, #32]
 8003bdc:	e020      	b.n	8003c20 <HAL_RCC_OscConfig+0x9ac>
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x994>
 8003bee:	4bb7      	ldr	r3, [pc, #732]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4ab6      	ldr	r2, [pc, #728]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	4bb4      	ldr	r3, [pc, #720]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4ab3      	ldr	r2, [pc, #716]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0x9ac>
 8003c08:	4bb0      	ldr	r3, [pc, #704]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4aaf      	ldr	r2, [pc, #700]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	6213      	str	r3, [r2, #32]
 8003c14:	4bad      	ldr	r3, [pc, #692]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4aac      	ldr	r2, [pc, #688]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003c1a:	f023 0304 	bic.w	r3, r3, #4
 8003c1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8081 	beq.w	8003d34 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c32:	f7fd ff2d 	bl	8001a90 <HAL_GetTick>
 8003c36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd ff28 	bl	8001a90 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e345      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	fa93 f2a3 	rbit	r2, r3
 8003c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c72:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c80:	2202      	movs	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	fa93 f2a3 	rbit	r2, r3
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c9a:	601a      	str	r2, [r3, #0]
  return result;
 8003c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ca4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	095b      	lsrs	r3, r3, #5
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d102      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xa4c>
 8003cba:	4b84      	ldr	r3, [pc, #528]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	e013      	b.n	8003ce8 <HAL_RCC_OscConfig+0xa74>
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cc8:	2202      	movs	r2, #2
 8003cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	fa93 f2a3 	rbit	r2, r3
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	6011      	str	r1, [r2, #0]
 8003cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cf8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	fa92 f1a2 	rbit	r1, r2
 8003d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d06:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d0a:	6011      	str	r1, [r2, #0]
  return result;
 8003d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d10:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	fab2 f282 	clz	r2, r2
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f002 021f 	and.w	r2, r2, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d084      	beq.n	8003c3c <HAL_RCC_OscConfig+0x9c8>
 8003d32:	e07f      	b.n	8003e34 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d34:	f7fd feac 	bl	8001a90 <HAL_GetTick>
 8003d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3c:	e00b      	b.n	8003d56 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fd fea7 	bl	8001a90 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e2c4      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d5e:	2202      	movs	r2, #2
 8003d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fa93 f2a3 	rbit	r2, r3
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	fa93 f2a3 	rbit	r2, r3
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d9c:	601a      	str	r2, [r3, #0]
  return result;
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003da6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d102      	bne.n	8003dc2 <HAL_RCC_OscConfig+0xb4e>
 8003dbc:	4b43      	ldr	r3, [pc, #268]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	e013      	b.n	8003dea <HAL_RCC_OscConfig+0xb76>
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dca:	2202      	movs	r2, #2
 8003dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	fa93 f2a3 	rbit	r2, r3
 8003ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	4b39      	ldr	r3, [pc, #228]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003df2:	2102      	movs	r1, #2
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	fa92 f1a2 	rbit	r1, r2
 8003e04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e08:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e0c:	6011      	str	r1, [r2, #0]
  return result;
 8003e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e12:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	fab2 f282 	clz	r2, r2
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	f002 021f 	and.w	r2, r2, #31
 8003e28:	2101      	movs	r1, #1
 8003e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d184      	bne.n	8003d3e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e34:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8242 	beq.w	80042de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <HAL_RCC_OscConfig+0xc58>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	f000 8213 	beq.w	800428e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	f040 8162 	bne.w	800413e <HAL_RCC_OscConfig+0xeca>
 8003e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f2a3 	rbit	r2, r3
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e9e:	601a      	str	r2, [r3, #0]
  return result;
 8003ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ea8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eaa:	fab3 f383 	clz	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fde6 	bl	8001a90 <HAL_GetTick>
 8003ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec8:	e00c      	b.n	8003ee4 <HAL_RCC_OscConfig+0xc70>
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd fdde 	bl	8001a90 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1fd      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
 8003ee4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	fa93 f2a3 	rbit	r2, r3
 8003f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f08:	601a      	str	r2, [r3, #0]
  return result;
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d102      	bne.n	8003f2e <HAL_RCC_OscConfig+0xcba>
 8003f28:	4bb0      	ldr	r3, [pc, #704]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e027      	b.n	8003f7e <HAL_RCC_OscConfig+0xd0a>
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f40:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	fa93 f2a3 	rbit	r2, r3
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f58:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	4b9c      	ldr	r3, [pc, #624]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f82:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f90:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	fa92 f1a2 	rbit	r1, r2
 8003f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f9e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fa2:	6011      	str	r1, [r2, #0]
  return result;
 8003fa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fa8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	fab2 f282 	clz	r2, r2
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f042 0220 	orr.w	r2, r2, #32
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f002 021f 	and.w	r2, r2, #31
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d182      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fca:	4b88      	ldr	r3, [pc, #544]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	497f      	ldr	r1, [pc, #508]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	604b      	str	r3, [r1, #4]
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003ffa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ffe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004004:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	fa93 f2a3 	rbit	r2, r3
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004016:	601a      	str	r2, [r3, #0]
  return result;
 8004018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004020:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800402c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	461a      	mov	r2, r3
 8004034:	2301      	movs	r3, #1
 8004036:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd fd2a 	bl	8001a90 <HAL_GetTick>
 800403c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004040:	e009      	b.n	8004056 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fd fd25 	bl	8001a90 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e144      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800405e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	fa93 f2a3 	rbit	r2, r3
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800407a:	601a      	str	r2, [r3, #0]
  return result;
 800407c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004080:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004086:	fab3 f383 	clz	r3, r3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	d102      	bne.n	80040a0 <HAL_RCC_OscConfig+0xe2c>
 800409a:	4b54      	ldr	r3, [pc, #336]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	e027      	b.n	80040f0 <HAL_RCC_OscConfig+0xe7c>
 80040a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	fa93 f2a3 	rbit	r2, r3
 80040bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	4b3f      	ldr	r3, [pc, #252]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040fc:	6011      	str	r1, [r2, #0]
 80040fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004102:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	fa92 f1a2 	rbit	r1, r2
 800410c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004110:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004114:	6011      	str	r1, [r2, #0]
  return result;
 8004116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800411a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	fab2 f282 	clz	r2, r2
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	f042 0220 	orr.w	r2, r2, #32
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	f002 021f 	and.w	r2, r2, #31
 8004130:	2101      	movs	r1, #1
 8004132:	fa01 f202 	lsl.w	r2, r1, r2
 8004136:	4013      	ands	r3, r2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d082      	beq.n	8004042 <HAL_RCC_OscConfig+0xdce>
 800413c:	e0cf      	b.n	80042de <HAL_RCC_OscConfig+0x106a>
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004146:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	fa93 f2a3 	rbit	r2, r3
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004162:	601a      	str	r2, [r3, #0]
  return result;
 8004164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004168:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800416c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	fab3 f383 	clz	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fc84 	bl	8001a90 <HAL_GetTick>
 8004188:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	e009      	b.n	80041a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418e:	f7fd fc7f 	bl	8001a90 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e09e      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	fa93 f2a3 	rbit	r2, r3
 80041be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041c6:	601a      	str	r2, [r3, #0]
  return result;
 80041c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80041d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d104      	bne.n	80041f0 <HAL_RCC_OscConfig+0xf7c>
 80041e6:	4b01      	ldr	r3, [pc, #4]	; (80041ec <HAL_RCC_OscConfig+0xf78>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	e029      	b.n	8004240 <HAL_RCC_OscConfig+0xfcc>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004202:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	fa93 f2a3 	rbit	r2, r3
 800420c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004210:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800421e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004228:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	fa93 f2a3 	rbit	r2, r3
 8004232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004236:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <HAL_RCC_OscConfig+0x1078>)
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004244:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004248:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800424c:	6011      	str	r1, [r2, #0]
 800424e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004252:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004256:	6812      	ldr	r2, [r2, #0]
 8004258:	fa92 f1a2 	rbit	r1, r2
 800425c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004260:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004264:	6011      	str	r1, [r2, #0]
  return result;
 8004266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800426a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	fab2 f282 	clz	r2, r2
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	f042 0220 	orr.w	r2, r2, #32
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	f002 021f 	and.w	r2, r2, #31
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f202 	lsl.w	r2, r1, r2
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d180      	bne.n	800418e <HAL_RCC_OscConfig+0xf1a>
 800428c:	e027      	b.n	80042de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800428e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e01e      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042a2:	4b12      	ldr	r3, [pc, #72]	; (80042ec <HAL_RCC_OscConfig+0x1078>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d10b      	bne.n	80042da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b09e      	sub	sp, #120	; 0x78
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e162      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b90      	ldr	r3, [pc, #576]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b8d      	ldr	r3, [pc, #564]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	498b      	ldr	r1, [pc, #556]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e14a      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	497f      	ldr	r1, [pc, #508]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80dc 	beq.w	800451c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d13c      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xf6>
 800436c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004370:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d102      	bne.n	8004396 <HAL_RCC_ClockConfig+0xa6>
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	e00f      	b.n	80043b6 <HAL_RCC_ClockConfig+0xc6>
 8004396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	667b      	str	r3, [r7, #100]	; 0x64
 80043a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60
 80043aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b2:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80043bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043c6:	fab2 f282 	clz	r2, r2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f042 0220 	orr.w	r2, r2, #32
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f002 021f 	and.w	r2, r2, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d17b      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0f3      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d13c      	bne.n	8004468 <HAL_RCC_ClockConfig+0x178>
 80043ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_RCC_ClockConfig+0x128>
 8004412:	4b4f      	ldr	r3, [pc, #316]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e00f      	b.n	8004438 <HAL_RCC_ClockConfig+0x148>
 8004418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
 8004426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	4b46      	ldr	r3, [pc, #280]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800443c:	63ba      	str	r2, [r7, #56]	; 0x38
 800443e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004440:	fa92 f2a2 	rbit	r2, r2
 8004444:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f042 0220 	orr.w	r2, r2, #32
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f002 021f 	and.w	r2, r2, #31
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f202 	lsl.w	r2, r1, r2
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d13a      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b2      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
 8004468:	2302      	movs	r3, #2
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e00d      	b.n	80044ac <HAL_RCC_ClockConfig+0x1bc>
 8004490:	2302      	movs	r3, #2
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	2302      	movs	r3, #2
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2202      	movs	r2, #2
 80044ae:	61ba      	str	r2, [r7, #24]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	617a      	str	r2, [r7, #20]
  return result;
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	fab2 f282 	clz	r2, r2
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	f042 0220 	orr.w	r2, r2, #32
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	f002 021f 	and.w	r2, r2, #31
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f202 	lsl.w	r2, r1, r2
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e079      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	491a      	ldr	r1, [pc, #104]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fd fad0 	bl	8001a90 <HAL_GetTick>
 80044f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fd facc 	bl	8001a90 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e061      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d214      	bcs.n	8004554 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	4906      	ldr	r1, [pc, #24]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e040      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
 800454c:	40022000 	.word	0x40022000
 8004550:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	491a      	ldr	r1, [pc, #104]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4912      	ldr	r1, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004592:	f000 f829 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004596:	4601      	mov	r1, r0
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a0:	22f0      	movs	r2, #240	; 0xf0
 80045a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	fa92 f2a2 	rbit	r2, r2
 80045aa:	60fa      	str	r2, [r7, #12]
  return result;
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	fab2 f282 	clz	r2, r2
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	40d3      	lsrs	r3, r2
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x2ec>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	fa21 f303 	lsr.w	r3, r1, r3
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <HAL_RCC_ClockConfig+0x2f0>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_ClockConfig+0x2f4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fa1e 	bl	8001a08 <HAL_InitTick>
  
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3778      	adds	r7, #120	; 0x78
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	08009014 	.word	0x08009014
 80045e0:	20000034 	.word	0x20000034
 80045e4:	20000038 	.word	0x20000038

080045e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b08b      	sub	sp, #44	; 0x2c
 80045ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b04      	cmp	r3, #4
 8004610:	d002      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x30>
 8004612:	2b08      	cmp	r3, #8
 8004614:	d003      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x36>
 8004616:	e03c      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800461a:	623b      	str	r3, [r7, #32]
      break;
 800461c:	e03c      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004624:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004628:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	fa92 f2a2 	rbit	r2, r2
 8004630:	607a      	str	r2, [r7, #4]
  return result;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	fab2 f282 	clz	r2, r2
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	40d3      	lsrs	r3, r2
 800463c:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	220f      	movs	r2, #15
 800464c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	fa92 f2a2 	rbit	r2, r2
 8004654:	60fa      	str	r2, [r7, #12]
  return result;
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	fab2 f282 	clz	r2, r2
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	40d3      	lsrs	r3, r2
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004670:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	fbb2 f2f3 	udiv	r2, r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
 8004680:	e004      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	623b      	str	r3, [r7, #32]
      break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004694:	623b      	str	r3, [r7, #32]
      break;
 8004696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004698:	6a3b      	ldr	r3, [r7, #32]
}
 800469a:	4618      	mov	r0, r3
 800469c:	372c      	adds	r7, #44	; 0x2c
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	0800902c 	.word	0x0800902c
 80046b4:	0800903c 	.word	0x0800903c
 80046b8:	003d0900 	.word	0x003d0900

080046bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000034 	.word	0x20000034

080046d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80046da:	f7ff ffef 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 80046de:	4601      	mov	r1, r0
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	603a      	str	r2, [r7, #0]
  return result;
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	40d3      	lsrs	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	08009024 	.word	0x08009024

08004718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800471e:	f7ff ffcd 	bl	80046bc <HAL_RCC_GetHCLKFreq>
 8004722:	4601      	mov	r1, r0
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800472c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004730:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	fa92 f2a2 	rbit	r2, r2
 8004738:	603a      	str	r2, [r7, #0]
  return result;
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	fab2 f282 	clz	r2, r2
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	40d3      	lsrs	r3, r2
 8004744:	4a04      	ldr	r2, [pc, #16]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40021000 	.word	0x40021000
 8004758:	08009024 	.word	0x08009024

0800475c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b092      	sub	sp, #72	; 0x48
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80cd 	beq.w	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004780:	4b86      	ldr	r3, [pc, #536]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b83      	ldr	r3, [pc, #524]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4a82      	ldr	r2, [pc, #520]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004796:	61d3      	str	r3, [r2, #28]
 8004798:	4b80      	ldr	r3, [pc, #512]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b7d      	ldr	r3, [pc, #500]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b7a      	ldr	r3, [pc, #488]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a79      	ldr	r2, [pc, #484]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd f965 	bl	8001a90 <HAL_GetTick>
 80047c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd f961 	bl	8001a90 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d901      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0db      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047e8:	4b6c      	ldr	r3, [pc, #432]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d07d      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004800:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004802:	429a      	cmp	r2, r3
 8004804:	d076      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004806:	4b65      	ldr	r3, [pc, #404]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004814:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	fa93 f3a3 	rbit	r3, r3
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	461a      	mov	r2, r3
 8004830:	2301      	movs	r3, #1
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	4b55      	ldr	r3, [pc, #340]	; (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	461a      	mov	r2, r3
 8004854:	2300      	movs	r3, #0
 8004856:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004858:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d045      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fd f912 	bl	8001a90 <HAL_GetTick>
 800486c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	e00a      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd f90e 	bl	8001a90 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e086      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004886:	2302      	movs	r3, #2
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	fa93 f3a3 	rbit	r3, r3
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
 8004892:	2302      	movs	r3, #2
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	61fb      	str	r3, [r7, #28]
  return result;
 800489e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d102      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048b4:	4b39      	ldr	r3, [pc, #228]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	e007      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80048ba:	2302      	movs	r3, #2
 80048bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	4b35      	ldr	r3, [pc, #212]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2202      	movs	r2, #2
 80048cc:	613a      	str	r2, [r7, #16]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	fa92 f2a2 	rbit	r2, r2
 80048d4:	60fa      	str	r2, [r7, #12]
  return result;
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	fab2 f282 	clz	r2, r2
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	f002 021f 	and.w	r2, r2, #31
 80048e8:	2101      	movs	r1, #1
 80048ea:	fa01 f202 	lsl.w	r2, r1, r2
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0bd      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048f4:	4b29      	ldr	r3, [pc, #164]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4926      	ldr	r1, [pc, #152]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004902:	4313      	orrs	r3, r2
 8004904:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004906:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490e:	4b23      	ldr	r3, [pc, #140]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004918:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	491a      	ldr	r1, [pc, #104]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004934:	4313      	orrs	r3, r2
 8004936:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004944:	4b15      	ldr	r3, [pc, #84]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f023 0210 	bic.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4912      	ldr	r1, [pc, #72]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004952:	4313      	orrs	r3, r2
 8004954:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d008      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	490b      	ldr	r1, [pc, #44]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004970:	4313      	orrs	r3, r2
 8004972:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004984:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	4903      	ldr	r1, [pc, #12]	; (800499c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800498e:	4313      	orrs	r3, r2
 8004990:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3748      	adds	r7, #72	; 0x48
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	40007000 	.word	0x40007000
 80049a4:	10908100 	.word	0x10908100

080049a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e049      	b.n	8004a4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fc fdda 	bl	8001588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fb60 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e049      	b.n	8004afc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d106      	bne.n	8004a82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f841 	bl	8004b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f000 fb09 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_TIM_PWM_Start+0x24>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	bf14      	ite	ne
 8004b34:	2301      	movne	r3, #1
 8004b36:	2300      	moveq	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	e03c      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d109      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x3e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	bf14      	ite	ne
 8004b4e:	2301      	movne	r3, #1
 8004b50:	2300      	moveq	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e02f      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d109      	bne.n	8004b70 <HAL_TIM_PWM_Start+0x58>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e022      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b0c      	cmp	r3, #12
 8004b74:	d109      	bne.n	8004b8a <HAL_TIM_PWM_Start+0x72>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e015      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d109      	bne.n	8004ba4 <HAL_TIM_PWM_Start+0x8c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e008      	b.n	8004bb6 <HAL_TIM_PWM_Start+0x9e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	bf14      	ite	ne
 8004bb0:	2301      	movne	r3, #1
 8004bb2:	2300      	moveq	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e088      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xb6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bcc:	e023      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_PWM_Start+0xc6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	e01b      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bec:	e013      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xe6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bfc:	e00b      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_PWM_Start+0xf6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c0c:	e003      	b.n	8004c16 <HAL_TIM_PWM_Start+0xfe>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fdfc 	bl	800581c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2b      	ldr	r2, [pc, #172]	; (8004cd8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00e      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x134>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <HAL_TIM_PWM_Start+0x1c4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d009      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x134>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a28      	ldr	r2, [pc, #160]	; (8004ce0 <HAL_TIM_PWM_Start+0x1c8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x134>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a27      	ldr	r2, [pc, #156]	; (8004ce4 <HAL_TIM_PWM_Start+0x1cc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIM_PWM_Start+0x138>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_TIM_PWM_Start+0x13a>
 8004c50:	2300      	movs	r3, #0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIM_PWM_Start+0x1c0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00e      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x176>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d009      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x176>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_TIM_PWM_Start+0x1d0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d004      	beq.n	8004c8e <HAL_TIM_PWM_Start+0x176>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <HAL_TIM_PWM_Start+0x1c4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d115      	bne.n	8004cba <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_TIM_PWM_Start+0x1d4>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b06      	cmp	r3, #6
 8004c9e:	d015      	beq.n	8004ccc <HAL_TIM_PWM_Start+0x1b4>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca6:	d011      	beq.n	8004ccc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	e008      	b.n	8004ccc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e000      	b.n	8004cce <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	40014800 	.word	0x40014800
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0ff      	b.n	8004f0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b14      	cmp	r3, #20
 8004d1a:	f200 80f0 	bhi.w	8004efe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d1e:	a201      	add	r2, pc, #4	; (adr r2, 8004d24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004eff 	.word	0x08004eff
 8004d2c:	08004eff 	.word	0x08004eff
 8004d30:	08004eff 	.word	0x08004eff
 8004d34:	08004db9 	.word	0x08004db9
 8004d38:	08004eff 	.word	0x08004eff
 8004d3c:	08004eff 	.word	0x08004eff
 8004d40:	08004eff 	.word	0x08004eff
 8004d44:	08004dfb 	.word	0x08004dfb
 8004d48:	08004eff 	.word	0x08004eff
 8004d4c:	08004eff 	.word	0x08004eff
 8004d50:	08004eff 	.word	0x08004eff
 8004d54:	08004e3b 	.word	0x08004e3b
 8004d58:	08004eff 	.word	0x08004eff
 8004d5c:	08004eff 	.word	0x08004eff
 8004d60:	08004eff 	.word	0x08004eff
 8004d64:	08004e7d 	.word	0x08004e7d
 8004d68:	08004eff 	.word	0x08004eff
 8004d6c:	08004eff 	.word	0x08004eff
 8004d70:	08004eff 	.word	0x08004eff
 8004d74:	08004ebd 	.word	0x08004ebd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa0c 	bl	800519c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0208 	orr.w	r2, r2, #8
 8004d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699a      	ldr	r2, [r3, #24]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6999      	ldr	r1, [r3, #24]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	619a      	str	r2, [r3, #24]
      break;
 8004db6:	e0a5      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fa72 	bl	80052a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6999      	ldr	r1, [r3, #24]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	021a      	lsls	r2, r3, #8
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	619a      	str	r2, [r3, #24]
      break;
 8004df8:	e084      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fad1 	bl	80053a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0208 	orr.w	r2, r2, #8
 8004e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0204 	bic.w	r2, r2, #4
 8004e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e064      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fb2f 	bl	80054a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69d9      	ldr	r1, [r3, #28]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	021a      	lsls	r2, r3, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]
      break;
 8004e7a:	e043      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fb72 	bl	800556c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0208 	orr.w	r2, r2, #8
 8004e96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0204 	bic.w	r2, r2, #4
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eba:	e023      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fbb0 	bl	8005628 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	021a      	lsls	r2, r3, #8
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004efc:	e002      	b.n	8004f04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	75fb      	strb	r3, [r7, #23]
      break;
 8004f02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_TIM_ConfigClockSource+0x1c>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e0b6      	b.n	80050a2 <HAL_TIM_ConfigClockSource+0x18a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f70:	d03e      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0xd8>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	f200 8087 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	f000 8086 	beq.w	800508e <HAL_TIM_ConfigClockSource+0x176>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f86:	d87f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d01a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xaa>
 8004f8c:	2b70      	cmp	r3, #112	; 0x70
 8004f8e:	d87b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d050      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x11e>
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d877      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d03c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0xfe>
 8004f9c:	2b50      	cmp	r3, #80	; 0x50
 8004f9e:	d873      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d058      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x13e>
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d86f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d064      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15e>
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d86b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d060      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15e>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d867      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05c      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15e>
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d05a      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x15e>
 8004fc0:	e062      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6899      	ldr	r1, [r3, #8]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f000 fc03 	bl	80057dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e04f      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f000 fbec 	bl	80057dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005012:	609a      	str	r2, [r3, #8]
      break;
 8005014:	e03c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	461a      	mov	r2, r3
 8005024:	f000 fb60 	bl	80056e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2150      	movs	r1, #80	; 0x50
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fbb9 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005034:	e02c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fb7f 	bl	8005746 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2160      	movs	r1, #96	; 0x60
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fba9 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005054:	e01c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fb40 	bl	80056e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fb99 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005074:	e00c      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fb90 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005086:	e003      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	73fb      	strb	r3, [r7, #15]
      break;
 800508c:	e000      	b.n	8005090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800508e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a32      	ldr	r2, [pc, #200]	; (8005188 <TIM_Base_SetConfig+0xdc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d007      	beq.n	80050d4 <TIM_Base_SetConfig+0x28>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d003      	beq.n	80050d4 <TIM_Base_SetConfig+0x28>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2f      	ldr	r2, [pc, #188]	; (800518c <TIM_Base_SetConfig+0xe0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <TIM_Base_SetConfig+0xdc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <TIM_Base_SetConfig+0x6a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x6a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a24      	ldr	r2, [pc, #144]	; (800518c <TIM_Base_SetConfig+0xe0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x6a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a23      	ldr	r2, [pc, #140]	; (8005190 <TIM_Base_SetConfig+0xe4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x6a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a22      	ldr	r2, [pc, #136]	; (8005194 <TIM_Base_SetConfig+0xe8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x6a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a21      	ldr	r2, [pc, #132]	; (8005198 <TIM_Base_SetConfig+0xec>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <TIM_Base_SetConfig+0xdc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00b      	beq.n	800516c <TIM_Base_SetConfig+0xc0>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <TIM_Base_SetConfig+0xe4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <TIM_Base_SetConfig+0xc0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a0d      	ldr	r2, [pc, #52]	; (8005194 <TIM_Base_SetConfig+0xe8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d003      	beq.n	800516c <TIM_Base_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0c      	ldr	r2, [pc, #48]	; (8005198 <TIM_Base_SetConfig+0xec>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40000400 	.word	0x40000400
 8005190:	40014000 	.word	0x40014000
 8005194:	40014400 	.word	0x40014400
 8005198:	40014800 	.word	0x40014800

0800519c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0302 	bic.w	r3, r3, #2
 80051e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a28      	ldr	r2, [pc, #160]	; (8005298 <TIM_OC1_SetConfig+0xfc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_OC1_SetConfig+0x78>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a27      	ldr	r2, [pc, #156]	; (800529c <TIM_OC1_SetConfig+0x100>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_OC1_SetConfig+0x78>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a26      	ldr	r2, [pc, #152]	; (80052a0 <TIM_OC1_SetConfig+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC1_SetConfig+0x78>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a25      	ldr	r2, [pc, #148]	; (80052a4 <TIM_OC1_SetConfig+0x108>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10c      	bne.n	800522e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0308 	bic.w	r3, r3, #8
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0304 	bic.w	r3, r3, #4
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <TIM_OC1_SetConfig+0xfc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00b      	beq.n	800524e <TIM_OC1_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a18      	ldr	r2, [pc, #96]	; (800529c <TIM_OC1_SetConfig+0x100>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d007      	beq.n	800524e <TIM_OC1_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <TIM_OC1_SetConfig+0x104>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d003      	beq.n	800524e <TIM_OC1_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a16      	ldr	r2, [pc, #88]	; (80052a4 <TIM_OC1_SetConfig+0x108>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d111      	bne.n	8005272 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800525c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f023 0210 	bic.w	r2, r3, #16
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f023 0320 	bic.w	r3, r3, #32
 80052f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a24      	ldr	r2, [pc, #144]	; (8005398 <TIM_OC2_SetConfig+0xf0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d10d      	bne.n	8005328 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a1b      	ldr	r2, [pc, #108]	; (8005398 <TIM_OC2_SetConfig+0xf0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_OC2_SetConfig+0xa0>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a1a      	ldr	r2, [pc, #104]	; (800539c <TIM_OC2_SetConfig+0xf4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_OC2_SetConfig+0xa0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a19      	ldr	r2, [pc, #100]	; (80053a0 <TIM_OC2_SetConfig+0xf8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC2_SetConfig+0xa0>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <TIM_OC2_SetConfig+0xfc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d113      	bne.n	8005370 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005356:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	621a      	str	r2, [r3, #32]
}
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a23      	ldr	r2, [pc, #140]	; (8005494 <TIM_OC3_SetConfig+0xec>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10d      	bne.n	8005426 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005424:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <TIM_OC3_SetConfig+0xec>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00b      	beq.n	8005446 <TIM_OC3_SetConfig+0x9e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a19      	ldr	r2, [pc, #100]	; (8005498 <TIM_OC3_SetConfig+0xf0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d007      	beq.n	8005446 <TIM_OC3_SetConfig+0x9e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a18      	ldr	r2, [pc, #96]	; (800549c <TIM_OC3_SetConfig+0xf4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d003      	beq.n	8005446 <TIM_OC3_SetConfig+0x9e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <TIM_OC3_SetConfig+0xf8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d113      	bne.n	800546e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800544c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800

080054a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	031b      	lsls	r3, r3, #12
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <TIM_OC4_SetConfig+0xb8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00b      	beq.n	8005520 <TIM_OC4_SetConfig+0x7c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	; (8005560 <TIM_OC4_SetConfig+0xbc>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d007      	beq.n	8005520 <TIM_OC4_SetConfig+0x7c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a14      	ldr	r2, [pc, #80]	; (8005564 <TIM_OC4_SetConfig+0xc0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d003      	beq.n	8005520 <TIM_OC4_SetConfig+0x7c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a13      	ldr	r2, [pc, #76]	; (8005568 <TIM_OC4_SetConfig+0xc4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d109      	bne.n	8005534 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	621a      	str	r2, [r3, #32]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800

0800556c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC5_SetConfig+0xac>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00b      	beq.n	80055de <TIM_OC5_SetConfig+0x72>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a14      	ldr	r2, [pc, #80]	; (800561c <TIM_OC5_SetConfig+0xb0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d007      	beq.n	80055de <TIM_OC5_SetConfig+0x72>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a13      	ldr	r2, [pc, #76]	; (8005620 <TIM_OC5_SetConfig+0xb4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d003      	beq.n	80055de <TIM_OC5_SetConfig+0x72>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_OC5_SetConfig+0xb8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d109      	bne.n	80055f2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	051b      	lsls	r3, r3, #20
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a16      	ldr	r2, [pc, #88]	; (80056d8 <TIM_OC6_SetConfig+0xb0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00b      	beq.n	800569c <TIM_OC6_SetConfig+0x74>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <TIM_OC6_SetConfig+0xb4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d007      	beq.n	800569c <TIM_OC6_SetConfig+0x74>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a14      	ldr	r2, [pc, #80]	; (80056e0 <TIM_OC6_SetConfig+0xb8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC6_SetConfig+0x74>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <TIM_OC6_SetConfig+0xbc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d109      	bne.n	80056b0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	029b      	lsls	r3, r3, #10
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40012c00 	.word	0x40012c00
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 0307 	orr.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	2201      	movs	r2, #1
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a1a      	ldr	r2, [r3, #32]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	43db      	mvns	r3, r3
 800583e:	401a      	ands	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f003 031f 	and.w	r3, r3, #31
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	fa01 f303 	lsl.w	r3, r1, r3
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
}
 800585a:	bf00      	nop
 800585c:	371c      	adds	r7, #28
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <HAL_TIMEx_PWMN_Start+0x24>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	e022      	b.n	80058d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d109      	bne.n	80058a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b01      	cmp	r3, #1
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e015      	b.n	80058d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d109      	bne.n	80058c0 <HAL_TIMEx_PWMN_Start+0x58>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e008      	b.n	80058d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e05f      	b.n	800599a <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <HAL_TIMEx_PWMN_Start+0x82>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e8:	e013      	b.n	8005912 <HAL_TIMEx_PWMN_Start+0xaa>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d104      	bne.n	80058fa <HAL_TIMEx_PWMN_Start+0x92>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f8:	e00b      	b.n	8005912 <HAL_TIMEx_PWMN_Start+0xaa>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d104      	bne.n	800590a <HAL_TIMEx_PWMN_Start+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005908:	e003      	b.n	8005912 <HAL_TIMEx_PWMN_Start+0xaa>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2202      	movs	r2, #2
 800590e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2204      	movs	r2, #4
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f930 	bl	8005b80 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800592e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	; (80059a4 <HAL_TIMEx_PWMN_Start+0x13c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_TIMEx_PWMN_Start+0xf0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d009      	beq.n	8005958 <HAL_TIMEx_PWMN_Start+0xf0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a17      	ldr	r2, [pc, #92]	; (80059a8 <HAL_TIMEx_PWMN_Start+0x140>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_TIMEx_PWMN_Start+0xf0>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a16      	ldr	r2, [pc, #88]	; (80059ac <HAL_TIMEx_PWMN_Start+0x144>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d115      	bne.n	8005984 <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <HAL_TIMEx_PWMN_Start+0x148>)
 8005960:	4013      	ands	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b06      	cmp	r3, #6
 8005968:	d015      	beq.n	8005996 <HAL_TIMEx_PWMN_Start+0x12e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005970:	d011      	beq.n	8005996 <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e008      	b.n	8005996 <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e000      	b.n	8005998 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	00010007 	.word	0x00010007

080059b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e054      	b.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a24      	ldr	r2, [pc, #144]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d009      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10c      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40014000 	.word	0x40014000

08005a90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e060      	b.n	8005b6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d115      	bne.n	8005b5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	051b      	lsls	r3, r3, #20
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00

08005b80 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2204      	movs	r2, #4
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e040      	b.n	8005c5e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fb fd7b 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2224      	movs	r2, #36	; 0x24
 8005bf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f8c1 	bl	8005d90 <UART_SetConfig>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e022      	b.n	8005c5e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f9eb 	bl	8005ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa72 	bl	8006140 <UART_CheckIdleState>
 8005c5c:	4603      	mov	r3, r0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b08a      	sub	sp, #40	; 0x28
 8005c6a:	af02      	add	r7, sp, #8
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	60b9      	str	r1, [r7, #8]
 8005c70:	603b      	str	r3, [r7, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	f040 8082 	bne.w	8005d84 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_UART_Transmit+0x26>
 8005c86:	88fb      	ldrh	r3, [r7, #6]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e07a      	b.n	8005d86 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_UART_Transmit+0x38>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e073      	b.n	8005d86 <HAL_UART_Transmit+0x120>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cb4:	f7fb feec 	bl	8001a90 <HAL_GetTick>
 8005cb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	88fa      	ldrh	r2, [r7, #6]
 8005cbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd2:	d108      	bne.n	8005ce6 <HAL_UART_Transmit+0x80>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e003      	b.n	8005cee <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cf6:	e02d      	b.n	8005d54 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2180      	movs	r1, #128	; 0x80
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fa65 	bl	80061d2 <UART_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e039      	b.n	8005d86 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10b      	bne.n	8005d30 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d24:	b292      	uxth	r2, r2
 8005d26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	e008      	b.n	8005d42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1cb      	bne.n	8005cf8 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2200      	movs	r2, #0
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fa31 	bl	80061d2 <UART_WaitOnFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e005      	b.n	8005d86 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <UART_SetConfig+0x254>)
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	6979      	ldr	r1, [r7, #20]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a78      	ldr	r2, [pc, #480]	; (8005fe8 <UART_SetConfig+0x258>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d120      	bne.n	8005e4e <UART_SetConfig+0xbe>
 8005e0c:	4b77      	ldr	r3, [pc, #476]	; (8005fec <UART_SetConfig+0x25c>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d817      	bhi.n	8005e48 <UART_SetConfig+0xb8>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <UART_SetConfig+0x90>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e3d 	.word	0x08005e3d
 8005e28:	08005e43 	.word	0x08005e43
 8005e2c:	08005e37 	.word	0x08005e37
 8005e30:	2300      	movs	r3, #0
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e01d      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e36:	2302      	movs	r3, #2
 8005e38:	77fb      	strb	r3, [r7, #31]
 8005e3a:	e01a      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	77fb      	strb	r3, [r7, #31]
 8005e40:	e017      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e42:	2308      	movs	r3, #8
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e014      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e011      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a67      	ldr	r2, [pc, #412]	; (8005ff0 <UART_SetConfig+0x260>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d102      	bne.n	8005e5e <UART_SetConfig+0xce>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a64      	ldr	r2, [pc, #400]	; (8005ff4 <UART_SetConfig+0x264>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d102      	bne.n	8005e6e <UART_SetConfig+0xde>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	e001      	b.n	8005e72 <UART_SetConfig+0xe2>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7a:	d15b      	bne.n	8005f34 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d827      	bhi.n	8005ed2 <UART_SetConfig+0x142>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <UART_SetConfig+0xf8>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005eb5 	.word	0x08005eb5
 8005e90:	08005ebd 	.word	0x08005ebd
 8005e94:	08005ed3 	.word	0x08005ed3
 8005e98:	08005ec3 	.word	0x08005ec3
 8005e9c:	08005ed3 	.word	0x08005ed3
 8005ea0:	08005ed3 	.word	0x08005ed3
 8005ea4:	08005ed3 	.word	0x08005ed3
 8005ea8:	08005ecb 	.word	0x08005ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fe fc12 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	61b8      	str	r0, [r7, #24]
        break;
 8005eb2:	e013      	b.n	8005edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fe fc30 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	61b8      	str	r0, [r7, #24]
        break;
 8005eba:	e00f      	b.n	8005edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ebc:	4b4e      	ldr	r3, [pc, #312]	; (8005ff8 <UART_SetConfig+0x268>)
 8005ebe:	61bb      	str	r3, [r7, #24]
        break;
 8005ec0:	e00c      	b.n	8005edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ec2:	f7fe fb91 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8005ec6:	61b8      	str	r0, [r7, #24]
        break;
 8005ec8:	e008      	b.n	8005edc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ece:	61bb      	str	r3, [r7, #24]
        break;
 8005ed0:	e004      	b.n	8005edc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8005eda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d074      	beq.n	8005fcc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	005a      	lsls	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	2b0f      	cmp	r3, #15
 8005efe:	d916      	bls.n	8005f2e <UART_SetConfig+0x19e>
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d212      	bcs.n	8005f2e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f023 030f 	bic.w	r3, r3, #15
 8005f10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	085b      	lsrs	r3, r3, #1
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	89fb      	ldrh	r3, [r7, #14]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	89fa      	ldrh	r2, [r7, #14]
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	e04e      	b.n	8005fcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	77bb      	strb	r3, [r7, #30]
 8005f32:	e04b      	b.n	8005fcc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f34:	7ffb      	ldrb	r3, [r7, #31]
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d827      	bhi.n	8005f8a <UART_SetConfig+0x1fa>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <UART_SetConfig+0x1b0>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f65 	.word	0x08005f65
 8005f44:	08005f6d 	.word	0x08005f6d
 8005f48:	08005f75 	.word	0x08005f75
 8005f4c:	08005f8b 	.word	0x08005f8b
 8005f50:	08005f7b 	.word	0x08005f7b
 8005f54:	08005f8b 	.word	0x08005f8b
 8005f58:	08005f8b 	.word	0x08005f8b
 8005f5c:	08005f8b 	.word	0x08005f8b
 8005f60:	08005f83 	.word	0x08005f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f64:	f7fe fbb6 	bl	80046d4 <HAL_RCC_GetPCLK1Freq>
 8005f68:	61b8      	str	r0, [r7, #24]
        break;
 8005f6a:	e013      	b.n	8005f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fe fbd4 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 8005f70:	61b8      	str	r0, [r7, #24]
        break;
 8005f72:	e00f      	b.n	8005f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f74:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <UART_SetConfig+0x268>)
 8005f76:	61bb      	str	r3, [r7, #24]
        break;
 8005f78:	e00c      	b.n	8005f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f7a:	f7fe fb35 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8005f7e:	61b8      	str	r0, [r7, #24]
        break;
 8005f80:	e008      	b.n	8005f94 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f86:	61bb      	str	r3, [r7, #24]
        break;
 8005f88:	e004      	b.n	8005f94 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	77bb      	strb	r3, [r7, #30]
        break;
 8005f92:	bf00      	nop
    }

    if (pclk != 0U)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d018      	beq.n	8005fcc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	085a      	lsrs	r2, r3, #1
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	441a      	add	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b0f      	cmp	r3, #15
 8005fb4:	d908      	bls.n	8005fc8 <UART_SetConfig+0x238>
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbc:	d204      	bcs.n	8005fc8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e001      	b.n	8005fcc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	efff69f3 	.word	0xefff69f3
 8005fe8:	40013800 	.word	0x40013800
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40004400 	.word	0x40004400
 8005ff4:	40004800 	.word	0x40004800
 8005ff8:	007a1200 	.word	0x007a1200

08005ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	f003 0310 	and.w	r3, r3, #16
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01a      	beq.n	8006112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fa:	d10a      	bne.n	8006112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00a      	beq.n	8006134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  }
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af02      	add	r7, sp, #8
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006150:	f7fb fc9e 	bl	8001a90 <HAL_GetTick>
 8006154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b08      	cmp	r3, #8
 8006162:	d10e      	bne.n	8006182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f82d 	bl	80061d2 <UART_WaitOnFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e023      	b.n	80061ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b04      	cmp	r3, #4
 800618e:	d10e      	bne.n	80061ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f817 	bl	80061d2 <UART_WaitOnFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e00d      	b.n	80061ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b09c      	sub	sp, #112	; 0x70
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	603b      	str	r3, [r7, #0]
 80061de:	4613      	mov	r3, r2
 80061e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e2:	e0a5      	b.n	8006330 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ea:	f000 80a1 	beq.w	8006330 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fb fc4f 	bl	8001a90 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d302      	bcc.n	8006204 <UART_WaitOnFlagUntilTimeout+0x32>
 80061fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006200:	2b00      	cmp	r3, #0
 8006202:	d13e      	bne.n	8006282 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006218:	667b      	str	r3, [r7, #100]	; 0x64
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006224:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006228:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e6      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3308      	adds	r3, #8
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	663b      	str	r3, [r7, #96]	; 0x60
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3308      	adds	r3, #8
 8006254:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006256:	64ba      	str	r2, [r7, #72]	; 0x48
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800625c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800625e:	e841 2300 	strex	r3, r2, [r1]
 8006262:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e5      	bne.n	8006236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2220      	movs	r2, #32
 800626e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2220      	movs	r2, #32
 8006274:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e067      	b.n	8006352 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d04f      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629e:	d147      	bne.n	8006330 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e6      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3308      	adds	r3, #8
 80062e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	613b      	str	r3, [r7, #16]
   return(result);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3308      	adds	r3, #8
 80062fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062fc:	623a      	str	r2, [r7, #32]
 80062fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	6a3a      	ldr	r2, [r7, #32]
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	61bb      	str	r3, [r7, #24]
   return(result);
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e5      	bne.n	80062dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2220      	movs	r2, #32
 8006320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e010      	b.n	8006352 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4013      	ands	r3, r2
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	429a      	cmp	r2, r3
 800634c:	f43f af4a 	beq.w	80061e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3770      	adds	r7, #112	; 0x70
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	; (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000040 	.word	0x20000040

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4d0d      	ldr	r5, [pc, #52]	; (80063a0 <__libc_init_array+0x38>)
 800636c:	4c0d      	ldr	r4, [pc, #52]	; (80063a4 <__libc_init_array+0x3c>)
 800636e:	1b64      	subs	r4, r4, r5
 8006370:	10a4      	asrs	r4, r4, #2
 8006372:	2600      	movs	r6, #0
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	4d0b      	ldr	r5, [pc, #44]	; (80063a8 <__libc_init_array+0x40>)
 800637a:	4c0c      	ldr	r4, [pc, #48]	; (80063ac <__libc_init_array+0x44>)
 800637c:	f002 fdc2 	bl	8008f04 <_init>
 8006380:	1b64      	subs	r4, r4, r5
 8006382:	10a4      	asrs	r4, r4, #2
 8006384:	2600      	movs	r6, #0
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08009424 	.word	0x08009424
 80063a4:	08009424 	.word	0x08009424
 80063a8:	08009424 	.word	0x08009424
 80063ac:	08009428 	.word	0x08009428

080063b0 <memset>:
 80063b0:	4402      	add	r2, r0
 80063b2:	4603      	mov	r3, r0
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d100      	bne.n	80063ba <memset+0xa>
 80063b8:	4770      	bx	lr
 80063ba:	f803 1b01 	strb.w	r1, [r3], #1
 80063be:	e7f9      	b.n	80063b4 <memset+0x4>

080063c0 <__cvt>:
 80063c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	ec55 4b10 	vmov	r4, r5, d0
 80063c8:	2d00      	cmp	r5, #0
 80063ca:	460e      	mov	r6, r1
 80063cc:	4619      	mov	r1, r3
 80063ce:	462b      	mov	r3, r5
 80063d0:	bfbb      	ittet	lt
 80063d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063d6:	461d      	movlt	r5, r3
 80063d8:	2300      	movge	r3, #0
 80063da:	232d      	movlt	r3, #45	; 0x2d
 80063dc:	700b      	strb	r3, [r1, #0]
 80063de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063e4:	4691      	mov	r9, r2
 80063e6:	f023 0820 	bic.w	r8, r3, #32
 80063ea:	bfbc      	itt	lt
 80063ec:	4622      	movlt	r2, r4
 80063ee:	4614      	movlt	r4, r2
 80063f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063f4:	d005      	beq.n	8006402 <__cvt+0x42>
 80063f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063fa:	d100      	bne.n	80063fe <__cvt+0x3e>
 80063fc:	3601      	adds	r6, #1
 80063fe:	2102      	movs	r1, #2
 8006400:	e000      	b.n	8006404 <__cvt+0x44>
 8006402:	2103      	movs	r1, #3
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	ab02      	add	r3, sp, #8
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	ec45 4b10 	vmov	d0, r4, r5
 8006410:	4653      	mov	r3, sl
 8006412:	4632      	mov	r2, r6
 8006414:	f000 fe18 	bl	8007048 <_dtoa_r>
 8006418:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800641c:	4607      	mov	r7, r0
 800641e:	d102      	bne.n	8006426 <__cvt+0x66>
 8006420:	f019 0f01 	tst.w	r9, #1
 8006424:	d022      	beq.n	800646c <__cvt+0xac>
 8006426:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800642a:	eb07 0906 	add.w	r9, r7, r6
 800642e:	d110      	bne.n	8006452 <__cvt+0x92>
 8006430:	783b      	ldrb	r3, [r7, #0]
 8006432:	2b30      	cmp	r3, #48	; 0x30
 8006434:	d10a      	bne.n	800644c <__cvt+0x8c>
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	4620      	mov	r0, r4
 800643c:	4629      	mov	r1, r5
 800643e:	f7fa fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006442:	b918      	cbnz	r0, 800644c <__cvt+0x8c>
 8006444:	f1c6 0601 	rsb	r6, r6, #1
 8006448:	f8ca 6000 	str.w	r6, [sl]
 800644c:	f8da 3000 	ldr.w	r3, [sl]
 8006450:	4499      	add	r9, r3
 8006452:	2200      	movs	r2, #0
 8006454:	2300      	movs	r3, #0
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7fa fb35 	bl	8000ac8 <__aeabi_dcmpeq>
 800645e:	b108      	cbz	r0, 8006464 <__cvt+0xa4>
 8006460:	f8cd 900c 	str.w	r9, [sp, #12]
 8006464:	2230      	movs	r2, #48	; 0x30
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	454b      	cmp	r3, r9
 800646a:	d307      	bcc.n	800647c <__cvt+0xbc>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006470:	1bdb      	subs	r3, r3, r7
 8006472:	4638      	mov	r0, r7
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	b004      	add	sp, #16
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	1c59      	adds	r1, r3, #1
 800647e:	9103      	str	r1, [sp, #12]
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e7f0      	b.n	8006466 <__cvt+0xa6>

08006484 <__exponent>:
 8006484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006486:	4603      	mov	r3, r0
 8006488:	2900      	cmp	r1, #0
 800648a:	bfb8      	it	lt
 800648c:	4249      	neglt	r1, r1
 800648e:	f803 2b02 	strb.w	r2, [r3], #2
 8006492:	bfb4      	ite	lt
 8006494:	222d      	movlt	r2, #45	; 0x2d
 8006496:	222b      	movge	r2, #43	; 0x2b
 8006498:	2909      	cmp	r1, #9
 800649a:	7042      	strb	r2, [r0, #1]
 800649c:	dd2a      	ble.n	80064f4 <__exponent+0x70>
 800649e:	f10d 0407 	add.w	r4, sp, #7
 80064a2:	46a4      	mov	ip, r4
 80064a4:	270a      	movs	r7, #10
 80064a6:	46a6      	mov	lr, r4
 80064a8:	460a      	mov	r2, r1
 80064aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80064ae:	fb07 1516 	mls	r5, r7, r6, r1
 80064b2:	3530      	adds	r5, #48	; 0x30
 80064b4:	2a63      	cmp	r2, #99	; 0x63
 80064b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80064ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064be:	4631      	mov	r1, r6
 80064c0:	dcf1      	bgt.n	80064a6 <__exponent+0x22>
 80064c2:	3130      	adds	r1, #48	; 0x30
 80064c4:	f1ae 0502 	sub.w	r5, lr, #2
 80064c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064cc:	1c44      	adds	r4, r0, #1
 80064ce:	4629      	mov	r1, r5
 80064d0:	4561      	cmp	r1, ip
 80064d2:	d30a      	bcc.n	80064ea <__exponent+0x66>
 80064d4:	f10d 0209 	add.w	r2, sp, #9
 80064d8:	eba2 020e 	sub.w	r2, r2, lr
 80064dc:	4565      	cmp	r5, ip
 80064de:	bf88      	it	hi
 80064e0:	2200      	movhi	r2, #0
 80064e2:	4413      	add	r3, r2
 80064e4:	1a18      	subs	r0, r3, r0
 80064e6:	b003      	add	sp, #12
 80064e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064f2:	e7ed      	b.n	80064d0 <__exponent+0x4c>
 80064f4:	2330      	movs	r3, #48	; 0x30
 80064f6:	3130      	adds	r1, #48	; 0x30
 80064f8:	7083      	strb	r3, [r0, #2]
 80064fa:	70c1      	strb	r1, [r0, #3]
 80064fc:	1d03      	adds	r3, r0, #4
 80064fe:	e7f1      	b.n	80064e4 <__exponent+0x60>

08006500 <_printf_float>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	ed2d 8b02 	vpush	{d8}
 8006508:	b08d      	sub	sp, #52	; 0x34
 800650a:	460c      	mov	r4, r1
 800650c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006510:	4616      	mov	r6, r2
 8006512:	461f      	mov	r7, r3
 8006514:	4605      	mov	r5, r0
 8006516:	f001 fd3d 	bl	8007f94 <_localeconv_r>
 800651a:	f8d0 a000 	ldr.w	sl, [r0]
 800651e:	4650      	mov	r0, sl
 8006520:	f7f9 fe56 	bl	80001d0 <strlen>
 8006524:	2300      	movs	r3, #0
 8006526:	930a      	str	r3, [sp, #40]	; 0x28
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	9305      	str	r3, [sp, #20]
 800652c:	f8d8 3000 	ldr.w	r3, [r8]
 8006530:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006534:	3307      	adds	r3, #7
 8006536:	f023 0307 	bic.w	r3, r3, #7
 800653a:	f103 0208 	add.w	r2, r3, #8
 800653e:	f8c8 2000 	str.w	r2, [r8]
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800654a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800654e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006552:	9307      	str	r3, [sp, #28]
 8006554:	f8cd 8018 	str.w	r8, [sp, #24]
 8006558:	ee08 0a10 	vmov	s16, r0
 800655c:	4b9f      	ldr	r3, [pc, #636]	; (80067dc <_printf_float+0x2dc>)
 800655e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	f7fa fae1 	bl	8000b2c <__aeabi_dcmpun>
 800656a:	bb88      	cbnz	r0, 80065d0 <_printf_float+0xd0>
 800656c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006570:	4b9a      	ldr	r3, [pc, #616]	; (80067dc <_printf_float+0x2dc>)
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	f7fa fabb 	bl	8000af0 <__aeabi_dcmple>
 800657a:	bb48      	cbnz	r0, 80065d0 <_printf_float+0xd0>
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fa faaa 	bl	8000adc <__aeabi_dcmplt>
 8006588:	b110      	cbz	r0, 8006590 <_printf_float+0x90>
 800658a:	232d      	movs	r3, #45	; 0x2d
 800658c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006590:	4b93      	ldr	r3, [pc, #588]	; (80067e0 <_printf_float+0x2e0>)
 8006592:	4894      	ldr	r0, [pc, #592]	; (80067e4 <_printf_float+0x2e4>)
 8006594:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006598:	bf94      	ite	ls
 800659a:	4698      	movls	r8, r3
 800659c:	4680      	movhi	r8, r0
 800659e:	2303      	movs	r3, #3
 80065a0:	6123      	str	r3, [r4, #16]
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	f023 0204 	bic.w	r2, r3, #4
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	9700      	str	r7, [sp, #0]
 80065b0:	4633      	mov	r3, r6
 80065b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80065b4:	4621      	mov	r1, r4
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 f9d8 	bl	800696c <_printf_common>
 80065bc:	3001      	adds	r0, #1
 80065be:	f040 8090 	bne.w	80066e2 <_printf_float+0x1e2>
 80065c2:	f04f 30ff 	mov.w	r0, #4294967295
 80065c6:	b00d      	add	sp, #52	; 0x34
 80065c8:	ecbd 8b02 	vpop	{d8}
 80065cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa faa8 	bl	8000b2c <__aeabi_dcmpun>
 80065dc:	b140      	cbz	r0, 80065f0 <_printf_float+0xf0>
 80065de:	464b      	mov	r3, r9
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfbc      	itt	lt
 80065e4:	232d      	movlt	r3, #45	; 0x2d
 80065e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065ea:	487f      	ldr	r0, [pc, #508]	; (80067e8 <_printf_float+0x2e8>)
 80065ec:	4b7f      	ldr	r3, [pc, #508]	; (80067ec <_printf_float+0x2ec>)
 80065ee:	e7d1      	b.n	8006594 <_printf_float+0x94>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	d13f      	bne.n	800667c <_printf_float+0x17c>
 80065fc:	2306      	movs	r3, #6
 80065fe:	6063      	str	r3, [r4, #4]
 8006600:	9b05      	ldr	r3, [sp, #20]
 8006602:	6861      	ldr	r1, [r4, #4]
 8006604:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006608:	2300      	movs	r3, #0
 800660a:	9303      	str	r3, [sp, #12]
 800660c:	ab0a      	add	r3, sp, #40	; 0x28
 800660e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006612:	ab09      	add	r3, sp, #36	; 0x24
 8006614:	ec49 8b10 	vmov	d0, r8, r9
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006620:	4628      	mov	r0, r5
 8006622:	f7ff fecd 	bl	80063c0 <__cvt>
 8006626:	9b06      	ldr	r3, [sp, #24]
 8006628:	9909      	ldr	r1, [sp, #36]	; 0x24
 800662a:	2b47      	cmp	r3, #71	; 0x47
 800662c:	4680      	mov	r8, r0
 800662e:	d108      	bne.n	8006642 <_printf_float+0x142>
 8006630:	1cc8      	adds	r0, r1, #3
 8006632:	db02      	blt.n	800663a <_printf_float+0x13a>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	4299      	cmp	r1, r3
 8006638:	dd41      	ble.n	80066be <_printf_float+0x1be>
 800663a:	f1ab 0b02 	sub.w	fp, fp, #2
 800663e:	fa5f fb8b 	uxtb.w	fp, fp
 8006642:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006646:	d820      	bhi.n	800668a <_printf_float+0x18a>
 8006648:	3901      	subs	r1, #1
 800664a:	465a      	mov	r2, fp
 800664c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006650:	9109      	str	r1, [sp, #36]	; 0x24
 8006652:	f7ff ff17 	bl	8006484 <__exponent>
 8006656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006658:	1813      	adds	r3, r2, r0
 800665a:	2a01      	cmp	r2, #1
 800665c:	4681      	mov	r9, r0
 800665e:	6123      	str	r3, [r4, #16]
 8006660:	dc02      	bgt.n	8006668 <_printf_float+0x168>
 8006662:	6822      	ldr	r2, [r4, #0]
 8006664:	07d2      	lsls	r2, r2, #31
 8006666:	d501      	bpl.n	800666c <_printf_float+0x16c>
 8006668:	3301      	adds	r3, #1
 800666a:	6123      	str	r3, [r4, #16]
 800666c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006670:	2b00      	cmp	r3, #0
 8006672:	d09c      	beq.n	80065ae <_printf_float+0xae>
 8006674:	232d      	movs	r3, #45	; 0x2d
 8006676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667a:	e798      	b.n	80065ae <_printf_float+0xae>
 800667c:	9a06      	ldr	r2, [sp, #24]
 800667e:	2a47      	cmp	r2, #71	; 0x47
 8006680:	d1be      	bne.n	8006600 <_printf_float+0x100>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1bc      	bne.n	8006600 <_printf_float+0x100>
 8006686:	2301      	movs	r3, #1
 8006688:	e7b9      	b.n	80065fe <_printf_float+0xfe>
 800668a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800668e:	d118      	bne.n	80066c2 <_printf_float+0x1c2>
 8006690:	2900      	cmp	r1, #0
 8006692:	6863      	ldr	r3, [r4, #4]
 8006694:	dd0b      	ble.n	80066ae <_printf_float+0x1ae>
 8006696:	6121      	str	r1, [r4, #16]
 8006698:	b913      	cbnz	r3, 80066a0 <_printf_float+0x1a0>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	07d0      	lsls	r0, r2, #31
 800669e:	d502      	bpl.n	80066a6 <_printf_float+0x1a6>
 80066a0:	3301      	adds	r3, #1
 80066a2:	440b      	add	r3, r1
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80066a8:	f04f 0900 	mov.w	r9, #0
 80066ac:	e7de      	b.n	800666c <_printf_float+0x16c>
 80066ae:	b913      	cbnz	r3, 80066b6 <_printf_float+0x1b6>
 80066b0:	6822      	ldr	r2, [r4, #0]
 80066b2:	07d2      	lsls	r2, r2, #31
 80066b4:	d501      	bpl.n	80066ba <_printf_float+0x1ba>
 80066b6:	3302      	adds	r3, #2
 80066b8:	e7f4      	b.n	80066a4 <_printf_float+0x1a4>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e7f2      	b.n	80066a4 <_printf_float+0x1a4>
 80066be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c4:	4299      	cmp	r1, r3
 80066c6:	db05      	blt.n	80066d4 <_printf_float+0x1d4>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	6121      	str	r1, [r4, #16]
 80066cc:	07d8      	lsls	r0, r3, #31
 80066ce:	d5ea      	bpl.n	80066a6 <_printf_float+0x1a6>
 80066d0:	1c4b      	adds	r3, r1, #1
 80066d2:	e7e7      	b.n	80066a4 <_printf_float+0x1a4>
 80066d4:	2900      	cmp	r1, #0
 80066d6:	bfd4      	ite	le
 80066d8:	f1c1 0202 	rsble	r2, r1, #2
 80066dc:	2201      	movgt	r2, #1
 80066de:	4413      	add	r3, r2
 80066e0:	e7e0      	b.n	80066a4 <_printf_float+0x1a4>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	055a      	lsls	r2, r3, #21
 80066e6:	d407      	bmi.n	80066f8 <_printf_float+0x1f8>
 80066e8:	6923      	ldr	r3, [r4, #16]
 80066ea:	4642      	mov	r2, r8
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	d12c      	bne.n	8006750 <_printf_float+0x250>
 80066f6:	e764      	b.n	80065c2 <_printf_float+0xc2>
 80066f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066fc:	f240 80e0 	bls.w	80068c0 <_printf_float+0x3c0>
 8006700:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	f7fa f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800670c:	2800      	cmp	r0, #0
 800670e:	d034      	beq.n	800677a <_printf_float+0x27a>
 8006710:	4a37      	ldr	r2, [pc, #220]	; (80067f0 <_printf_float+0x2f0>)
 8006712:	2301      	movs	r3, #1
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	f43f af51 	beq.w	80065c2 <_printf_float+0xc2>
 8006720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006724:	429a      	cmp	r2, r3
 8006726:	db02      	blt.n	800672e <_printf_float+0x22e>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	07d8      	lsls	r0, r3, #31
 800672c:	d510      	bpl.n	8006750 <_printf_float+0x250>
 800672e:	ee18 3a10 	vmov	r3, s16
 8006732:	4652      	mov	r2, sl
 8006734:	4631      	mov	r1, r6
 8006736:	4628      	mov	r0, r5
 8006738:	47b8      	blx	r7
 800673a:	3001      	adds	r0, #1
 800673c:	f43f af41 	beq.w	80065c2 <_printf_float+0xc2>
 8006740:	f04f 0800 	mov.w	r8, #0
 8006744:	f104 091a 	add.w	r9, r4, #26
 8006748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674a:	3b01      	subs	r3, #1
 800674c:	4543      	cmp	r3, r8
 800674e:	dc09      	bgt.n	8006764 <_printf_float+0x264>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	079b      	lsls	r3, r3, #30
 8006754:	f100 8105 	bmi.w	8006962 <_printf_float+0x462>
 8006758:	68e0      	ldr	r0, [r4, #12]
 800675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675c:	4298      	cmp	r0, r3
 800675e:	bfb8      	it	lt
 8006760:	4618      	movlt	r0, r3
 8006762:	e730      	b.n	80065c6 <_printf_float+0xc6>
 8006764:	2301      	movs	r3, #1
 8006766:	464a      	mov	r2, r9
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af27 	beq.w	80065c2 <_printf_float+0xc2>
 8006774:	f108 0801 	add.w	r8, r8, #1
 8006778:	e7e6      	b.n	8006748 <_printf_float+0x248>
 800677a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	dc39      	bgt.n	80067f4 <_printf_float+0x2f4>
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <_printf_float+0x2f0>)
 8006782:	2301      	movs	r3, #1
 8006784:	4631      	mov	r1, r6
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	f43f af19 	beq.w	80065c2 <_printf_float+0xc2>
 8006790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006794:	4313      	orrs	r3, r2
 8006796:	d102      	bne.n	800679e <_printf_float+0x29e>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	07d9      	lsls	r1, r3, #31
 800679c:	d5d8      	bpl.n	8006750 <_printf_float+0x250>
 800679e:	ee18 3a10 	vmov	r3, s16
 80067a2:	4652      	mov	r2, sl
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	f43f af09 	beq.w	80065c2 <_printf_float+0xc2>
 80067b0:	f04f 0900 	mov.w	r9, #0
 80067b4:	f104 0a1a 	add.w	sl, r4, #26
 80067b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ba:	425b      	negs	r3, r3
 80067bc:	454b      	cmp	r3, r9
 80067be:	dc01      	bgt.n	80067c4 <_printf_float+0x2c4>
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	e792      	b.n	80066ea <_printf_float+0x1ea>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4652      	mov	r2, sl
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f aef7 	beq.w	80065c2 <_printf_float+0xc2>
 80067d4:	f109 0901 	add.w	r9, r9, #1
 80067d8:	e7ee      	b.n	80067b8 <_printf_float+0x2b8>
 80067da:	bf00      	nop
 80067dc:	7fefffff 	.word	0x7fefffff
 80067e0:	08009050 	.word	0x08009050
 80067e4:	08009054 	.word	0x08009054
 80067e8:	0800905c 	.word	0x0800905c
 80067ec:	08009058 	.word	0x08009058
 80067f0:	08009060 	.word	0x08009060
 80067f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067f8:	429a      	cmp	r2, r3
 80067fa:	bfa8      	it	ge
 80067fc:	461a      	movge	r2, r3
 80067fe:	2a00      	cmp	r2, #0
 8006800:	4691      	mov	r9, r2
 8006802:	dc37      	bgt.n	8006874 <_printf_float+0x374>
 8006804:	f04f 0b00 	mov.w	fp, #0
 8006808:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800680c:	f104 021a 	add.w	r2, r4, #26
 8006810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006812:	9305      	str	r3, [sp, #20]
 8006814:	eba3 0309 	sub.w	r3, r3, r9
 8006818:	455b      	cmp	r3, fp
 800681a:	dc33      	bgt.n	8006884 <_printf_float+0x384>
 800681c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006820:	429a      	cmp	r2, r3
 8006822:	db3b      	blt.n	800689c <_printf_float+0x39c>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07da      	lsls	r2, r3, #31
 8006828:	d438      	bmi.n	800689c <_printf_float+0x39c>
 800682a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800682c:	9a05      	ldr	r2, [sp, #20]
 800682e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006830:	1a9a      	subs	r2, r3, r2
 8006832:	eba3 0901 	sub.w	r9, r3, r1
 8006836:	4591      	cmp	r9, r2
 8006838:	bfa8      	it	ge
 800683a:	4691      	movge	r9, r2
 800683c:	f1b9 0f00 	cmp.w	r9, #0
 8006840:	dc35      	bgt.n	80068ae <_printf_float+0x3ae>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800684a:	f104 0a1a 	add.w	sl, r4, #26
 800684e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006852:	1a9b      	subs	r3, r3, r2
 8006854:	eba3 0309 	sub.w	r3, r3, r9
 8006858:	4543      	cmp	r3, r8
 800685a:	f77f af79 	ble.w	8006750 <_printf_float+0x250>
 800685e:	2301      	movs	r3, #1
 8006860:	4652      	mov	r2, sl
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f aeaa 	beq.w	80065c2 <_printf_float+0xc2>
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	e7ec      	b.n	800684e <_printf_float+0x34e>
 8006874:	4613      	mov	r3, r2
 8006876:	4631      	mov	r1, r6
 8006878:	4642      	mov	r2, r8
 800687a:	4628      	mov	r0, r5
 800687c:	47b8      	blx	r7
 800687e:	3001      	adds	r0, #1
 8006880:	d1c0      	bne.n	8006804 <_printf_float+0x304>
 8006882:	e69e      	b.n	80065c2 <_printf_float+0xc2>
 8006884:	2301      	movs	r3, #1
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	9205      	str	r2, [sp, #20]
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f ae97 	beq.w	80065c2 <_printf_float+0xc2>
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	f10b 0b01 	add.w	fp, fp, #1
 800689a:	e7b9      	b.n	8006810 <_printf_float+0x310>
 800689c:	ee18 3a10 	vmov	r3, s16
 80068a0:	4652      	mov	r2, sl
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	d1be      	bne.n	800682a <_printf_float+0x32a>
 80068ac:	e689      	b.n	80065c2 <_printf_float+0xc2>
 80068ae:	9a05      	ldr	r2, [sp, #20]
 80068b0:	464b      	mov	r3, r9
 80068b2:	4442      	add	r2, r8
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	d1c1      	bne.n	8006842 <_printf_float+0x342>
 80068be:	e680      	b.n	80065c2 <_printf_float+0xc2>
 80068c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068c2:	2a01      	cmp	r2, #1
 80068c4:	dc01      	bgt.n	80068ca <_printf_float+0x3ca>
 80068c6:	07db      	lsls	r3, r3, #31
 80068c8:	d538      	bpl.n	800693c <_printf_float+0x43c>
 80068ca:	2301      	movs	r3, #1
 80068cc:	4642      	mov	r2, r8
 80068ce:	4631      	mov	r1, r6
 80068d0:	4628      	mov	r0, r5
 80068d2:	47b8      	blx	r7
 80068d4:	3001      	adds	r0, #1
 80068d6:	f43f ae74 	beq.w	80065c2 <_printf_float+0xc2>
 80068da:	ee18 3a10 	vmov	r3, s16
 80068de:	4652      	mov	r2, sl
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b8      	blx	r7
 80068e6:	3001      	adds	r0, #1
 80068e8:	f43f ae6b 	beq.w	80065c2 <_printf_float+0xc2>
 80068ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068f0:	2200      	movs	r2, #0
 80068f2:	2300      	movs	r3, #0
 80068f4:	f7fa f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80068f8:	b9d8      	cbnz	r0, 8006932 <_printf_float+0x432>
 80068fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068fc:	f108 0201 	add.w	r2, r8, #1
 8006900:	3b01      	subs	r3, #1
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	d10e      	bne.n	800692a <_printf_float+0x42a>
 800690c:	e659      	b.n	80065c2 <_printf_float+0xc2>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae52 	beq.w	80065c2 <_printf_float+0xc2>
 800691e:	f108 0801 	add.w	r8, r8, #1
 8006922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006924:	3b01      	subs	r3, #1
 8006926:	4543      	cmp	r3, r8
 8006928:	dcf1      	bgt.n	800690e <_printf_float+0x40e>
 800692a:	464b      	mov	r3, r9
 800692c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006930:	e6dc      	b.n	80066ec <_printf_float+0x1ec>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	f104 0a1a 	add.w	sl, r4, #26
 800693a:	e7f2      	b.n	8006922 <_printf_float+0x422>
 800693c:	2301      	movs	r3, #1
 800693e:	4642      	mov	r2, r8
 8006940:	e7df      	b.n	8006902 <_printf_float+0x402>
 8006942:	2301      	movs	r3, #1
 8006944:	464a      	mov	r2, r9
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f ae38 	beq.w	80065c2 <_printf_float+0xc2>
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800695a:	1a5b      	subs	r3, r3, r1
 800695c:	4543      	cmp	r3, r8
 800695e:	dcf0      	bgt.n	8006942 <_printf_float+0x442>
 8006960:	e6fa      	b.n	8006758 <_printf_float+0x258>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	f104 0919 	add.w	r9, r4, #25
 800696a:	e7f4      	b.n	8006956 <_printf_float+0x456>

0800696c <_printf_common>:
 800696c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006970:	4616      	mov	r6, r2
 8006972:	4699      	mov	r9, r3
 8006974:	688a      	ldr	r2, [r1, #8]
 8006976:	690b      	ldr	r3, [r1, #16]
 8006978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800697c:	4293      	cmp	r3, r2
 800697e:	bfb8      	it	lt
 8006980:	4613      	movlt	r3, r2
 8006982:	6033      	str	r3, [r6, #0]
 8006984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006988:	4607      	mov	r7, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b10a      	cbz	r2, 8006992 <_printf_common+0x26>
 800698e:	3301      	adds	r3, #1
 8006990:	6033      	str	r3, [r6, #0]
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	0699      	lsls	r1, r3, #26
 8006996:	bf42      	ittt	mi
 8006998:	6833      	ldrmi	r3, [r6, #0]
 800699a:	3302      	addmi	r3, #2
 800699c:	6033      	strmi	r3, [r6, #0]
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	f015 0506 	ands.w	r5, r5, #6
 80069a4:	d106      	bne.n	80069b4 <_printf_common+0x48>
 80069a6:	f104 0a19 	add.w	sl, r4, #25
 80069aa:	68e3      	ldr	r3, [r4, #12]
 80069ac:	6832      	ldr	r2, [r6, #0]
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	dc26      	bgt.n	8006a02 <_printf_common+0x96>
 80069b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069b8:	1e13      	subs	r3, r2, #0
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	bf18      	it	ne
 80069be:	2301      	movne	r3, #1
 80069c0:	0692      	lsls	r2, r2, #26
 80069c2:	d42b      	bmi.n	8006a1c <_printf_common+0xb0>
 80069c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069c8:	4649      	mov	r1, r9
 80069ca:	4638      	mov	r0, r7
 80069cc:	47c0      	blx	r8
 80069ce:	3001      	adds	r0, #1
 80069d0:	d01e      	beq.n	8006a10 <_printf_common+0xa4>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	68e5      	ldr	r5, [r4, #12]
 80069d6:	6832      	ldr	r2, [r6, #0]
 80069d8:	f003 0306 	and.w	r3, r3, #6
 80069dc:	2b04      	cmp	r3, #4
 80069de:	bf08      	it	eq
 80069e0:	1aad      	subeq	r5, r5, r2
 80069e2:	68a3      	ldr	r3, [r4, #8]
 80069e4:	6922      	ldr	r2, [r4, #16]
 80069e6:	bf0c      	ite	eq
 80069e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ec:	2500      	movne	r5, #0
 80069ee:	4293      	cmp	r3, r2
 80069f0:	bfc4      	itt	gt
 80069f2:	1a9b      	subgt	r3, r3, r2
 80069f4:	18ed      	addgt	r5, r5, r3
 80069f6:	2600      	movs	r6, #0
 80069f8:	341a      	adds	r4, #26
 80069fa:	42b5      	cmp	r5, r6
 80069fc:	d11a      	bne.n	8006a34 <_printf_common+0xc8>
 80069fe:	2000      	movs	r0, #0
 8006a00:	e008      	b.n	8006a14 <_printf_common+0xa8>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4652      	mov	r2, sl
 8006a06:	4649      	mov	r1, r9
 8006a08:	4638      	mov	r0, r7
 8006a0a:	47c0      	blx	r8
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d103      	bne.n	8006a18 <_printf_common+0xac>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a18:	3501      	adds	r5, #1
 8006a1a:	e7c6      	b.n	80069aa <_printf_common+0x3e>
 8006a1c:	18e1      	adds	r1, r4, r3
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	2030      	movs	r0, #48	; 0x30
 8006a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a26:	4422      	add	r2, r4
 8006a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a30:	3302      	adds	r3, #2
 8006a32:	e7c7      	b.n	80069c4 <_printf_common+0x58>
 8006a34:	2301      	movs	r3, #1
 8006a36:	4622      	mov	r2, r4
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	47c0      	blx	r8
 8006a3e:	3001      	adds	r0, #1
 8006a40:	d0e6      	beq.n	8006a10 <_printf_common+0xa4>
 8006a42:	3601      	adds	r6, #1
 8006a44:	e7d9      	b.n	80069fa <_printf_common+0x8e>
	...

08006a48 <_printf_i>:
 8006a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a4c:	7e0f      	ldrb	r7, [r1, #24]
 8006a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a50:	2f78      	cmp	r7, #120	; 0x78
 8006a52:	4691      	mov	r9, r2
 8006a54:	4680      	mov	r8, r0
 8006a56:	460c      	mov	r4, r1
 8006a58:	469a      	mov	sl, r3
 8006a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a5e:	d807      	bhi.n	8006a70 <_printf_i+0x28>
 8006a60:	2f62      	cmp	r7, #98	; 0x62
 8006a62:	d80a      	bhi.n	8006a7a <_printf_i+0x32>
 8006a64:	2f00      	cmp	r7, #0
 8006a66:	f000 80d8 	beq.w	8006c1a <_printf_i+0x1d2>
 8006a6a:	2f58      	cmp	r7, #88	; 0x58
 8006a6c:	f000 80a3 	beq.w	8006bb6 <_printf_i+0x16e>
 8006a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a78:	e03a      	b.n	8006af0 <_printf_i+0xa8>
 8006a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a7e:	2b15      	cmp	r3, #21
 8006a80:	d8f6      	bhi.n	8006a70 <_printf_i+0x28>
 8006a82:	a101      	add	r1, pc, #4	; (adr r1, 8006a88 <_printf_i+0x40>)
 8006a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a88:	08006ae1 	.word	0x08006ae1
 8006a8c:	08006af5 	.word	0x08006af5
 8006a90:	08006a71 	.word	0x08006a71
 8006a94:	08006a71 	.word	0x08006a71
 8006a98:	08006a71 	.word	0x08006a71
 8006a9c:	08006a71 	.word	0x08006a71
 8006aa0:	08006af5 	.word	0x08006af5
 8006aa4:	08006a71 	.word	0x08006a71
 8006aa8:	08006a71 	.word	0x08006a71
 8006aac:	08006a71 	.word	0x08006a71
 8006ab0:	08006a71 	.word	0x08006a71
 8006ab4:	08006c01 	.word	0x08006c01
 8006ab8:	08006b25 	.word	0x08006b25
 8006abc:	08006be3 	.word	0x08006be3
 8006ac0:	08006a71 	.word	0x08006a71
 8006ac4:	08006a71 	.word	0x08006a71
 8006ac8:	08006c23 	.word	0x08006c23
 8006acc:	08006a71 	.word	0x08006a71
 8006ad0:	08006b25 	.word	0x08006b25
 8006ad4:	08006a71 	.word	0x08006a71
 8006ad8:	08006a71 	.word	0x08006a71
 8006adc:	08006beb 	.word	0x08006beb
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	1d1a      	adds	r2, r3, #4
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	602a      	str	r2, [r5, #0]
 8006ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0a3      	b.n	8006c3c <_printf_i+0x1f4>
 8006af4:	6820      	ldr	r0, [r4, #0]
 8006af6:	6829      	ldr	r1, [r5, #0]
 8006af8:	0606      	lsls	r6, r0, #24
 8006afa:	f101 0304 	add.w	r3, r1, #4
 8006afe:	d50a      	bpl.n	8006b16 <_printf_i+0xce>
 8006b00:	680e      	ldr	r6, [r1, #0]
 8006b02:	602b      	str	r3, [r5, #0]
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	da03      	bge.n	8006b10 <_printf_i+0xc8>
 8006b08:	232d      	movs	r3, #45	; 0x2d
 8006b0a:	4276      	negs	r6, r6
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b10:	485e      	ldr	r0, [pc, #376]	; (8006c8c <_printf_i+0x244>)
 8006b12:	230a      	movs	r3, #10
 8006b14:	e019      	b.n	8006b4a <_printf_i+0x102>
 8006b16:	680e      	ldr	r6, [r1, #0]
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b1e:	bf18      	it	ne
 8006b20:	b236      	sxthne	r6, r6
 8006b22:	e7ef      	b.n	8006b04 <_printf_i+0xbc>
 8006b24:	682b      	ldr	r3, [r5, #0]
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	1d19      	adds	r1, r3, #4
 8006b2a:	6029      	str	r1, [r5, #0]
 8006b2c:	0601      	lsls	r1, r0, #24
 8006b2e:	d501      	bpl.n	8006b34 <_printf_i+0xec>
 8006b30:	681e      	ldr	r6, [r3, #0]
 8006b32:	e002      	b.n	8006b3a <_printf_i+0xf2>
 8006b34:	0646      	lsls	r6, r0, #25
 8006b36:	d5fb      	bpl.n	8006b30 <_printf_i+0xe8>
 8006b38:	881e      	ldrh	r6, [r3, #0]
 8006b3a:	4854      	ldr	r0, [pc, #336]	; (8006c8c <_printf_i+0x244>)
 8006b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b3e:	bf0c      	ite	eq
 8006b40:	2308      	moveq	r3, #8
 8006b42:	230a      	movne	r3, #10
 8006b44:	2100      	movs	r1, #0
 8006b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b4a:	6865      	ldr	r5, [r4, #4]
 8006b4c:	60a5      	str	r5, [r4, #8]
 8006b4e:	2d00      	cmp	r5, #0
 8006b50:	bfa2      	ittt	ge
 8006b52:	6821      	ldrge	r1, [r4, #0]
 8006b54:	f021 0104 	bicge.w	r1, r1, #4
 8006b58:	6021      	strge	r1, [r4, #0]
 8006b5a:	b90e      	cbnz	r6, 8006b60 <_printf_i+0x118>
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	d04d      	beq.n	8006bfc <_printf_i+0x1b4>
 8006b60:	4615      	mov	r5, r2
 8006b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b66:	fb03 6711 	mls	r7, r3, r1, r6
 8006b6a:	5dc7      	ldrb	r7, [r0, r7]
 8006b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b70:	4637      	mov	r7, r6
 8006b72:	42bb      	cmp	r3, r7
 8006b74:	460e      	mov	r6, r1
 8006b76:	d9f4      	bls.n	8006b62 <_printf_i+0x11a>
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d10b      	bne.n	8006b94 <_printf_i+0x14c>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	07de      	lsls	r6, r3, #31
 8006b80:	d508      	bpl.n	8006b94 <_printf_i+0x14c>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	6861      	ldr	r1, [r4, #4]
 8006b86:	4299      	cmp	r1, r3
 8006b88:	bfde      	ittt	le
 8006b8a:	2330      	movle	r3, #48	; 0x30
 8006b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b94:	1b52      	subs	r2, r2, r5
 8006b96:	6122      	str	r2, [r4, #16]
 8006b98:	f8cd a000 	str.w	sl, [sp]
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	aa03      	add	r2, sp, #12
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f7ff fee2 	bl	800696c <_printf_common>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d14c      	bne.n	8006c46 <_printf_i+0x1fe>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	b004      	add	sp, #16
 8006bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb6:	4835      	ldr	r0, [pc, #212]	; (8006c8c <_printf_i+0x244>)
 8006bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bbc:	6829      	ldr	r1, [r5, #0]
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bc4:	6029      	str	r1, [r5, #0]
 8006bc6:	061d      	lsls	r5, r3, #24
 8006bc8:	d514      	bpl.n	8006bf4 <_printf_i+0x1ac>
 8006bca:	07df      	lsls	r7, r3, #31
 8006bcc:	bf44      	itt	mi
 8006bce:	f043 0320 	orrmi.w	r3, r3, #32
 8006bd2:	6023      	strmi	r3, [r4, #0]
 8006bd4:	b91e      	cbnz	r6, 8006bde <_printf_i+0x196>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f023 0320 	bic.w	r3, r3, #32
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	2310      	movs	r3, #16
 8006be0:	e7b0      	b.n	8006b44 <_printf_i+0xfc>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	f043 0320 	orr.w	r3, r3, #32
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	2378      	movs	r3, #120	; 0x78
 8006bec:	4828      	ldr	r0, [pc, #160]	; (8006c90 <_printf_i+0x248>)
 8006bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bf2:	e7e3      	b.n	8006bbc <_printf_i+0x174>
 8006bf4:	0659      	lsls	r1, r3, #25
 8006bf6:	bf48      	it	mi
 8006bf8:	b2b6      	uxthmi	r6, r6
 8006bfa:	e7e6      	b.n	8006bca <_printf_i+0x182>
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	e7bb      	b.n	8006b78 <_printf_i+0x130>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	6826      	ldr	r6, [r4, #0]
 8006c04:	6961      	ldr	r1, [r4, #20]
 8006c06:	1d18      	adds	r0, r3, #4
 8006c08:	6028      	str	r0, [r5, #0]
 8006c0a:	0635      	lsls	r5, r6, #24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	d501      	bpl.n	8006c14 <_printf_i+0x1cc>
 8006c10:	6019      	str	r1, [r3, #0]
 8006c12:	e002      	b.n	8006c1a <_printf_i+0x1d2>
 8006c14:	0670      	lsls	r0, r6, #25
 8006c16:	d5fb      	bpl.n	8006c10 <_printf_i+0x1c8>
 8006c18:	8019      	strh	r1, [r3, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	4615      	mov	r5, r2
 8006c20:	e7ba      	b.n	8006b98 <_printf_i+0x150>
 8006c22:	682b      	ldr	r3, [r5, #0]
 8006c24:	1d1a      	adds	r2, r3, #4
 8006c26:	602a      	str	r2, [r5, #0]
 8006c28:	681d      	ldr	r5, [r3, #0]
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f7f9 fad6 	bl	80001e0 <memchr>
 8006c34:	b108      	cbz	r0, 8006c3a <_printf_i+0x1f2>
 8006c36:	1b40      	subs	r0, r0, r5
 8006c38:	6060      	str	r0, [r4, #4]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c44:	e7a8      	b.n	8006b98 <_printf_i+0x150>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	47d0      	blx	sl
 8006c50:	3001      	adds	r0, #1
 8006c52:	d0ab      	beq.n	8006bac <_printf_i+0x164>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	079b      	lsls	r3, r3, #30
 8006c58:	d413      	bmi.n	8006c82 <_printf_i+0x23a>
 8006c5a:	68e0      	ldr	r0, [r4, #12]
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	4298      	cmp	r0, r3
 8006c60:	bfb8      	it	lt
 8006c62:	4618      	movlt	r0, r3
 8006c64:	e7a4      	b.n	8006bb0 <_printf_i+0x168>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	47d0      	blx	sl
 8006c70:	3001      	adds	r0, #1
 8006c72:	d09b      	beq.n	8006bac <_printf_i+0x164>
 8006c74:	3501      	adds	r5, #1
 8006c76:	68e3      	ldr	r3, [r4, #12]
 8006c78:	9903      	ldr	r1, [sp, #12]
 8006c7a:	1a5b      	subs	r3, r3, r1
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dcf2      	bgt.n	8006c66 <_printf_i+0x21e>
 8006c80:	e7eb      	b.n	8006c5a <_printf_i+0x212>
 8006c82:	2500      	movs	r5, #0
 8006c84:	f104 0619 	add.w	r6, r4, #25
 8006c88:	e7f5      	b.n	8006c76 <_printf_i+0x22e>
 8006c8a:	bf00      	nop
 8006c8c:	08009062 	.word	0x08009062
 8006c90:	08009073 	.word	0x08009073

08006c94 <iprintf>:
 8006c94:	b40f      	push	{r0, r1, r2, r3}
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <iprintf+0x2c>)
 8006c98:	b513      	push	{r0, r1, r4, lr}
 8006c9a:	681c      	ldr	r4, [r3, #0]
 8006c9c:	b124      	cbz	r4, 8006ca8 <iprintf+0x14>
 8006c9e:	69a3      	ldr	r3, [r4, #24]
 8006ca0:	b913      	cbnz	r3, 8006ca8 <iprintf+0x14>
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f001 f8d8 	bl	8007e58 <__sinit>
 8006ca8:	ab05      	add	r3, sp, #20
 8006caa:	9a04      	ldr	r2, [sp, #16]
 8006cac:	68a1      	ldr	r1, [r4, #8]
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f001 fe95 	bl	80089e0 <_vfiprintf_r>
 8006cb6:	b002      	add	sp, #8
 8006cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cbc:	b004      	add	sp, #16
 8006cbe:	4770      	bx	lr
 8006cc0:	20000040 	.word	0x20000040

08006cc4 <_puts_r>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	460e      	mov	r6, r1
 8006cc8:	4605      	mov	r5, r0
 8006cca:	b118      	cbz	r0, 8006cd4 <_puts_r+0x10>
 8006ccc:	6983      	ldr	r3, [r0, #24]
 8006cce:	b90b      	cbnz	r3, 8006cd4 <_puts_r+0x10>
 8006cd0:	f001 f8c2 	bl	8007e58 <__sinit>
 8006cd4:	69ab      	ldr	r3, [r5, #24]
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_puts_r+0x1c>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f001 f8bc 	bl	8007e58 <__sinit>
 8006ce0:	4b2c      	ldr	r3, [pc, #176]	; (8006d94 <_puts_r+0xd0>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d120      	bne.n	8006d28 <_puts_r+0x64>
 8006ce6:	686c      	ldr	r4, [r5, #4]
 8006ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cea:	07db      	lsls	r3, r3, #31
 8006cec:	d405      	bmi.n	8006cfa <_puts_r+0x36>
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	0598      	lsls	r0, r3, #22
 8006cf2:	d402      	bmi.n	8006cfa <_puts_r+0x36>
 8006cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cf6:	f001 f952 	bl	8007f9e <__retarget_lock_acquire_recursive>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	0719      	lsls	r1, r3, #28
 8006cfe:	d51d      	bpl.n	8006d3c <_puts_r+0x78>
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	b1db      	cbz	r3, 8006d3c <_puts_r+0x78>
 8006d04:	3e01      	subs	r6, #1
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	60a3      	str	r3, [r4, #8]
 8006d10:	bb39      	cbnz	r1, 8006d62 <_puts_r+0x9e>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da38      	bge.n	8006d88 <_puts_r+0xc4>
 8006d16:	4622      	mov	r2, r4
 8006d18:	210a      	movs	r1, #10
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 f848 	bl	8006db0 <__swbuf_r>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d011      	beq.n	8006d48 <_puts_r+0x84>
 8006d24:	250a      	movs	r5, #10
 8006d26:	e011      	b.n	8006d4c <_puts_r+0x88>
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <_puts_r+0xd4>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	d101      	bne.n	8006d32 <_puts_r+0x6e>
 8006d2e:	68ac      	ldr	r4, [r5, #8]
 8006d30:	e7da      	b.n	8006ce8 <_puts_r+0x24>
 8006d32:	4b1a      	ldr	r3, [pc, #104]	; (8006d9c <_puts_r+0xd8>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	bf08      	it	eq
 8006d38:	68ec      	ldreq	r4, [r5, #12]
 8006d3a:	e7d5      	b.n	8006ce8 <_puts_r+0x24>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f000 f888 	bl	8006e54 <__swsetup_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d0dd      	beq.n	8006d04 <_puts_r+0x40>
 8006d48:	f04f 35ff 	mov.w	r5, #4294967295
 8006d4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d405      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d52:	89a3      	ldrh	r3, [r4, #12]
 8006d54:	059b      	lsls	r3, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_puts_r+0x9a>
 8006d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d5a:	f001 f921 	bl	8007fa0 <__retarget_lock_release_recursive>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	da04      	bge.n	8006d70 <_puts_r+0xac>
 8006d66:	69a2      	ldr	r2, [r4, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	dc06      	bgt.n	8006d7a <_puts_r+0xb6>
 8006d6c:	290a      	cmp	r1, #10
 8006d6e:	d004      	beq.n	8006d7a <_puts_r+0xb6>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	6022      	str	r2, [r4, #0]
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	e7c5      	b.n	8006d06 <_puts_r+0x42>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	f000 f817 	bl	8006db0 <__swbuf_r>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d1bf      	bne.n	8006d06 <_puts_r+0x42>
 8006d86:	e7df      	b.n	8006d48 <_puts_r+0x84>
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	250a      	movs	r5, #10
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	701d      	strb	r5, [r3, #0]
 8006d92:	e7db      	b.n	8006d4c <_puts_r+0x88>
 8006d94:	08009134 	.word	0x08009134
 8006d98:	08009154 	.word	0x08009154
 8006d9c:	08009114 	.word	0x08009114

08006da0 <puts>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <puts+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f7ff bf8d 	b.w	8006cc4 <_puts_r>
 8006daa:	bf00      	nop
 8006dac:	20000040 	.word	0x20000040

08006db0 <__swbuf_r>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	460e      	mov	r6, r1
 8006db4:	4614      	mov	r4, r2
 8006db6:	4605      	mov	r5, r0
 8006db8:	b118      	cbz	r0, 8006dc2 <__swbuf_r+0x12>
 8006dba:	6983      	ldr	r3, [r0, #24]
 8006dbc:	b90b      	cbnz	r3, 8006dc2 <__swbuf_r+0x12>
 8006dbe:	f001 f84b 	bl	8007e58 <__sinit>
 8006dc2:	4b21      	ldr	r3, [pc, #132]	; (8006e48 <__swbuf_r+0x98>)
 8006dc4:	429c      	cmp	r4, r3
 8006dc6:	d12b      	bne.n	8006e20 <__swbuf_r+0x70>
 8006dc8:	686c      	ldr	r4, [r5, #4]
 8006dca:	69a3      	ldr	r3, [r4, #24]
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	071a      	lsls	r2, r3, #28
 8006dd2:	d52f      	bpl.n	8006e34 <__swbuf_r+0x84>
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	b36b      	cbz	r3, 8006e34 <__swbuf_r+0x84>
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	6820      	ldr	r0, [r4, #0]
 8006ddc:	1ac0      	subs	r0, r0, r3
 8006dde:	6963      	ldr	r3, [r4, #20]
 8006de0:	b2f6      	uxtb	r6, r6
 8006de2:	4283      	cmp	r3, r0
 8006de4:	4637      	mov	r7, r6
 8006de6:	dc04      	bgt.n	8006df2 <__swbuf_r+0x42>
 8006de8:	4621      	mov	r1, r4
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 ffa0 	bl	8007d30 <_fflush_r>
 8006df0:	bb30      	cbnz	r0, 8006e40 <__swbuf_r+0x90>
 8006df2:	68a3      	ldr	r3, [r4, #8]
 8006df4:	3b01      	subs	r3, #1
 8006df6:	60a3      	str	r3, [r4, #8]
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	6022      	str	r2, [r4, #0]
 8006dfe:	701e      	strb	r6, [r3, #0]
 8006e00:	6963      	ldr	r3, [r4, #20]
 8006e02:	3001      	adds	r0, #1
 8006e04:	4283      	cmp	r3, r0
 8006e06:	d004      	beq.n	8006e12 <__swbuf_r+0x62>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	07db      	lsls	r3, r3, #31
 8006e0c:	d506      	bpl.n	8006e1c <__swbuf_r+0x6c>
 8006e0e:	2e0a      	cmp	r6, #10
 8006e10:	d104      	bne.n	8006e1c <__swbuf_r+0x6c>
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 ff8b 	bl	8007d30 <_fflush_r>
 8006e1a:	b988      	cbnz	r0, 8006e40 <__swbuf_r+0x90>
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <__swbuf_r+0x9c>)
 8006e22:	429c      	cmp	r4, r3
 8006e24:	d101      	bne.n	8006e2a <__swbuf_r+0x7a>
 8006e26:	68ac      	ldr	r4, [r5, #8]
 8006e28:	e7cf      	b.n	8006dca <__swbuf_r+0x1a>
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <__swbuf_r+0xa0>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	bf08      	it	eq
 8006e30:	68ec      	ldreq	r4, [r5, #12]
 8006e32:	e7ca      	b.n	8006dca <__swbuf_r+0x1a>
 8006e34:	4621      	mov	r1, r4
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 f80c 	bl	8006e54 <__swsetup_r>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d0cb      	beq.n	8006dd8 <__swbuf_r+0x28>
 8006e40:	f04f 37ff 	mov.w	r7, #4294967295
 8006e44:	e7ea      	b.n	8006e1c <__swbuf_r+0x6c>
 8006e46:	bf00      	nop
 8006e48:	08009134 	.word	0x08009134
 8006e4c:	08009154 	.word	0x08009154
 8006e50:	08009114 	.word	0x08009114

08006e54 <__swsetup_r>:
 8006e54:	4b32      	ldr	r3, [pc, #200]	; (8006f20 <__swsetup_r+0xcc>)
 8006e56:	b570      	push	{r4, r5, r6, lr}
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	b125      	cbz	r5, 8006e6a <__swsetup_r+0x16>
 8006e60:	69ab      	ldr	r3, [r5, #24]
 8006e62:	b913      	cbnz	r3, 8006e6a <__swsetup_r+0x16>
 8006e64:	4628      	mov	r0, r5
 8006e66:	f000 fff7 	bl	8007e58 <__sinit>
 8006e6a:	4b2e      	ldr	r3, [pc, #184]	; (8006f24 <__swsetup_r+0xd0>)
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d10f      	bne.n	8006e90 <__swsetup_r+0x3c>
 8006e70:	686c      	ldr	r4, [r5, #4]
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e78:	0719      	lsls	r1, r3, #28
 8006e7a:	d42c      	bmi.n	8006ed6 <__swsetup_r+0x82>
 8006e7c:	06dd      	lsls	r5, r3, #27
 8006e7e:	d411      	bmi.n	8006ea4 <__swsetup_r+0x50>
 8006e80:	2309      	movs	r3, #9
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	e03e      	b.n	8006f0e <__swsetup_r+0xba>
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <__swsetup_r+0xd4>)
 8006e92:	429c      	cmp	r4, r3
 8006e94:	d101      	bne.n	8006e9a <__swsetup_r+0x46>
 8006e96:	68ac      	ldr	r4, [r5, #8]
 8006e98:	e7eb      	b.n	8006e72 <__swsetup_r+0x1e>
 8006e9a:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <__swsetup_r+0xd8>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	bf08      	it	eq
 8006ea0:	68ec      	ldreq	r4, [r5, #12]
 8006ea2:	e7e6      	b.n	8006e72 <__swsetup_r+0x1e>
 8006ea4:	0758      	lsls	r0, r3, #29
 8006ea6:	d512      	bpl.n	8006ece <__swsetup_r+0x7a>
 8006ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eaa:	b141      	cbz	r1, 8006ebe <__swsetup_r+0x6a>
 8006eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eb0:	4299      	cmp	r1, r3
 8006eb2:	d002      	beq.n	8006eba <__swsetup_r+0x66>
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f001 fc89 	bl	80087cc <_free_r>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6063      	str	r3, [r4, #4]
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f043 0308 	orr.w	r3, r3, #8
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	b94b      	cbnz	r3, 8006eee <__swsetup_r+0x9a>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee4:	d003      	beq.n	8006eee <__swsetup_r+0x9a>
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f001 f87f 	bl	8007fec <__smakebuf_r>
 8006eee:	89a0      	ldrh	r0, [r4, #12]
 8006ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef4:	f010 0301 	ands.w	r3, r0, #1
 8006ef8:	d00a      	beq.n	8006f10 <__swsetup_r+0xbc>
 8006efa:	2300      	movs	r3, #0
 8006efc:	60a3      	str	r3, [r4, #8]
 8006efe:	6963      	ldr	r3, [r4, #20]
 8006f00:	425b      	negs	r3, r3
 8006f02:	61a3      	str	r3, [r4, #24]
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	b943      	cbnz	r3, 8006f1a <__swsetup_r+0xc6>
 8006f08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f0c:	d1ba      	bne.n	8006e84 <__swsetup_r+0x30>
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	0781      	lsls	r1, r0, #30
 8006f12:	bf58      	it	pl
 8006f14:	6963      	ldrpl	r3, [r4, #20]
 8006f16:	60a3      	str	r3, [r4, #8]
 8006f18:	e7f4      	b.n	8006f04 <__swsetup_r+0xb0>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e7f7      	b.n	8006f0e <__swsetup_r+0xba>
 8006f1e:	bf00      	nop
 8006f20:	20000040 	.word	0x20000040
 8006f24:	08009134 	.word	0x08009134
 8006f28:	08009154 	.word	0x08009154
 8006f2c:	08009114 	.word	0x08009114

08006f30 <quorem>:
 8006f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	6903      	ldr	r3, [r0, #16]
 8006f36:	690c      	ldr	r4, [r1, #16]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	f2c0 8081 	blt.w	8007042 <quorem+0x112>
 8006f40:	3c01      	subs	r4, #1
 8006f42:	f101 0814 	add.w	r8, r1, #20
 8006f46:	f100 0514 	add.w	r5, r0, #20
 8006f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f68:	d331      	bcc.n	8006fce <quorem+0x9e>
 8006f6a:	f04f 0e00 	mov.w	lr, #0
 8006f6e:	4640      	mov	r0, r8
 8006f70:	46ac      	mov	ip, r5
 8006f72:	46f2      	mov	sl, lr
 8006f74:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f78:	b293      	uxth	r3, r2
 8006f7a:	fb06 e303 	mla	r3, r6, r3, lr
 8006f7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	ebaa 0303 	sub.w	r3, sl, r3
 8006f88:	f8dc a000 	ldr.w	sl, [ip]
 8006f8c:	0c12      	lsrs	r2, r2, #16
 8006f8e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f92:	fb06 e202 	mla	r2, r6, r2, lr
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	9b00      	ldr	r3, [sp, #0]
 8006f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006fac:	4581      	cmp	r9, r0
 8006fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb2:	f84c 3b04 	str.w	r3, [ip], #4
 8006fb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006fba:	d2db      	bcs.n	8006f74 <quorem+0x44>
 8006fbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006fc0:	b92b      	cbnz	r3, 8006fce <quorem+0x9e>
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	d32e      	bcc.n	800702a <quorem+0xfa>
 8006fcc:	613c      	str	r4, [r7, #16]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f001 fae4 	bl	800859c <__mcmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	db24      	blt.n	8007022 <quorem+0xf2>
 8006fd8:	3601      	adds	r6, #1
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f04f 0c00 	mov.w	ip, #0
 8006fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fe4:	f8d0 e000 	ldr.w	lr, [r0]
 8006fe8:	b293      	uxth	r3, r2
 8006fea:	ebac 0303 	sub.w	r3, ip, r3
 8006fee:	0c12      	lsrs	r2, r2, #16
 8006ff0:	fa13 f38e 	uxtah	r3, r3, lr
 8006ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007002:	45c1      	cmp	r9, r8
 8007004:	f840 3b04 	str.w	r3, [r0], #4
 8007008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800700c:	d2e8      	bcs.n	8006fe0 <quorem+0xb0>
 800700e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007016:	b922      	cbnz	r2, 8007022 <quorem+0xf2>
 8007018:	3b04      	subs	r3, #4
 800701a:	429d      	cmp	r5, r3
 800701c:	461a      	mov	r2, r3
 800701e:	d30a      	bcc.n	8007036 <quorem+0x106>
 8007020:	613c      	str	r4, [r7, #16]
 8007022:	4630      	mov	r0, r6
 8007024:	b003      	add	sp, #12
 8007026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	3b04      	subs	r3, #4
 800702e:	2a00      	cmp	r2, #0
 8007030:	d1cc      	bne.n	8006fcc <quorem+0x9c>
 8007032:	3c01      	subs	r4, #1
 8007034:	e7c7      	b.n	8006fc6 <quorem+0x96>
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	3b04      	subs	r3, #4
 800703a:	2a00      	cmp	r2, #0
 800703c:	d1f0      	bne.n	8007020 <quorem+0xf0>
 800703e:	3c01      	subs	r4, #1
 8007040:	e7eb      	b.n	800701a <quorem+0xea>
 8007042:	2000      	movs	r0, #0
 8007044:	e7ee      	b.n	8007024 <quorem+0xf4>
	...

08007048 <_dtoa_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	ed2d 8b04 	vpush	{d8-d9}
 8007050:	ec57 6b10 	vmov	r6, r7, d0
 8007054:	b093      	sub	sp, #76	; 0x4c
 8007056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800705c:	9106      	str	r1, [sp, #24]
 800705e:	ee10 aa10 	vmov	sl, s0
 8007062:	4604      	mov	r4, r0
 8007064:	9209      	str	r2, [sp, #36]	; 0x24
 8007066:	930c      	str	r3, [sp, #48]	; 0x30
 8007068:	46bb      	mov	fp, r7
 800706a:	b975      	cbnz	r5, 800708a <_dtoa_r+0x42>
 800706c:	2010      	movs	r0, #16
 800706e:	f000 fffd 	bl	800806c <malloc>
 8007072:	4602      	mov	r2, r0
 8007074:	6260      	str	r0, [r4, #36]	; 0x24
 8007076:	b920      	cbnz	r0, 8007082 <_dtoa_r+0x3a>
 8007078:	4ba7      	ldr	r3, [pc, #668]	; (8007318 <_dtoa_r+0x2d0>)
 800707a:	21ea      	movs	r1, #234	; 0xea
 800707c:	48a7      	ldr	r0, [pc, #668]	; (800731c <_dtoa_r+0x2d4>)
 800707e:	f001 fe45 	bl	8008d0c <__assert_func>
 8007082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007086:	6005      	str	r5, [r0, #0]
 8007088:	60c5      	str	r5, [r0, #12]
 800708a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800708c:	6819      	ldr	r1, [r3, #0]
 800708e:	b151      	cbz	r1, 80070a6 <_dtoa_r+0x5e>
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	604a      	str	r2, [r1, #4]
 8007094:	2301      	movs	r3, #1
 8007096:	4093      	lsls	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
 800709a:	4620      	mov	r0, r4
 800709c:	f001 f83c 	bl	8008118 <_Bfree>
 80070a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	1e3b      	subs	r3, r7, #0
 80070a8:	bfaa      	itet	ge
 80070aa:	2300      	movge	r3, #0
 80070ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80070b0:	f8c8 3000 	strge.w	r3, [r8]
 80070b4:	4b9a      	ldr	r3, [pc, #616]	; (8007320 <_dtoa_r+0x2d8>)
 80070b6:	bfbc      	itt	lt
 80070b8:	2201      	movlt	r2, #1
 80070ba:	f8c8 2000 	strlt.w	r2, [r8]
 80070be:	ea33 030b 	bics.w	r3, r3, fp
 80070c2:	d11b      	bne.n	80070fc <_dtoa_r+0xb4>
 80070c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070d0:	4333      	orrs	r3, r6
 80070d2:	f000 8592 	beq.w	8007bfa <_dtoa_r+0xbb2>
 80070d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d8:	b963      	cbnz	r3, 80070f4 <_dtoa_r+0xac>
 80070da:	4b92      	ldr	r3, [pc, #584]	; (8007324 <_dtoa_r+0x2dc>)
 80070dc:	e022      	b.n	8007124 <_dtoa_r+0xdc>
 80070de:	4b92      	ldr	r3, [pc, #584]	; (8007328 <_dtoa_r+0x2e0>)
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	3308      	adds	r3, #8
 80070e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	9801      	ldr	r0, [sp, #4]
 80070ea:	b013      	add	sp, #76	; 0x4c
 80070ec:	ecbd 8b04 	vpop	{d8-d9}
 80070f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4b8b      	ldr	r3, [pc, #556]	; (8007324 <_dtoa_r+0x2dc>)
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	3303      	adds	r3, #3
 80070fa:	e7f3      	b.n	80070e4 <_dtoa_r+0x9c>
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	4650      	mov	r0, sl
 8007102:	4659      	mov	r1, fp
 8007104:	f7f9 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007108:	ec4b ab19 	vmov	d9, sl, fp
 800710c:	4680      	mov	r8, r0
 800710e:	b158      	cbz	r0, 8007128 <_dtoa_r+0xe0>
 8007110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007112:	2301      	movs	r3, #1
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 856b 	beq.w	8007bf4 <_dtoa_r+0xbac>
 800711e:	4883      	ldr	r0, [pc, #524]	; (800732c <_dtoa_r+0x2e4>)
 8007120:	6018      	str	r0, [r3, #0]
 8007122:	1e43      	subs	r3, r0, #1
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	e7df      	b.n	80070e8 <_dtoa_r+0xa0>
 8007128:	ec4b ab10 	vmov	d0, sl, fp
 800712c:	aa10      	add	r2, sp, #64	; 0x40
 800712e:	a911      	add	r1, sp, #68	; 0x44
 8007130:	4620      	mov	r0, r4
 8007132:	f001 fad9 	bl	80086e8 <__d2b>
 8007136:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800713a:	ee08 0a10 	vmov	s16, r0
 800713e:	2d00      	cmp	r5, #0
 8007140:	f000 8084 	beq.w	800724c <_dtoa_r+0x204>
 8007144:	ee19 3a90 	vmov	r3, s19
 8007148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800714c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007150:	4656      	mov	r6, sl
 8007152:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800715a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800715e:	4b74      	ldr	r3, [pc, #464]	; (8007330 <_dtoa_r+0x2e8>)
 8007160:	2200      	movs	r2, #0
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 f88f 	bl	8000288 <__aeabi_dsub>
 800716a:	a365      	add	r3, pc, #404	; (adr r3, 8007300 <_dtoa_r+0x2b8>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	a364      	add	r3, pc, #400	; (adr r3, 8007308 <_dtoa_r+0x2c0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 f887 	bl	800028c <__adddf3>
 800717e:	4606      	mov	r6, r0
 8007180:	4628      	mov	r0, r5
 8007182:	460f      	mov	r7, r1
 8007184:	f7f9 f9ce 	bl	8000524 <__aeabi_i2d>
 8007188:	a361      	add	r3, pc, #388	; (adr r3, 8007310 <_dtoa_r+0x2c8>)
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	f7f9 f877 	bl	800028c <__adddf3>
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	f7f9 fcd9 	bl	8000b58 <__aeabi_d2iz>
 80071a6:	2200      	movs	r2, #0
 80071a8:	9000      	str	r0, [sp, #0]
 80071aa:	2300      	movs	r3, #0
 80071ac:	4630      	mov	r0, r6
 80071ae:	4639      	mov	r1, r7
 80071b0:	f7f9 fc94 	bl	8000adc <__aeabi_dcmplt>
 80071b4:	b150      	cbz	r0, 80071cc <_dtoa_r+0x184>
 80071b6:	9800      	ldr	r0, [sp, #0]
 80071b8:	f7f9 f9b4 	bl	8000524 <__aeabi_i2d>
 80071bc:	4632      	mov	r2, r6
 80071be:	463b      	mov	r3, r7
 80071c0:	f7f9 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c4:	b910      	cbnz	r0, 80071cc <_dtoa_r+0x184>
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	3b01      	subs	r3, #1
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	9b00      	ldr	r3, [sp, #0]
 80071ce:	2b16      	cmp	r3, #22
 80071d0:	d85a      	bhi.n	8007288 <_dtoa_r+0x240>
 80071d2:	9a00      	ldr	r2, [sp, #0]
 80071d4:	4b57      	ldr	r3, [pc, #348]	; (8007334 <_dtoa_r+0x2ec>)
 80071d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	ec51 0b19 	vmov	r0, r1, d9
 80071e2:	f7f9 fc7b 	bl	8000adc <__aeabi_dcmplt>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d050      	beq.n	800728c <_dtoa_r+0x244>
 80071ea:	9b00      	ldr	r3, [sp, #0]
 80071ec:	3b01      	subs	r3, #1
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	2300      	movs	r3, #0
 80071f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071f6:	1b5d      	subs	r5, r3, r5
 80071f8:	1e6b      	subs	r3, r5, #1
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	bf45      	ittet	mi
 80071fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8007202:	9304      	strmi	r3, [sp, #16]
 8007204:	2300      	movpl	r3, #0
 8007206:	2300      	movmi	r3, #0
 8007208:	bf4c      	ite	mi
 800720a:	9305      	strmi	r3, [sp, #20]
 800720c:	9304      	strpl	r3, [sp, #16]
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	db3d      	blt.n	8007290 <_dtoa_r+0x248>
 8007214:	9b05      	ldr	r3, [sp, #20]
 8007216:	9a00      	ldr	r2, [sp, #0]
 8007218:	920a      	str	r2, [sp, #40]	; 0x28
 800721a:	4413      	add	r3, r2
 800721c:	9305      	str	r3, [sp, #20]
 800721e:	2300      	movs	r3, #0
 8007220:	9307      	str	r3, [sp, #28]
 8007222:	9b06      	ldr	r3, [sp, #24]
 8007224:	2b09      	cmp	r3, #9
 8007226:	f200 8089 	bhi.w	800733c <_dtoa_r+0x2f4>
 800722a:	2b05      	cmp	r3, #5
 800722c:	bfc4      	itt	gt
 800722e:	3b04      	subgt	r3, #4
 8007230:	9306      	strgt	r3, [sp, #24]
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	f1a3 0302 	sub.w	r3, r3, #2
 8007238:	bfcc      	ite	gt
 800723a:	2500      	movgt	r5, #0
 800723c:	2501      	movle	r5, #1
 800723e:	2b03      	cmp	r3, #3
 8007240:	f200 8087 	bhi.w	8007352 <_dtoa_r+0x30a>
 8007244:	e8df f003 	tbb	[pc, r3]
 8007248:	59383a2d 	.word	0x59383a2d
 800724c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007250:	441d      	add	r5, r3
 8007252:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007256:	2b20      	cmp	r3, #32
 8007258:	bfc1      	itttt	gt
 800725a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800725e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007262:	fa0b f303 	lslgt.w	r3, fp, r3
 8007266:	fa26 f000 	lsrgt.w	r0, r6, r0
 800726a:	bfda      	itte	le
 800726c:	f1c3 0320 	rsble	r3, r3, #32
 8007270:	fa06 f003 	lslle.w	r0, r6, r3
 8007274:	4318      	orrgt	r0, r3
 8007276:	f7f9 f945 	bl	8000504 <__aeabi_ui2d>
 800727a:	2301      	movs	r3, #1
 800727c:	4606      	mov	r6, r0
 800727e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007282:	3d01      	subs	r5, #1
 8007284:	930e      	str	r3, [sp, #56]	; 0x38
 8007286:	e76a      	b.n	800715e <_dtoa_r+0x116>
 8007288:	2301      	movs	r3, #1
 800728a:	e7b2      	b.n	80071f2 <_dtoa_r+0x1aa>
 800728c:	900b      	str	r0, [sp, #44]	; 0x2c
 800728e:	e7b1      	b.n	80071f4 <_dtoa_r+0x1ac>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	9a00      	ldr	r2, [sp, #0]
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	9304      	str	r3, [sp, #16]
 8007298:	4253      	negs	r3, r2
 800729a:	9307      	str	r3, [sp, #28]
 800729c:	2300      	movs	r3, #0
 800729e:	930a      	str	r3, [sp, #40]	; 0x28
 80072a0:	e7bf      	b.n	8007222 <_dtoa_r+0x1da>
 80072a2:	2300      	movs	r3, #0
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	dc55      	bgt.n	8007358 <_dtoa_r+0x310>
 80072ac:	2301      	movs	r3, #1
 80072ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80072b2:	461a      	mov	r2, r3
 80072b4:	9209      	str	r2, [sp, #36]	; 0x24
 80072b6:	e00c      	b.n	80072d2 <_dtoa_r+0x28a>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e7f3      	b.n	80072a4 <_dtoa_r+0x25c>
 80072bc:	2300      	movs	r3, #0
 80072be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	9b00      	ldr	r3, [sp, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	9303      	str	r3, [sp, #12]
 80072ce:	bfb8      	it	lt
 80072d0:	2301      	movlt	r3, #1
 80072d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80072d4:	2200      	movs	r2, #0
 80072d6:	6042      	str	r2, [r0, #4]
 80072d8:	2204      	movs	r2, #4
 80072da:	f102 0614 	add.w	r6, r2, #20
 80072de:	429e      	cmp	r6, r3
 80072e0:	6841      	ldr	r1, [r0, #4]
 80072e2:	d93d      	bls.n	8007360 <_dtoa_r+0x318>
 80072e4:	4620      	mov	r0, r4
 80072e6:	f000 fed7 	bl	8008098 <_Balloc>
 80072ea:	9001      	str	r0, [sp, #4]
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d13b      	bne.n	8007368 <_dtoa_r+0x320>
 80072f0:	4b11      	ldr	r3, [pc, #68]	; (8007338 <_dtoa_r+0x2f0>)
 80072f2:	4602      	mov	r2, r0
 80072f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072f8:	e6c0      	b.n	800707c <_dtoa_r+0x34>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e7df      	b.n	80072be <_dtoa_r+0x276>
 80072fe:	bf00      	nop
 8007300:	636f4361 	.word	0x636f4361
 8007304:	3fd287a7 	.word	0x3fd287a7
 8007308:	8b60c8b3 	.word	0x8b60c8b3
 800730c:	3fc68a28 	.word	0x3fc68a28
 8007310:	509f79fb 	.word	0x509f79fb
 8007314:	3fd34413 	.word	0x3fd34413
 8007318:	08009091 	.word	0x08009091
 800731c:	080090a8 	.word	0x080090a8
 8007320:	7ff00000 	.word	0x7ff00000
 8007324:	0800908d 	.word	0x0800908d
 8007328:	08009084 	.word	0x08009084
 800732c:	08009061 	.word	0x08009061
 8007330:	3ff80000 	.word	0x3ff80000
 8007334:	080091f8 	.word	0x080091f8
 8007338:	08009103 	.word	0x08009103
 800733c:	2501      	movs	r5, #1
 800733e:	2300      	movs	r3, #0
 8007340:	9306      	str	r3, [sp, #24]
 8007342:	9508      	str	r5, [sp, #32]
 8007344:	f04f 33ff 	mov.w	r3, #4294967295
 8007348:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	2312      	movs	r3, #18
 8007350:	e7b0      	b.n	80072b4 <_dtoa_r+0x26c>
 8007352:	2301      	movs	r3, #1
 8007354:	9308      	str	r3, [sp, #32]
 8007356:	e7f5      	b.n	8007344 <_dtoa_r+0x2fc>
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800735e:	e7b8      	b.n	80072d2 <_dtoa_r+0x28a>
 8007360:	3101      	adds	r1, #1
 8007362:	6041      	str	r1, [r0, #4]
 8007364:	0052      	lsls	r2, r2, #1
 8007366:	e7b8      	b.n	80072da <_dtoa_r+0x292>
 8007368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800736a:	9a01      	ldr	r2, [sp, #4]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	2b0e      	cmp	r3, #14
 8007372:	f200 809d 	bhi.w	80074b0 <_dtoa_r+0x468>
 8007376:	2d00      	cmp	r5, #0
 8007378:	f000 809a 	beq.w	80074b0 <_dtoa_r+0x468>
 800737c:	9b00      	ldr	r3, [sp, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dd32      	ble.n	80073e8 <_dtoa_r+0x3a0>
 8007382:	4ab7      	ldr	r2, [pc, #732]	; (8007660 <_dtoa_r+0x618>)
 8007384:	f003 030f 	and.w	r3, r3, #15
 8007388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800738c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007390:	9b00      	ldr	r3, [sp, #0]
 8007392:	05d8      	lsls	r0, r3, #23
 8007394:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007398:	d516      	bpl.n	80073c8 <_dtoa_r+0x380>
 800739a:	4bb2      	ldr	r3, [pc, #712]	; (8007664 <_dtoa_r+0x61c>)
 800739c:	ec51 0b19 	vmov	r0, r1, d9
 80073a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a4:	f7f9 fa52 	bl	800084c <__aeabi_ddiv>
 80073a8:	f007 070f 	and.w	r7, r7, #15
 80073ac:	4682      	mov	sl, r0
 80073ae:	468b      	mov	fp, r1
 80073b0:	2503      	movs	r5, #3
 80073b2:	4eac      	ldr	r6, [pc, #688]	; (8007664 <_dtoa_r+0x61c>)
 80073b4:	b957      	cbnz	r7, 80073cc <_dtoa_r+0x384>
 80073b6:	4642      	mov	r2, r8
 80073b8:	464b      	mov	r3, r9
 80073ba:	4650      	mov	r0, sl
 80073bc:	4659      	mov	r1, fp
 80073be:	f7f9 fa45 	bl	800084c <__aeabi_ddiv>
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	e028      	b.n	800741a <_dtoa_r+0x3d2>
 80073c8:	2502      	movs	r5, #2
 80073ca:	e7f2      	b.n	80073b2 <_dtoa_r+0x36a>
 80073cc:	07f9      	lsls	r1, r7, #31
 80073ce:	d508      	bpl.n	80073e2 <_dtoa_r+0x39a>
 80073d0:	4640      	mov	r0, r8
 80073d2:	4649      	mov	r1, r9
 80073d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073d8:	f7f9 f90e 	bl	80005f8 <__aeabi_dmul>
 80073dc:	3501      	adds	r5, #1
 80073de:	4680      	mov	r8, r0
 80073e0:	4689      	mov	r9, r1
 80073e2:	107f      	asrs	r7, r7, #1
 80073e4:	3608      	adds	r6, #8
 80073e6:	e7e5      	b.n	80073b4 <_dtoa_r+0x36c>
 80073e8:	f000 809b 	beq.w	8007522 <_dtoa_r+0x4da>
 80073ec:	9b00      	ldr	r3, [sp, #0]
 80073ee:	4f9d      	ldr	r7, [pc, #628]	; (8007664 <_dtoa_r+0x61c>)
 80073f0:	425e      	negs	r6, r3
 80073f2:	4b9b      	ldr	r3, [pc, #620]	; (8007660 <_dtoa_r+0x618>)
 80073f4:	f006 020f 	and.w	r2, r6, #15
 80073f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	ec51 0b19 	vmov	r0, r1, d9
 8007404:	f7f9 f8f8 	bl	80005f8 <__aeabi_dmul>
 8007408:	1136      	asrs	r6, r6, #4
 800740a:	4682      	mov	sl, r0
 800740c:	468b      	mov	fp, r1
 800740e:	2300      	movs	r3, #0
 8007410:	2502      	movs	r5, #2
 8007412:	2e00      	cmp	r6, #0
 8007414:	d17a      	bne.n	800750c <_dtoa_r+0x4c4>
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1d3      	bne.n	80073c2 <_dtoa_r+0x37a>
 800741a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8082 	beq.w	8007526 <_dtoa_r+0x4de>
 8007422:	4b91      	ldr	r3, [pc, #580]	; (8007668 <_dtoa_r+0x620>)
 8007424:	2200      	movs	r2, #0
 8007426:	4650      	mov	r0, sl
 8007428:	4659      	mov	r1, fp
 800742a:	f7f9 fb57 	bl	8000adc <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	d079      	beq.n	8007526 <_dtoa_r+0x4de>
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d076      	beq.n	8007526 <_dtoa_r+0x4de>
 8007438:	9b02      	ldr	r3, [sp, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd36      	ble.n	80074ac <_dtoa_r+0x464>
 800743e:	9b00      	ldr	r3, [sp, #0]
 8007440:	4650      	mov	r0, sl
 8007442:	4659      	mov	r1, fp
 8007444:	1e5f      	subs	r7, r3, #1
 8007446:	2200      	movs	r2, #0
 8007448:	4b88      	ldr	r3, [pc, #544]	; (800766c <_dtoa_r+0x624>)
 800744a:	f7f9 f8d5 	bl	80005f8 <__aeabi_dmul>
 800744e:	9e02      	ldr	r6, [sp, #8]
 8007450:	4682      	mov	sl, r0
 8007452:	468b      	mov	fp, r1
 8007454:	3501      	adds	r5, #1
 8007456:	4628      	mov	r0, r5
 8007458:	f7f9 f864 	bl	8000524 <__aeabi_i2d>
 800745c:	4652      	mov	r2, sl
 800745e:	465b      	mov	r3, fp
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	4b82      	ldr	r3, [pc, #520]	; (8007670 <_dtoa_r+0x628>)
 8007466:	2200      	movs	r2, #0
 8007468:	f7f8 ff10 	bl	800028c <__adddf3>
 800746c:	46d0      	mov	r8, sl
 800746e:	46d9      	mov	r9, fp
 8007470:	4682      	mov	sl, r0
 8007472:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007476:	2e00      	cmp	r6, #0
 8007478:	d158      	bne.n	800752c <_dtoa_r+0x4e4>
 800747a:	4b7e      	ldr	r3, [pc, #504]	; (8007674 <_dtoa_r+0x62c>)
 800747c:	2200      	movs	r2, #0
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f8 ff01 	bl	8000288 <__aeabi_dsub>
 8007486:	4652      	mov	r2, sl
 8007488:	465b      	mov	r3, fp
 800748a:	4680      	mov	r8, r0
 800748c:	4689      	mov	r9, r1
 800748e:	f7f9 fb43 	bl	8000b18 <__aeabi_dcmpgt>
 8007492:	2800      	cmp	r0, #0
 8007494:	f040 8295 	bne.w	80079c2 <_dtoa_r+0x97a>
 8007498:	4652      	mov	r2, sl
 800749a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800749e:	4640      	mov	r0, r8
 80074a0:	4649      	mov	r1, r9
 80074a2:	f7f9 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f040 8289 	bne.w	80079be <_dtoa_r+0x976>
 80074ac:	ec5b ab19 	vmov	sl, fp, d9
 80074b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f2c0 8148 	blt.w	8007748 <_dtoa_r+0x700>
 80074b8:	9a00      	ldr	r2, [sp, #0]
 80074ba:	2a0e      	cmp	r2, #14
 80074bc:	f300 8144 	bgt.w	8007748 <_dtoa_r+0x700>
 80074c0:	4b67      	ldr	r3, [pc, #412]	; (8007660 <_dtoa_r+0x618>)
 80074c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f280 80d5 	bge.w	800767c <_dtoa_r+0x634>
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f300 80d1 	bgt.w	800767c <_dtoa_r+0x634>
 80074da:	f040 826f 	bne.w	80079bc <_dtoa_r+0x974>
 80074de:	4b65      	ldr	r3, [pc, #404]	; (8007674 <_dtoa_r+0x62c>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	4640      	mov	r0, r8
 80074e4:	4649      	mov	r1, r9
 80074e6:	f7f9 f887 	bl	80005f8 <__aeabi_dmul>
 80074ea:	4652      	mov	r2, sl
 80074ec:	465b      	mov	r3, fp
 80074ee:	f7f9 fb09 	bl	8000b04 <__aeabi_dcmpge>
 80074f2:	9e03      	ldr	r6, [sp, #12]
 80074f4:	4637      	mov	r7, r6
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f040 8245 	bne.w	8007986 <_dtoa_r+0x93e>
 80074fc:	9d01      	ldr	r5, [sp, #4]
 80074fe:	2331      	movs	r3, #49	; 0x31
 8007500:	f805 3b01 	strb.w	r3, [r5], #1
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	3301      	adds	r3, #1
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	e240      	b.n	800798e <_dtoa_r+0x946>
 800750c:	07f2      	lsls	r2, r6, #31
 800750e:	d505      	bpl.n	800751c <_dtoa_r+0x4d4>
 8007510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007514:	f7f9 f870 	bl	80005f8 <__aeabi_dmul>
 8007518:	3501      	adds	r5, #1
 800751a:	2301      	movs	r3, #1
 800751c:	1076      	asrs	r6, r6, #1
 800751e:	3708      	adds	r7, #8
 8007520:	e777      	b.n	8007412 <_dtoa_r+0x3ca>
 8007522:	2502      	movs	r5, #2
 8007524:	e779      	b.n	800741a <_dtoa_r+0x3d2>
 8007526:	9f00      	ldr	r7, [sp, #0]
 8007528:	9e03      	ldr	r6, [sp, #12]
 800752a:	e794      	b.n	8007456 <_dtoa_r+0x40e>
 800752c:	9901      	ldr	r1, [sp, #4]
 800752e:	4b4c      	ldr	r3, [pc, #304]	; (8007660 <_dtoa_r+0x618>)
 8007530:	4431      	add	r1, r6
 8007532:	910d      	str	r1, [sp, #52]	; 0x34
 8007534:	9908      	ldr	r1, [sp, #32]
 8007536:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800753a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800753e:	2900      	cmp	r1, #0
 8007540:	d043      	beq.n	80075ca <_dtoa_r+0x582>
 8007542:	494d      	ldr	r1, [pc, #308]	; (8007678 <_dtoa_r+0x630>)
 8007544:	2000      	movs	r0, #0
 8007546:	f7f9 f981 	bl	800084c <__aeabi_ddiv>
 800754a:	4652      	mov	r2, sl
 800754c:	465b      	mov	r3, fp
 800754e:	f7f8 fe9b 	bl	8000288 <__aeabi_dsub>
 8007552:	9d01      	ldr	r5, [sp, #4]
 8007554:	4682      	mov	sl, r0
 8007556:	468b      	mov	fp, r1
 8007558:	4649      	mov	r1, r9
 800755a:	4640      	mov	r0, r8
 800755c:	f7f9 fafc 	bl	8000b58 <__aeabi_d2iz>
 8007560:	4606      	mov	r6, r0
 8007562:	f7f8 ffdf 	bl	8000524 <__aeabi_i2d>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f8 fe8b 	bl	8000288 <__aeabi_dsub>
 8007572:	3630      	adds	r6, #48	; 0x30
 8007574:	f805 6b01 	strb.w	r6, [r5], #1
 8007578:	4652      	mov	r2, sl
 800757a:	465b      	mov	r3, fp
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	f7f9 faac 	bl	8000adc <__aeabi_dcmplt>
 8007584:	2800      	cmp	r0, #0
 8007586:	d163      	bne.n	8007650 <_dtoa_r+0x608>
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	4936      	ldr	r1, [pc, #216]	; (8007668 <_dtoa_r+0x620>)
 800758e:	2000      	movs	r0, #0
 8007590:	f7f8 fe7a 	bl	8000288 <__aeabi_dsub>
 8007594:	4652      	mov	r2, sl
 8007596:	465b      	mov	r3, fp
 8007598:	f7f9 faa0 	bl	8000adc <__aeabi_dcmplt>
 800759c:	2800      	cmp	r0, #0
 800759e:	f040 80b5 	bne.w	800770c <_dtoa_r+0x6c4>
 80075a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075a4:	429d      	cmp	r5, r3
 80075a6:	d081      	beq.n	80074ac <_dtoa_r+0x464>
 80075a8:	4b30      	ldr	r3, [pc, #192]	; (800766c <_dtoa_r+0x624>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	4650      	mov	r0, sl
 80075ae:	4659      	mov	r1, fp
 80075b0:	f7f9 f822 	bl	80005f8 <__aeabi_dmul>
 80075b4:	4b2d      	ldr	r3, [pc, #180]	; (800766c <_dtoa_r+0x624>)
 80075b6:	4682      	mov	sl, r0
 80075b8:	468b      	mov	fp, r1
 80075ba:	4640      	mov	r0, r8
 80075bc:	4649      	mov	r1, r9
 80075be:	2200      	movs	r2, #0
 80075c0:	f7f9 f81a 	bl	80005f8 <__aeabi_dmul>
 80075c4:	4680      	mov	r8, r0
 80075c6:	4689      	mov	r9, r1
 80075c8:	e7c6      	b.n	8007558 <_dtoa_r+0x510>
 80075ca:	4650      	mov	r0, sl
 80075cc:	4659      	mov	r1, fp
 80075ce:	f7f9 f813 	bl	80005f8 <__aeabi_dmul>
 80075d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d4:	9d01      	ldr	r5, [sp, #4]
 80075d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075d8:	4682      	mov	sl, r0
 80075da:	468b      	mov	fp, r1
 80075dc:	4649      	mov	r1, r9
 80075de:	4640      	mov	r0, r8
 80075e0:	f7f9 faba 	bl	8000b58 <__aeabi_d2iz>
 80075e4:	4606      	mov	r6, r0
 80075e6:	f7f8 ff9d 	bl	8000524 <__aeabi_i2d>
 80075ea:	3630      	adds	r6, #48	; 0x30
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f8 fe48 	bl	8000288 <__aeabi_dsub>
 80075f8:	f805 6b01 	strb.w	r6, [r5], #1
 80075fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075fe:	429d      	cmp	r5, r3
 8007600:	4680      	mov	r8, r0
 8007602:	4689      	mov	r9, r1
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	d124      	bne.n	8007654 <_dtoa_r+0x60c>
 800760a:	4b1b      	ldr	r3, [pc, #108]	; (8007678 <_dtoa_r+0x630>)
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f8 fe3c 	bl	800028c <__adddf3>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f9 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 8007620:	2800      	cmp	r0, #0
 8007622:	d173      	bne.n	800770c <_dtoa_r+0x6c4>
 8007624:	4652      	mov	r2, sl
 8007626:	465b      	mov	r3, fp
 8007628:	4913      	ldr	r1, [pc, #76]	; (8007678 <_dtoa_r+0x630>)
 800762a:	2000      	movs	r0, #0
 800762c:	f7f8 fe2c 	bl	8000288 <__aeabi_dsub>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4640      	mov	r0, r8
 8007636:	4649      	mov	r1, r9
 8007638:	f7f9 fa50 	bl	8000adc <__aeabi_dcmplt>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f af35 	beq.w	80074ac <_dtoa_r+0x464>
 8007642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007644:	1e6b      	subs	r3, r5, #1
 8007646:	930f      	str	r3, [sp, #60]	; 0x3c
 8007648:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800764c:	2b30      	cmp	r3, #48	; 0x30
 800764e:	d0f8      	beq.n	8007642 <_dtoa_r+0x5fa>
 8007650:	9700      	str	r7, [sp, #0]
 8007652:	e049      	b.n	80076e8 <_dtoa_r+0x6a0>
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <_dtoa_r+0x624>)
 8007656:	f7f8 ffcf 	bl	80005f8 <__aeabi_dmul>
 800765a:	4680      	mov	r8, r0
 800765c:	4689      	mov	r9, r1
 800765e:	e7bd      	b.n	80075dc <_dtoa_r+0x594>
 8007660:	080091f8 	.word	0x080091f8
 8007664:	080091d0 	.word	0x080091d0
 8007668:	3ff00000 	.word	0x3ff00000
 800766c:	40240000 	.word	0x40240000
 8007670:	401c0000 	.word	0x401c0000
 8007674:	40140000 	.word	0x40140000
 8007678:	3fe00000 	.word	0x3fe00000
 800767c:	9d01      	ldr	r5, [sp, #4]
 800767e:	4656      	mov	r6, sl
 8007680:	465f      	mov	r7, fp
 8007682:	4642      	mov	r2, r8
 8007684:	464b      	mov	r3, r9
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	f7f9 f8df 	bl	800084c <__aeabi_ddiv>
 800768e:	f7f9 fa63 	bl	8000b58 <__aeabi_d2iz>
 8007692:	4682      	mov	sl, r0
 8007694:	f7f8 ff46 	bl	8000524 <__aeabi_i2d>
 8007698:	4642      	mov	r2, r8
 800769a:	464b      	mov	r3, r9
 800769c:	f7f8 ffac 	bl	80005f8 <__aeabi_dmul>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4630      	mov	r0, r6
 80076a6:	4639      	mov	r1, r7
 80076a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80076ac:	f7f8 fdec 	bl	8000288 <__aeabi_dsub>
 80076b0:	f805 6b01 	strb.w	r6, [r5], #1
 80076b4:	9e01      	ldr	r6, [sp, #4]
 80076b6:	9f03      	ldr	r7, [sp, #12]
 80076b8:	1bae      	subs	r6, r5, r6
 80076ba:	42b7      	cmp	r7, r6
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	d135      	bne.n	800772e <_dtoa_r+0x6e6>
 80076c2:	f7f8 fde3 	bl	800028c <__adddf3>
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	4606      	mov	r6, r0
 80076cc:	460f      	mov	r7, r1
 80076ce:	f7f9 fa23 	bl	8000b18 <__aeabi_dcmpgt>
 80076d2:	b9d0      	cbnz	r0, 800770a <_dtoa_r+0x6c2>
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	f7f9 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 80076e0:	b110      	cbz	r0, 80076e8 <_dtoa_r+0x6a0>
 80076e2:	f01a 0f01 	tst.w	sl, #1
 80076e6:	d110      	bne.n	800770a <_dtoa_r+0x6c2>
 80076e8:	4620      	mov	r0, r4
 80076ea:	ee18 1a10 	vmov	r1, s16
 80076ee:	f000 fd13 	bl	8008118 <_Bfree>
 80076f2:	2300      	movs	r3, #0
 80076f4:	9800      	ldr	r0, [sp, #0]
 80076f6:	702b      	strb	r3, [r5, #0]
 80076f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076fa:	3001      	adds	r0, #1
 80076fc:	6018      	str	r0, [r3, #0]
 80076fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007700:	2b00      	cmp	r3, #0
 8007702:	f43f acf1 	beq.w	80070e8 <_dtoa_r+0xa0>
 8007706:	601d      	str	r5, [r3, #0]
 8007708:	e4ee      	b.n	80070e8 <_dtoa_r+0xa0>
 800770a:	9f00      	ldr	r7, [sp, #0]
 800770c:	462b      	mov	r3, r5
 800770e:	461d      	mov	r5, r3
 8007710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007714:	2a39      	cmp	r2, #57	; 0x39
 8007716:	d106      	bne.n	8007726 <_dtoa_r+0x6de>
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d1f7      	bne.n	800770e <_dtoa_r+0x6c6>
 800771e:	9901      	ldr	r1, [sp, #4]
 8007720:	2230      	movs	r2, #48	; 0x30
 8007722:	3701      	adds	r7, #1
 8007724:	700a      	strb	r2, [r1, #0]
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	3201      	adds	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e790      	b.n	8007650 <_dtoa_r+0x608>
 800772e:	4ba6      	ldr	r3, [pc, #664]	; (80079c8 <_dtoa_r+0x980>)
 8007730:	2200      	movs	r2, #0
 8007732:	f7f8 ff61 	bl	80005f8 <__aeabi_dmul>
 8007736:	2200      	movs	r2, #0
 8007738:	2300      	movs	r3, #0
 800773a:	4606      	mov	r6, r0
 800773c:	460f      	mov	r7, r1
 800773e:	f7f9 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007742:	2800      	cmp	r0, #0
 8007744:	d09d      	beq.n	8007682 <_dtoa_r+0x63a>
 8007746:	e7cf      	b.n	80076e8 <_dtoa_r+0x6a0>
 8007748:	9a08      	ldr	r2, [sp, #32]
 800774a:	2a00      	cmp	r2, #0
 800774c:	f000 80d7 	beq.w	80078fe <_dtoa_r+0x8b6>
 8007750:	9a06      	ldr	r2, [sp, #24]
 8007752:	2a01      	cmp	r2, #1
 8007754:	f300 80ba 	bgt.w	80078cc <_dtoa_r+0x884>
 8007758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800775a:	2a00      	cmp	r2, #0
 800775c:	f000 80b2 	beq.w	80078c4 <_dtoa_r+0x87c>
 8007760:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007764:	9e07      	ldr	r6, [sp, #28]
 8007766:	9d04      	ldr	r5, [sp, #16]
 8007768:	9a04      	ldr	r2, [sp, #16]
 800776a:	441a      	add	r2, r3
 800776c:	9204      	str	r2, [sp, #16]
 800776e:	9a05      	ldr	r2, [sp, #20]
 8007770:	2101      	movs	r1, #1
 8007772:	441a      	add	r2, r3
 8007774:	4620      	mov	r0, r4
 8007776:	9205      	str	r2, [sp, #20]
 8007778:	f000 fd86 	bl	8008288 <__i2b>
 800777c:	4607      	mov	r7, r0
 800777e:	2d00      	cmp	r5, #0
 8007780:	dd0c      	ble.n	800779c <_dtoa_r+0x754>
 8007782:	9b05      	ldr	r3, [sp, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd09      	ble.n	800779c <_dtoa_r+0x754>
 8007788:	42ab      	cmp	r3, r5
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	bfa8      	it	ge
 800778e:	462b      	movge	r3, r5
 8007790:	1ad2      	subs	r2, r2, r3
 8007792:	9204      	str	r2, [sp, #16]
 8007794:	9a05      	ldr	r2, [sp, #20]
 8007796:	1aed      	subs	r5, r5, r3
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	9305      	str	r3, [sp, #20]
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	b31b      	cbz	r3, 80077e8 <_dtoa_r+0x7a0>
 80077a0:	9b08      	ldr	r3, [sp, #32]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80af 	beq.w	8007906 <_dtoa_r+0x8be>
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	dd13      	ble.n	80077d4 <_dtoa_r+0x78c>
 80077ac:	4639      	mov	r1, r7
 80077ae:	4632      	mov	r2, r6
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fe29 	bl	8008408 <__pow5mult>
 80077b6:	ee18 2a10 	vmov	r2, s16
 80077ba:	4601      	mov	r1, r0
 80077bc:	4607      	mov	r7, r0
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fd78 	bl	80082b4 <__multiply>
 80077c4:	ee18 1a10 	vmov	r1, s16
 80077c8:	4680      	mov	r8, r0
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fca4 	bl	8008118 <_Bfree>
 80077d0:	ee08 8a10 	vmov	s16, r8
 80077d4:	9b07      	ldr	r3, [sp, #28]
 80077d6:	1b9a      	subs	r2, r3, r6
 80077d8:	d006      	beq.n	80077e8 <_dtoa_r+0x7a0>
 80077da:	ee18 1a10 	vmov	r1, s16
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fe12 	bl	8008408 <__pow5mult>
 80077e4:	ee08 0a10 	vmov	s16, r0
 80077e8:	2101      	movs	r1, #1
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fd4c 	bl	8008288 <__i2b>
 80077f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	4606      	mov	r6, r0
 80077f6:	f340 8088 	ble.w	800790a <_dtoa_r+0x8c2>
 80077fa:	461a      	mov	r2, r3
 80077fc:	4601      	mov	r1, r0
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fe02 	bl	8008408 <__pow5mult>
 8007804:	9b06      	ldr	r3, [sp, #24]
 8007806:	2b01      	cmp	r3, #1
 8007808:	4606      	mov	r6, r0
 800780a:	f340 8081 	ble.w	8007910 <_dtoa_r+0x8c8>
 800780e:	f04f 0800 	mov.w	r8, #0
 8007812:	6933      	ldr	r3, [r6, #16]
 8007814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007818:	6918      	ldr	r0, [r3, #16]
 800781a:	f000 fce5 	bl	80081e8 <__hi0bits>
 800781e:	f1c0 0020 	rsb	r0, r0, #32
 8007822:	9b05      	ldr	r3, [sp, #20]
 8007824:	4418      	add	r0, r3
 8007826:	f010 001f 	ands.w	r0, r0, #31
 800782a:	f000 8092 	beq.w	8007952 <_dtoa_r+0x90a>
 800782e:	f1c0 0320 	rsb	r3, r0, #32
 8007832:	2b04      	cmp	r3, #4
 8007834:	f340 808a 	ble.w	800794c <_dtoa_r+0x904>
 8007838:	f1c0 001c 	rsb	r0, r0, #28
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4403      	add	r3, r0
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	4403      	add	r3, r0
 8007846:	4405      	add	r5, r0
 8007848:	9305      	str	r3, [sp, #20]
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd07      	ble.n	8007860 <_dtoa_r+0x818>
 8007850:	ee18 1a10 	vmov	r1, s16
 8007854:	461a      	mov	r2, r3
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fe30 	bl	80084bc <__lshift>
 800785c:	ee08 0a10 	vmov	s16, r0
 8007860:	9b05      	ldr	r3, [sp, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	dd05      	ble.n	8007872 <_dtoa_r+0x82a>
 8007866:	4631      	mov	r1, r6
 8007868:	461a      	mov	r2, r3
 800786a:	4620      	mov	r0, r4
 800786c:	f000 fe26 	bl	80084bc <__lshift>
 8007870:	4606      	mov	r6, r0
 8007872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d06e      	beq.n	8007956 <_dtoa_r+0x90e>
 8007878:	ee18 0a10 	vmov	r0, s16
 800787c:	4631      	mov	r1, r6
 800787e:	f000 fe8d 	bl	800859c <__mcmp>
 8007882:	2800      	cmp	r0, #0
 8007884:	da67      	bge.n	8007956 <_dtoa_r+0x90e>
 8007886:	9b00      	ldr	r3, [sp, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	ee18 1a10 	vmov	r1, s16
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	220a      	movs	r2, #10
 8007892:	2300      	movs	r3, #0
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fc61 	bl	800815c <__multadd>
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	ee08 0a10 	vmov	s16, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 81b1 	beq.w	8007c08 <_dtoa_r+0xbc0>
 80078a6:	2300      	movs	r3, #0
 80078a8:	4639      	mov	r1, r7
 80078aa:	220a      	movs	r2, #10
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 fc55 	bl	800815c <__multadd>
 80078b2:	9b02      	ldr	r3, [sp, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	4607      	mov	r7, r0
 80078b8:	f300 808e 	bgt.w	80079d8 <_dtoa_r+0x990>
 80078bc:	9b06      	ldr	r3, [sp, #24]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	dc51      	bgt.n	8007966 <_dtoa_r+0x91e>
 80078c2:	e089      	b.n	80079d8 <_dtoa_r+0x990>
 80078c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80078ca:	e74b      	b.n	8007764 <_dtoa_r+0x71c>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	1e5e      	subs	r6, r3, #1
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	42b3      	cmp	r3, r6
 80078d4:	bfbf      	itttt	lt
 80078d6:	9b07      	ldrlt	r3, [sp, #28]
 80078d8:	9607      	strlt	r6, [sp, #28]
 80078da:	1af2      	sublt	r2, r6, r3
 80078dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80078de:	bfb6      	itet	lt
 80078e0:	189b      	addlt	r3, r3, r2
 80078e2:	1b9e      	subge	r6, r3, r6
 80078e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80078e6:	9b03      	ldr	r3, [sp, #12]
 80078e8:	bfb8      	it	lt
 80078ea:	2600      	movlt	r6, #0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfb7      	itett	lt
 80078f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078f8:	1a9d      	sublt	r5, r3, r2
 80078fa:	2300      	movlt	r3, #0
 80078fc:	e734      	b.n	8007768 <_dtoa_r+0x720>
 80078fe:	9e07      	ldr	r6, [sp, #28]
 8007900:	9d04      	ldr	r5, [sp, #16]
 8007902:	9f08      	ldr	r7, [sp, #32]
 8007904:	e73b      	b.n	800777e <_dtoa_r+0x736>
 8007906:	9a07      	ldr	r2, [sp, #28]
 8007908:	e767      	b.n	80077da <_dtoa_r+0x792>
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	2b01      	cmp	r3, #1
 800790e:	dc18      	bgt.n	8007942 <_dtoa_r+0x8fa>
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	d115      	bne.n	8007942 <_dtoa_r+0x8fa>
 8007916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800791a:	b993      	cbnz	r3, 8007942 <_dtoa_r+0x8fa>
 800791c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007920:	0d1b      	lsrs	r3, r3, #20
 8007922:	051b      	lsls	r3, r3, #20
 8007924:	b183      	cbz	r3, 8007948 <_dtoa_r+0x900>
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	9304      	str	r3, [sp, #16]
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	3301      	adds	r3, #1
 8007930:	9305      	str	r3, [sp, #20]
 8007932:	f04f 0801 	mov.w	r8, #1
 8007936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f af6a 	bne.w	8007812 <_dtoa_r+0x7ca>
 800793e:	2001      	movs	r0, #1
 8007940:	e76f      	b.n	8007822 <_dtoa_r+0x7da>
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	e7f6      	b.n	8007936 <_dtoa_r+0x8ee>
 8007948:	4698      	mov	r8, r3
 800794a:	e7f4      	b.n	8007936 <_dtoa_r+0x8ee>
 800794c:	f43f af7d 	beq.w	800784a <_dtoa_r+0x802>
 8007950:	4618      	mov	r0, r3
 8007952:	301c      	adds	r0, #28
 8007954:	e772      	b.n	800783c <_dtoa_r+0x7f4>
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc37      	bgt.n	80079cc <_dtoa_r+0x984>
 800795c:	9b06      	ldr	r3, [sp, #24]
 800795e:	2b02      	cmp	r3, #2
 8007960:	dd34      	ble.n	80079cc <_dtoa_r+0x984>
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	9302      	str	r3, [sp, #8]
 8007966:	9b02      	ldr	r3, [sp, #8]
 8007968:	b96b      	cbnz	r3, 8007986 <_dtoa_r+0x93e>
 800796a:	4631      	mov	r1, r6
 800796c:	2205      	movs	r2, #5
 800796e:	4620      	mov	r0, r4
 8007970:	f000 fbf4 	bl	800815c <__multadd>
 8007974:	4601      	mov	r1, r0
 8007976:	4606      	mov	r6, r0
 8007978:	ee18 0a10 	vmov	r0, s16
 800797c:	f000 fe0e 	bl	800859c <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	f73f adbb 	bgt.w	80074fc <_dtoa_r+0x4b4>
 8007986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007988:	9d01      	ldr	r5, [sp, #4]
 800798a:	43db      	mvns	r3, r3
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	4631      	mov	r1, r6
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fbbf 	bl	8008118 <_Bfree>
 800799a:	2f00      	cmp	r7, #0
 800799c:	f43f aea4 	beq.w	80076e8 <_dtoa_r+0x6a0>
 80079a0:	f1b8 0f00 	cmp.w	r8, #0
 80079a4:	d005      	beq.n	80079b2 <_dtoa_r+0x96a>
 80079a6:	45b8      	cmp	r8, r7
 80079a8:	d003      	beq.n	80079b2 <_dtoa_r+0x96a>
 80079aa:	4641      	mov	r1, r8
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 fbb3 	bl	8008118 <_Bfree>
 80079b2:	4639      	mov	r1, r7
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fbaf 	bl	8008118 <_Bfree>
 80079ba:	e695      	b.n	80076e8 <_dtoa_r+0x6a0>
 80079bc:	2600      	movs	r6, #0
 80079be:	4637      	mov	r7, r6
 80079c0:	e7e1      	b.n	8007986 <_dtoa_r+0x93e>
 80079c2:	9700      	str	r7, [sp, #0]
 80079c4:	4637      	mov	r7, r6
 80079c6:	e599      	b.n	80074fc <_dtoa_r+0x4b4>
 80079c8:	40240000 	.word	0x40240000
 80079cc:	9b08      	ldr	r3, [sp, #32]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 80ca 	beq.w	8007b68 <_dtoa_r+0xb20>
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	2d00      	cmp	r5, #0
 80079da:	dd05      	ble.n	80079e8 <_dtoa_r+0x9a0>
 80079dc:	4639      	mov	r1, r7
 80079de:	462a      	mov	r2, r5
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fd6b 	bl	80084bc <__lshift>
 80079e6:	4607      	mov	r7, r0
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	d05b      	beq.n	8007aa6 <_dtoa_r+0xa5e>
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fb51 	bl	8008098 <_Balloc>
 80079f6:	4605      	mov	r5, r0
 80079f8:	b928      	cbnz	r0, 8007a06 <_dtoa_r+0x9be>
 80079fa:	4b87      	ldr	r3, [pc, #540]	; (8007c18 <_dtoa_r+0xbd0>)
 80079fc:	4602      	mov	r2, r0
 80079fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a02:	f7ff bb3b 	b.w	800707c <_dtoa_r+0x34>
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	3202      	adds	r2, #2
 8007a0a:	0092      	lsls	r2, r2, #2
 8007a0c:	f107 010c 	add.w	r1, r7, #12
 8007a10:	300c      	adds	r0, #12
 8007a12:	f000 fb33 	bl	800807c <memcpy>
 8007a16:	2201      	movs	r2, #1
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fd4e 	bl	80084bc <__lshift>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	f103 0901 	add.w	r9, r3, #1
 8007a26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	9305      	str	r3, [sp, #20]
 8007a2e:	f00a 0301 	and.w	r3, sl, #1
 8007a32:	46b8      	mov	r8, r7
 8007a34:	9304      	str	r3, [sp, #16]
 8007a36:	4607      	mov	r7, r0
 8007a38:	4631      	mov	r1, r6
 8007a3a:	ee18 0a10 	vmov	r0, s16
 8007a3e:	f7ff fa77 	bl	8006f30 <quorem>
 8007a42:	4641      	mov	r1, r8
 8007a44:	9002      	str	r0, [sp, #8]
 8007a46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a4a:	ee18 0a10 	vmov	r0, s16
 8007a4e:	f000 fda5 	bl	800859c <__mcmp>
 8007a52:	463a      	mov	r2, r7
 8007a54:	9003      	str	r0, [sp, #12]
 8007a56:	4631      	mov	r1, r6
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f000 fdbb 	bl	80085d4 <__mdiff>
 8007a5e:	68c2      	ldr	r2, [r0, #12]
 8007a60:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a64:	4605      	mov	r5, r0
 8007a66:	bb02      	cbnz	r2, 8007aaa <_dtoa_r+0xa62>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	ee18 0a10 	vmov	r0, s16
 8007a6e:	f000 fd95 	bl	800859c <__mcmp>
 8007a72:	4602      	mov	r2, r0
 8007a74:	4629      	mov	r1, r5
 8007a76:	4620      	mov	r0, r4
 8007a78:	9207      	str	r2, [sp, #28]
 8007a7a:	f000 fb4d 	bl	8008118 <_Bfree>
 8007a7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a82:	ea43 0102 	orr.w	r1, r3, r2
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	464d      	mov	r5, r9
 8007a8c:	d10f      	bne.n	8007aae <_dtoa_r+0xa66>
 8007a8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a92:	d02a      	beq.n	8007aea <_dtoa_r+0xaa2>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	dd02      	ble.n	8007aa0 <_dtoa_r+0xa58>
 8007a9a:	9b02      	ldr	r3, [sp, #8]
 8007a9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007aa0:	f88b a000 	strb.w	sl, [fp]
 8007aa4:	e775      	b.n	8007992 <_dtoa_r+0x94a>
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	e7ba      	b.n	8007a20 <_dtoa_r+0x9d8>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	e7e2      	b.n	8007a74 <_dtoa_r+0xa2c>
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db04      	blt.n	8007abe <_dtoa_r+0xa76>
 8007ab4:	9906      	ldr	r1, [sp, #24]
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	9904      	ldr	r1, [sp, #16]
 8007aba:	430b      	orrs	r3, r1
 8007abc:	d122      	bne.n	8007b04 <_dtoa_r+0xabc>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	ddee      	ble.n	8007aa0 <_dtoa_r+0xa58>
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 fcf7 	bl	80084bc <__lshift>
 8007ace:	4631      	mov	r1, r6
 8007ad0:	ee08 0a10 	vmov	s16, r0
 8007ad4:	f000 fd62 	bl	800859c <__mcmp>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	dc03      	bgt.n	8007ae4 <_dtoa_r+0xa9c>
 8007adc:	d1e0      	bne.n	8007aa0 <_dtoa_r+0xa58>
 8007ade:	f01a 0f01 	tst.w	sl, #1
 8007ae2:	d0dd      	beq.n	8007aa0 <_dtoa_r+0xa58>
 8007ae4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ae8:	d1d7      	bne.n	8007a9a <_dtoa_r+0xa52>
 8007aea:	2339      	movs	r3, #57	; 0x39
 8007aec:	f88b 3000 	strb.w	r3, [fp]
 8007af0:	462b      	mov	r3, r5
 8007af2:	461d      	mov	r5, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007afa:	2a39      	cmp	r2, #57	; 0x39
 8007afc:	d071      	beq.n	8007be2 <_dtoa_r+0xb9a>
 8007afe:	3201      	adds	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	e746      	b.n	8007992 <_dtoa_r+0x94a>
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	dd07      	ble.n	8007b18 <_dtoa_r+0xad0>
 8007b08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b0c:	d0ed      	beq.n	8007aea <_dtoa_r+0xaa2>
 8007b0e:	f10a 0301 	add.w	r3, sl, #1
 8007b12:	f88b 3000 	strb.w	r3, [fp]
 8007b16:	e73c      	b.n	8007992 <_dtoa_r+0x94a>
 8007b18:	9b05      	ldr	r3, [sp, #20]
 8007b1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007b1e:	4599      	cmp	r9, r3
 8007b20:	d047      	beq.n	8007bb2 <_dtoa_r+0xb6a>
 8007b22:	ee18 1a10 	vmov	r1, s16
 8007b26:	2300      	movs	r3, #0
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb16 	bl	800815c <__multadd>
 8007b30:	45b8      	cmp	r8, r7
 8007b32:	ee08 0a10 	vmov	s16, r0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	f04f 020a 	mov.w	r2, #10
 8007b3e:	4641      	mov	r1, r8
 8007b40:	4620      	mov	r0, r4
 8007b42:	d106      	bne.n	8007b52 <_dtoa_r+0xb0a>
 8007b44:	f000 fb0a 	bl	800815c <__multadd>
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	f109 0901 	add.w	r9, r9, #1
 8007b50:	e772      	b.n	8007a38 <_dtoa_r+0x9f0>
 8007b52:	f000 fb03 	bl	800815c <__multadd>
 8007b56:	4639      	mov	r1, r7
 8007b58:	4680      	mov	r8, r0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	220a      	movs	r2, #10
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 fafc 	bl	800815c <__multadd>
 8007b64:	4607      	mov	r7, r0
 8007b66:	e7f1      	b.n	8007b4c <_dtoa_r+0xb04>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	9302      	str	r3, [sp, #8]
 8007b6c:	9d01      	ldr	r5, [sp, #4]
 8007b6e:	ee18 0a10 	vmov	r0, s16
 8007b72:	4631      	mov	r1, r6
 8007b74:	f7ff f9dc 	bl	8006f30 <quorem>
 8007b78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b7c:	9b01      	ldr	r3, [sp, #4]
 8007b7e:	f805 ab01 	strb.w	sl, [r5], #1
 8007b82:	1aea      	subs	r2, r5, r3
 8007b84:	9b02      	ldr	r3, [sp, #8]
 8007b86:	4293      	cmp	r3, r2
 8007b88:	dd09      	ble.n	8007b9e <_dtoa_r+0xb56>
 8007b8a:	ee18 1a10 	vmov	r1, s16
 8007b8e:	2300      	movs	r3, #0
 8007b90:	220a      	movs	r2, #10
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 fae2 	bl	800815c <__multadd>
 8007b98:	ee08 0a10 	vmov	s16, r0
 8007b9c:	e7e7      	b.n	8007b6e <_dtoa_r+0xb26>
 8007b9e:	9b02      	ldr	r3, [sp, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bfc8      	it	gt
 8007ba4:	461d      	movgt	r5, r3
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	bfd8      	it	le
 8007baa:	2501      	movle	r5, #1
 8007bac:	441d      	add	r5, r3
 8007bae:	f04f 0800 	mov.w	r8, #0
 8007bb2:	ee18 1a10 	vmov	r1, s16
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f000 fc7f 	bl	80084bc <__lshift>
 8007bbe:	4631      	mov	r1, r6
 8007bc0:	ee08 0a10 	vmov	s16, r0
 8007bc4:	f000 fcea 	bl	800859c <__mcmp>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dc91      	bgt.n	8007af0 <_dtoa_r+0xaa8>
 8007bcc:	d102      	bne.n	8007bd4 <_dtoa_r+0xb8c>
 8007bce:	f01a 0f01 	tst.w	sl, #1
 8007bd2:	d18d      	bne.n	8007af0 <_dtoa_r+0xaa8>
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bdc:	2a30      	cmp	r2, #48	; 0x30
 8007bde:	d0fa      	beq.n	8007bd6 <_dtoa_r+0xb8e>
 8007be0:	e6d7      	b.n	8007992 <_dtoa_r+0x94a>
 8007be2:	9a01      	ldr	r2, [sp, #4]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d184      	bne.n	8007af2 <_dtoa_r+0xaaa>
 8007be8:	9b00      	ldr	r3, [sp, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2331      	movs	r3, #49	; 0x31
 8007bf0:	7013      	strb	r3, [r2, #0]
 8007bf2:	e6ce      	b.n	8007992 <_dtoa_r+0x94a>
 8007bf4:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <_dtoa_r+0xbd4>)
 8007bf6:	f7ff ba95 	b.w	8007124 <_dtoa_r+0xdc>
 8007bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f47f aa6e 	bne.w	80070de <_dtoa_r+0x96>
 8007c02:	4b07      	ldr	r3, [pc, #28]	; (8007c20 <_dtoa_r+0xbd8>)
 8007c04:	f7ff ba8e 	b.w	8007124 <_dtoa_r+0xdc>
 8007c08:	9b02      	ldr	r3, [sp, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dcae      	bgt.n	8007b6c <_dtoa_r+0xb24>
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	f73f aea8 	bgt.w	8007966 <_dtoa_r+0x91e>
 8007c16:	e7a9      	b.n	8007b6c <_dtoa_r+0xb24>
 8007c18:	08009103 	.word	0x08009103
 8007c1c:	08009060 	.word	0x08009060
 8007c20:	08009084 	.word	0x08009084

08007c24 <__sflush_r>:
 8007c24:	898a      	ldrh	r2, [r1, #12]
 8007c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	0710      	lsls	r0, r2, #28
 8007c2e:	460c      	mov	r4, r1
 8007c30:	d458      	bmi.n	8007ce4 <__sflush_r+0xc0>
 8007c32:	684b      	ldr	r3, [r1, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dc05      	bgt.n	8007c44 <__sflush_r+0x20>
 8007c38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dc02      	bgt.n	8007c44 <__sflush_r+0x20>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d0f9      	beq.n	8007c3e <__sflush_r+0x1a>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c50:	682f      	ldr	r7, [r5, #0]
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	d032      	beq.n	8007cbc <__sflush_r+0x98>
 8007c56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c58:	89a3      	ldrh	r3, [r4, #12]
 8007c5a:	075a      	lsls	r2, r3, #29
 8007c5c:	d505      	bpl.n	8007c6a <__sflush_r+0x46>
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	1ac0      	subs	r0, r0, r3
 8007c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c64:	b10b      	cbz	r3, 8007c6a <__sflush_r+0x46>
 8007c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c70:	6a21      	ldr	r1, [r4, #32]
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b0      	blx	r6
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	d106      	bne.n	8007c8a <__sflush_r+0x66>
 8007c7c:	6829      	ldr	r1, [r5, #0]
 8007c7e:	291d      	cmp	r1, #29
 8007c80:	d82c      	bhi.n	8007cdc <__sflush_r+0xb8>
 8007c82:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <__sflush_r+0x108>)
 8007c84:	40ca      	lsrs	r2, r1
 8007c86:	07d6      	lsls	r6, r2, #31
 8007c88:	d528      	bpl.n	8007cdc <__sflush_r+0xb8>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	6062      	str	r2, [r4, #4]
 8007c8e:	04d9      	lsls	r1, r3, #19
 8007c90:	6922      	ldr	r2, [r4, #16]
 8007c92:	6022      	str	r2, [r4, #0]
 8007c94:	d504      	bpl.n	8007ca0 <__sflush_r+0x7c>
 8007c96:	1c42      	adds	r2, r0, #1
 8007c98:	d101      	bne.n	8007c9e <__sflush_r+0x7a>
 8007c9a:	682b      	ldr	r3, [r5, #0]
 8007c9c:	b903      	cbnz	r3, 8007ca0 <__sflush_r+0x7c>
 8007c9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ca2:	602f      	str	r7, [r5, #0]
 8007ca4:	2900      	cmp	r1, #0
 8007ca6:	d0ca      	beq.n	8007c3e <__sflush_r+0x1a>
 8007ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cac:	4299      	cmp	r1, r3
 8007cae:	d002      	beq.n	8007cb6 <__sflush_r+0x92>
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	f000 fd8b 	bl	80087cc <_free_r>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	6360      	str	r0, [r4, #52]	; 0x34
 8007cba:	e7c1      	b.n	8007c40 <__sflush_r+0x1c>
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b0      	blx	r6
 8007cc4:	1c41      	adds	r1, r0, #1
 8007cc6:	d1c7      	bne.n	8007c58 <__sflush_r+0x34>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0c4      	beq.n	8007c58 <__sflush_r+0x34>
 8007cce:	2b1d      	cmp	r3, #29
 8007cd0:	d001      	beq.n	8007cd6 <__sflush_r+0xb2>
 8007cd2:	2b16      	cmp	r3, #22
 8007cd4:	d101      	bne.n	8007cda <__sflush_r+0xb6>
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	e7b1      	b.n	8007c3e <__sflush_r+0x1a>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce0:	81a3      	strh	r3, [r4, #12]
 8007ce2:	e7ad      	b.n	8007c40 <__sflush_r+0x1c>
 8007ce4:	690f      	ldr	r7, [r1, #16]
 8007ce6:	2f00      	cmp	r7, #0
 8007ce8:	d0a9      	beq.n	8007c3e <__sflush_r+0x1a>
 8007cea:	0793      	lsls	r3, r2, #30
 8007cec:	680e      	ldr	r6, [r1, #0]
 8007cee:	bf08      	it	eq
 8007cf0:	694b      	ldreq	r3, [r1, #20]
 8007cf2:	600f      	str	r7, [r1, #0]
 8007cf4:	bf18      	it	ne
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	eba6 0807 	sub.w	r8, r6, r7
 8007cfc:	608b      	str	r3, [r1, #8]
 8007cfe:	f1b8 0f00 	cmp.w	r8, #0
 8007d02:	dd9c      	ble.n	8007c3e <__sflush_r+0x1a>
 8007d04:	6a21      	ldr	r1, [r4, #32]
 8007d06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d08:	4643      	mov	r3, r8
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b0      	blx	r6
 8007d10:	2800      	cmp	r0, #0
 8007d12:	dc06      	bgt.n	8007d22 <__sflush_r+0xfe>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d1a:	81a3      	strh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e78e      	b.n	8007c40 <__sflush_r+0x1c>
 8007d22:	4407      	add	r7, r0
 8007d24:	eba8 0800 	sub.w	r8, r8, r0
 8007d28:	e7e9      	b.n	8007cfe <__sflush_r+0xda>
 8007d2a:	bf00      	nop
 8007d2c:	20400001 	.word	0x20400001

08007d30 <_fflush_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	4605      	mov	r5, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	b913      	cbnz	r3, 8007d40 <_fflush_r+0x10>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	b118      	cbz	r0, 8007d4a <_fflush_r+0x1a>
 8007d42:	6983      	ldr	r3, [r0, #24]
 8007d44:	b90b      	cbnz	r3, 8007d4a <_fflush_r+0x1a>
 8007d46:	f000 f887 	bl	8007e58 <__sinit>
 8007d4a:	4b14      	ldr	r3, [pc, #80]	; (8007d9c <_fflush_r+0x6c>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d11b      	bne.n	8007d88 <_fflush_r+0x58>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0ef      	beq.n	8007d3a <_fflush_r+0xa>
 8007d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d5c:	07d0      	lsls	r0, r2, #31
 8007d5e:	d404      	bmi.n	8007d6a <_fflush_r+0x3a>
 8007d60:	0599      	lsls	r1, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_fflush_r+0x3a>
 8007d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d66:	f000 f91a 	bl	8007f9e <__retarget_lock_acquire_recursive>
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	f7ff ff59 	bl	8007c24 <__sflush_r>
 8007d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d74:	07da      	lsls	r2, r3, #31
 8007d76:	4605      	mov	r5, r0
 8007d78:	d4e0      	bmi.n	8007d3c <_fflush_r+0xc>
 8007d7a:	89a3      	ldrh	r3, [r4, #12]
 8007d7c:	059b      	lsls	r3, r3, #22
 8007d7e:	d4dd      	bmi.n	8007d3c <_fflush_r+0xc>
 8007d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d82:	f000 f90d 	bl	8007fa0 <__retarget_lock_release_recursive>
 8007d86:	e7d9      	b.n	8007d3c <_fflush_r+0xc>
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <_fflush_r+0x70>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d101      	bne.n	8007d92 <_fflush_r+0x62>
 8007d8e:	68ac      	ldr	r4, [r5, #8]
 8007d90:	e7df      	b.n	8007d52 <_fflush_r+0x22>
 8007d92:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <_fflush_r+0x74>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	bf08      	it	eq
 8007d98:	68ec      	ldreq	r4, [r5, #12]
 8007d9a:	e7da      	b.n	8007d52 <_fflush_r+0x22>
 8007d9c:	08009134 	.word	0x08009134
 8007da0:	08009154 	.word	0x08009154
 8007da4:	08009114 	.word	0x08009114

08007da8 <std>:
 8007da8:	2300      	movs	r3, #0
 8007daa:	b510      	push	{r4, lr}
 8007dac:	4604      	mov	r4, r0
 8007dae:	e9c0 3300 	strd	r3, r3, [r0]
 8007db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007db6:	6083      	str	r3, [r0, #8]
 8007db8:	8181      	strh	r1, [r0, #12]
 8007dba:	6643      	str	r3, [r0, #100]	; 0x64
 8007dbc:	81c2      	strh	r2, [r0, #14]
 8007dbe:	6183      	str	r3, [r0, #24]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	305c      	adds	r0, #92	; 0x5c
 8007dc6:	f7fe faf3 	bl	80063b0 <memset>
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <std+0x38>)
 8007dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x3c>)
 8007dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <std+0x40>)
 8007dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <std+0x44>)
 8007dd8:	6224      	str	r4, [r4, #32]
 8007dda:	6323      	str	r3, [r4, #48]	; 0x30
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	bf00      	nop
 8007de0:	08008c61 	.word	0x08008c61
 8007de4:	08008c83 	.word	0x08008c83
 8007de8:	08008cbb 	.word	0x08008cbb
 8007dec:	08008cdf 	.word	0x08008cdf

08007df0 <_cleanup_r>:
 8007df0:	4901      	ldr	r1, [pc, #4]	; (8007df8 <_cleanup_r+0x8>)
 8007df2:	f000 b8af 	b.w	8007f54 <_fwalk_reent>
 8007df6:	bf00      	nop
 8007df8:	08007d31 	.word	0x08007d31

08007dfc <__sfmoreglue>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	2268      	movs	r2, #104	; 0x68
 8007e00:	1e4d      	subs	r5, r1, #1
 8007e02:	4355      	muls	r5, r2
 8007e04:	460e      	mov	r6, r1
 8007e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0a:	f000 fd4b 	bl	80088a4 <_malloc_r>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	b140      	cbz	r0, 8007e24 <__sfmoreglue+0x28>
 8007e12:	2100      	movs	r1, #0
 8007e14:	e9c0 1600 	strd	r1, r6, [r0]
 8007e18:	300c      	adds	r0, #12
 8007e1a:	60a0      	str	r0, [r4, #8]
 8007e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e20:	f7fe fac6 	bl	80063b0 <memset>
 8007e24:	4620      	mov	r0, r4
 8007e26:	bd70      	pop	{r4, r5, r6, pc}

08007e28 <__sfp_lock_acquire>:
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <__sfp_lock_acquire+0x8>)
 8007e2a:	f000 b8b8 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	20000419 	.word	0x20000419

08007e34 <__sfp_lock_release>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__sfp_lock_release+0x8>)
 8007e36:	f000 b8b3 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	20000419 	.word	0x20000419

08007e40 <__sinit_lock_acquire>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__sinit_lock_acquire+0x8>)
 8007e42:	f000 b8ac 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8007e46:	bf00      	nop
 8007e48:	2000041a 	.word	0x2000041a

08007e4c <__sinit_lock_release>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	; (8007e54 <__sinit_lock_release+0x8>)
 8007e4e:	f000 b8a7 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8007e52:	bf00      	nop
 8007e54:	2000041a 	.word	0x2000041a

08007e58 <__sinit>:
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	f7ff fff0 	bl	8007e40 <__sinit_lock_acquire>
 8007e60:	69a3      	ldr	r3, [r4, #24]
 8007e62:	b11b      	cbz	r3, 8007e6c <__sinit+0x14>
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f7ff bff0 	b.w	8007e4c <__sinit_lock_release>
 8007e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e70:	6523      	str	r3, [r4, #80]	; 0x50
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <__sinit+0x68>)
 8007e74:	4a13      	ldr	r2, [pc, #76]	; (8007ec4 <__sinit+0x6c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	bf04      	itt	eq
 8007e7e:	2301      	moveq	r3, #1
 8007e80:	61a3      	streq	r3, [r4, #24]
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 f820 	bl	8007ec8 <__sfp>
 8007e88:	6060      	str	r0, [r4, #4]
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 f81c 	bl	8007ec8 <__sfp>
 8007e90:	60a0      	str	r0, [r4, #8]
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f818 	bl	8007ec8 <__sfp>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	60e0      	str	r0, [r4, #12]
 8007e9c:	2104      	movs	r1, #4
 8007e9e:	6860      	ldr	r0, [r4, #4]
 8007ea0:	f7ff ff82 	bl	8007da8 <std>
 8007ea4:	68a0      	ldr	r0, [r4, #8]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	2109      	movs	r1, #9
 8007eaa:	f7ff ff7d 	bl	8007da8 <std>
 8007eae:	68e0      	ldr	r0, [r4, #12]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	2112      	movs	r1, #18
 8007eb4:	f7ff ff78 	bl	8007da8 <std>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61a3      	str	r3, [r4, #24]
 8007ebc:	e7d2      	b.n	8007e64 <__sinit+0xc>
 8007ebe:	bf00      	nop
 8007ec0:	0800904c 	.word	0x0800904c
 8007ec4:	08007df1 	.word	0x08007df1

08007ec8 <__sfp>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	4607      	mov	r7, r0
 8007ecc:	f7ff ffac 	bl	8007e28 <__sfp_lock_acquire>
 8007ed0:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <__sfp+0x84>)
 8007ed2:	681e      	ldr	r6, [r3, #0]
 8007ed4:	69b3      	ldr	r3, [r6, #24]
 8007ed6:	b913      	cbnz	r3, 8007ede <__sfp+0x16>
 8007ed8:	4630      	mov	r0, r6
 8007eda:	f7ff ffbd 	bl	8007e58 <__sinit>
 8007ede:	3648      	adds	r6, #72	; 0x48
 8007ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	d503      	bpl.n	8007ef0 <__sfp+0x28>
 8007ee8:	6833      	ldr	r3, [r6, #0]
 8007eea:	b30b      	cbz	r3, 8007f30 <__sfp+0x68>
 8007eec:	6836      	ldr	r6, [r6, #0]
 8007eee:	e7f7      	b.n	8007ee0 <__sfp+0x18>
 8007ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef4:	b9d5      	cbnz	r5, 8007f2c <__sfp+0x64>
 8007ef6:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <__sfp+0x88>)
 8007ef8:	60e3      	str	r3, [r4, #12]
 8007efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007efe:	6665      	str	r5, [r4, #100]	; 0x64
 8007f00:	f000 f84c 	bl	8007f9c <__retarget_lock_init_recursive>
 8007f04:	f7ff ff96 	bl	8007e34 <__sfp_lock_release>
 8007f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f10:	6025      	str	r5, [r4, #0]
 8007f12:	61a5      	str	r5, [r4, #24]
 8007f14:	2208      	movs	r2, #8
 8007f16:	4629      	mov	r1, r5
 8007f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f1c:	f7fe fa48 	bl	80063b0 <memset>
 8007f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f28:	4620      	mov	r0, r4
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2c:	3468      	adds	r4, #104	; 0x68
 8007f2e:	e7d9      	b.n	8007ee4 <__sfp+0x1c>
 8007f30:	2104      	movs	r1, #4
 8007f32:	4638      	mov	r0, r7
 8007f34:	f7ff ff62 	bl	8007dfc <__sfmoreglue>
 8007f38:	4604      	mov	r4, r0
 8007f3a:	6030      	str	r0, [r6, #0]
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	d1d5      	bne.n	8007eec <__sfp+0x24>
 8007f40:	f7ff ff78 	bl	8007e34 <__sfp_lock_release>
 8007f44:	230c      	movs	r3, #12
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	e7ee      	b.n	8007f28 <__sfp+0x60>
 8007f4a:	bf00      	nop
 8007f4c:	0800904c 	.word	0x0800904c
 8007f50:	ffff0001 	.word	0xffff0001

08007f54 <_fwalk_reent>:
 8007f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f58:	4606      	mov	r6, r0
 8007f5a:	4688      	mov	r8, r1
 8007f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f60:	2700      	movs	r7, #0
 8007f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f66:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6a:	d505      	bpl.n	8007f78 <_fwalk_reent+0x24>
 8007f6c:	6824      	ldr	r4, [r4, #0]
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d1f7      	bne.n	8007f62 <_fwalk_reent+0xe>
 8007f72:	4638      	mov	r0, r7
 8007f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f78:	89ab      	ldrh	r3, [r5, #12]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d907      	bls.n	8007f8e <_fwalk_reent+0x3a>
 8007f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f82:	3301      	adds	r3, #1
 8007f84:	d003      	beq.n	8007f8e <_fwalk_reent+0x3a>
 8007f86:	4629      	mov	r1, r5
 8007f88:	4630      	mov	r0, r6
 8007f8a:	47c0      	blx	r8
 8007f8c:	4307      	orrs	r7, r0
 8007f8e:	3568      	adds	r5, #104	; 0x68
 8007f90:	e7e9      	b.n	8007f66 <_fwalk_reent+0x12>
	...

08007f94 <_localeconv_r>:
 8007f94:	4800      	ldr	r0, [pc, #0]	; (8007f98 <_localeconv_r+0x4>)
 8007f96:	4770      	bx	lr
 8007f98:	20000194 	.word	0x20000194

08007f9c <__retarget_lock_init_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <__retarget_lock_acquire_recursive>:
 8007f9e:	4770      	bx	lr

08007fa0 <__retarget_lock_release_recursive>:
 8007fa0:	4770      	bx	lr

08007fa2 <__swhatbuf_r>:
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	460e      	mov	r6, r1
 8007fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007faa:	2900      	cmp	r1, #0
 8007fac:	b096      	sub	sp, #88	; 0x58
 8007fae:	4614      	mov	r4, r2
 8007fb0:	461d      	mov	r5, r3
 8007fb2:	da08      	bge.n	8007fc6 <__swhatbuf_r+0x24>
 8007fb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	602a      	str	r2, [r5, #0]
 8007fbc:	061a      	lsls	r2, r3, #24
 8007fbe:	d410      	bmi.n	8007fe2 <__swhatbuf_r+0x40>
 8007fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc4:	e00e      	b.n	8007fe4 <__swhatbuf_r+0x42>
 8007fc6:	466a      	mov	r2, sp
 8007fc8:	f000 fee0 	bl	8008d8c <_fstat_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	dbf1      	blt.n	8007fb4 <__swhatbuf_r+0x12>
 8007fd0:	9a01      	ldr	r2, [sp, #4]
 8007fd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fda:	425a      	negs	r2, r3
 8007fdc:	415a      	adcs	r2, r3
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	e7ee      	b.n	8007fc0 <__swhatbuf_r+0x1e>
 8007fe2:	2340      	movs	r3, #64	; 0x40
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	b016      	add	sp, #88	; 0x58
 8007fea:	bd70      	pop	{r4, r5, r6, pc}

08007fec <__smakebuf_r>:
 8007fec:	898b      	ldrh	r3, [r1, #12]
 8007fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ff0:	079d      	lsls	r5, r3, #30
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	d507      	bpl.n	8008008 <__smakebuf_r+0x1c>
 8007ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	2301      	movs	r3, #1
 8008002:	6163      	str	r3, [r4, #20]
 8008004:	b002      	add	sp, #8
 8008006:	bd70      	pop	{r4, r5, r6, pc}
 8008008:	ab01      	add	r3, sp, #4
 800800a:	466a      	mov	r2, sp
 800800c:	f7ff ffc9 	bl	8007fa2 <__swhatbuf_r>
 8008010:	9900      	ldr	r1, [sp, #0]
 8008012:	4605      	mov	r5, r0
 8008014:	4630      	mov	r0, r6
 8008016:	f000 fc45 	bl	80088a4 <_malloc_r>
 800801a:	b948      	cbnz	r0, 8008030 <__smakebuf_r+0x44>
 800801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d4ef      	bmi.n	8008004 <__smakebuf_r+0x18>
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	f043 0302 	orr.w	r3, r3, #2
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	e7e3      	b.n	8007ff8 <__smakebuf_r+0xc>
 8008030:	4b0d      	ldr	r3, [pc, #52]	; (8008068 <__smakebuf_r+0x7c>)
 8008032:	62b3      	str	r3, [r6, #40]	; 0x28
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	6020      	str	r0, [r4, #0]
 8008038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803c:	81a3      	strh	r3, [r4, #12]
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	6163      	str	r3, [r4, #20]
 8008042:	9b01      	ldr	r3, [sp, #4]
 8008044:	6120      	str	r0, [r4, #16]
 8008046:	b15b      	cbz	r3, 8008060 <__smakebuf_r+0x74>
 8008048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804c:	4630      	mov	r0, r6
 800804e:	f000 feaf 	bl	8008db0 <_isatty_r>
 8008052:	b128      	cbz	r0, 8008060 <__smakebuf_r+0x74>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f023 0303 	bic.w	r3, r3, #3
 800805a:	f043 0301 	orr.w	r3, r3, #1
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	89a0      	ldrh	r0, [r4, #12]
 8008062:	4305      	orrs	r5, r0
 8008064:	81a5      	strh	r5, [r4, #12]
 8008066:	e7cd      	b.n	8008004 <__smakebuf_r+0x18>
 8008068:	08007df1 	.word	0x08007df1

0800806c <malloc>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <malloc+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f000 bc17 	b.w	80088a4 <_malloc_r>
 8008076:	bf00      	nop
 8008078:	20000040 	.word	0x20000040

0800807c <memcpy>:
 800807c:	440a      	add	r2, r1
 800807e:	4291      	cmp	r1, r2
 8008080:	f100 33ff 	add.w	r3, r0, #4294967295
 8008084:	d100      	bne.n	8008088 <memcpy+0xc>
 8008086:	4770      	bx	lr
 8008088:	b510      	push	{r4, lr}
 800808a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800808e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008092:	4291      	cmp	r1, r2
 8008094:	d1f9      	bne.n	800808a <memcpy+0xe>
 8008096:	bd10      	pop	{r4, pc}

08008098 <_Balloc>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800809c:	4604      	mov	r4, r0
 800809e:	460d      	mov	r5, r1
 80080a0:	b976      	cbnz	r6, 80080c0 <_Balloc+0x28>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff ffe2 	bl	800806c <malloc>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6260      	str	r0, [r4, #36]	; 0x24
 80080ac:	b920      	cbnz	r0, 80080b8 <_Balloc+0x20>
 80080ae:	4b18      	ldr	r3, [pc, #96]	; (8008110 <_Balloc+0x78>)
 80080b0:	4818      	ldr	r0, [pc, #96]	; (8008114 <_Balloc+0x7c>)
 80080b2:	2166      	movs	r1, #102	; 0x66
 80080b4:	f000 fe2a 	bl	8008d0c <__assert_func>
 80080b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080bc:	6006      	str	r6, [r0, #0]
 80080be:	60c6      	str	r6, [r0, #12]
 80080c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080c2:	68f3      	ldr	r3, [r6, #12]
 80080c4:	b183      	cbz	r3, 80080e8 <_Balloc+0x50>
 80080c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ce:	b9b8      	cbnz	r0, 8008100 <_Balloc+0x68>
 80080d0:	2101      	movs	r1, #1
 80080d2:	fa01 f605 	lsl.w	r6, r1, r5
 80080d6:	1d72      	adds	r2, r6, #5
 80080d8:	0092      	lsls	r2, r2, #2
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fb60 	bl	80087a0 <_calloc_r>
 80080e0:	b160      	cbz	r0, 80080fc <_Balloc+0x64>
 80080e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080e6:	e00e      	b.n	8008106 <_Balloc+0x6e>
 80080e8:	2221      	movs	r2, #33	; 0x21
 80080ea:	2104      	movs	r1, #4
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fb57 	bl	80087a0 <_calloc_r>
 80080f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f4:	60f0      	str	r0, [r6, #12]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e4      	bne.n	80080c6 <_Balloc+0x2e>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
 8008100:	6802      	ldr	r2, [r0, #0]
 8008102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008106:	2300      	movs	r3, #0
 8008108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800810c:	e7f7      	b.n	80080fe <_Balloc+0x66>
 800810e:	bf00      	nop
 8008110:	08009091 	.word	0x08009091
 8008114:	08009174 	.word	0x08009174

08008118 <_Bfree>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b976      	cbnz	r6, 8008140 <_Bfree+0x28>
 8008122:	2010      	movs	r0, #16
 8008124:	f7ff ffa2 	bl	800806c <malloc>
 8008128:	4602      	mov	r2, r0
 800812a:	6268      	str	r0, [r5, #36]	; 0x24
 800812c:	b920      	cbnz	r0, 8008138 <_Bfree+0x20>
 800812e:	4b09      	ldr	r3, [pc, #36]	; (8008154 <_Bfree+0x3c>)
 8008130:	4809      	ldr	r0, [pc, #36]	; (8008158 <_Bfree+0x40>)
 8008132:	218a      	movs	r1, #138	; 0x8a
 8008134:	f000 fdea 	bl	8008d0c <__assert_func>
 8008138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800813c:	6006      	str	r6, [r0, #0]
 800813e:	60c6      	str	r6, [r0, #12]
 8008140:	b13c      	cbz	r4, 8008152 <_Bfree+0x3a>
 8008142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008144:	6862      	ldr	r2, [r4, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814c:	6021      	str	r1, [r4, #0]
 800814e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	08009091 	.word	0x08009091
 8008158:	08009174 	.word	0x08009174

0800815c <__multadd>:
 800815c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	690d      	ldr	r5, [r1, #16]
 8008162:	4607      	mov	r7, r0
 8008164:	460c      	mov	r4, r1
 8008166:	461e      	mov	r6, r3
 8008168:	f101 0c14 	add.w	ip, r1, #20
 800816c:	2000      	movs	r0, #0
 800816e:	f8dc 3000 	ldr.w	r3, [ip]
 8008172:	b299      	uxth	r1, r3
 8008174:	fb02 6101 	mla	r1, r2, r1, r6
 8008178:	0c1e      	lsrs	r6, r3, #16
 800817a:	0c0b      	lsrs	r3, r1, #16
 800817c:	fb02 3306 	mla	r3, r2, r6, r3
 8008180:	b289      	uxth	r1, r1
 8008182:	3001      	adds	r0, #1
 8008184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008188:	4285      	cmp	r5, r0
 800818a:	f84c 1b04 	str.w	r1, [ip], #4
 800818e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008192:	dcec      	bgt.n	800816e <__multadd+0x12>
 8008194:	b30e      	cbz	r6, 80081da <__multadd+0x7e>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	42ab      	cmp	r3, r5
 800819a:	dc19      	bgt.n	80081d0 <__multadd+0x74>
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4638      	mov	r0, r7
 80081a0:	3101      	adds	r1, #1
 80081a2:	f7ff ff79 	bl	8008098 <_Balloc>
 80081a6:	4680      	mov	r8, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__multadd+0x5a>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <__multadd+0x84>)
 80081ae:	480d      	ldr	r0, [pc, #52]	; (80081e4 <__multadd+0x88>)
 80081b0:	21b5      	movs	r1, #181	; 0xb5
 80081b2:	f000 fdab 	bl	8008d0c <__assert_func>
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	3202      	adds	r2, #2
 80081ba:	f104 010c 	add.w	r1, r4, #12
 80081be:	0092      	lsls	r2, r2, #2
 80081c0:	300c      	adds	r0, #12
 80081c2:	f7ff ff5b 	bl	800807c <memcpy>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7ff ffa5 	bl	8008118 <_Bfree>
 80081ce:	4644      	mov	r4, r8
 80081d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081d4:	3501      	adds	r5, #1
 80081d6:	615e      	str	r6, [r3, #20]
 80081d8:	6125      	str	r5, [r4, #16]
 80081da:	4620      	mov	r0, r4
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	08009103 	.word	0x08009103
 80081e4:	08009174 	.word	0x08009174

080081e8 <__hi0bits>:
 80081e8:	0c03      	lsrs	r3, r0, #16
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	b9d3      	cbnz	r3, 8008224 <__hi0bits+0x3c>
 80081ee:	0400      	lsls	r0, r0, #16
 80081f0:	2310      	movs	r3, #16
 80081f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081f6:	bf04      	itt	eq
 80081f8:	0200      	lsleq	r0, r0, #8
 80081fa:	3308      	addeq	r3, #8
 80081fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008200:	bf04      	itt	eq
 8008202:	0100      	lsleq	r0, r0, #4
 8008204:	3304      	addeq	r3, #4
 8008206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800820a:	bf04      	itt	eq
 800820c:	0080      	lsleq	r0, r0, #2
 800820e:	3302      	addeq	r3, #2
 8008210:	2800      	cmp	r0, #0
 8008212:	db05      	blt.n	8008220 <__hi0bits+0x38>
 8008214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008218:	f103 0301 	add.w	r3, r3, #1
 800821c:	bf08      	it	eq
 800821e:	2320      	moveq	r3, #32
 8008220:	4618      	mov	r0, r3
 8008222:	4770      	bx	lr
 8008224:	2300      	movs	r3, #0
 8008226:	e7e4      	b.n	80081f2 <__hi0bits+0xa>

08008228 <__lo0bits>:
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	f013 0207 	ands.w	r2, r3, #7
 800822e:	4601      	mov	r1, r0
 8008230:	d00b      	beq.n	800824a <__lo0bits+0x22>
 8008232:	07da      	lsls	r2, r3, #31
 8008234:	d423      	bmi.n	800827e <__lo0bits+0x56>
 8008236:	0798      	lsls	r0, r3, #30
 8008238:	bf49      	itett	mi
 800823a:	085b      	lsrmi	r3, r3, #1
 800823c:	089b      	lsrpl	r3, r3, #2
 800823e:	2001      	movmi	r0, #1
 8008240:	600b      	strmi	r3, [r1, #0]
 8008242:	bf5c      	itt	pl
 8008244:	600b      	strpl	r3, [r1, #0]
 8008246:	2002      	movpl	r0, #2
 8008248:	4770      	bx	lr
 800824a:	b298      	uxth	r0, r3
 800824c:	b9a8      	cbnz	r0, 800827a <__lo0bits+0x52>
 800824e:	0c1b      	lsrs	r3, r3, #16
 8008250:	2010      	movs	r0, #16
 8008252:	b2da      	uxtb	r2, r3
 8008254:	b90a      	cbnz	r2, 800825a <__lo0bits+0x32>
 8008256:	3008      	adds	r0, #8
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	071a      	lsls	r2, r3, #28
 800825c:	bf04      	itt	eq
 800825e:	091b      	lsreq	r3, r3, #4
 8008260:	3004      	addeq	r0, #4
 8008262:	079a      	lsls	r2, r3, #30
 8008264:	bf04      	itt	eq
 8008266:	089b      	lsreq	r3, r3, #2
 8008268:	3002      	addeq	r0, #2
 800826a:	07da      	lsls	r2, r3, #31
 800826c:	d403      	bmi.n	8008276 <__lo0bits+0x4e>
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	f100 0001 	add.w	r0, r0, #1
 8008274:	d005      	beq.n	8008282 <__lo0bits+0x5a>
 8008276:	600b      	str	r3, [r1, #0]
 8008278:	4770      	bx	lr
 800827a:	4610      	mov	r0, r2
 800827c:	e7e9      	b.n	8008252 <__lo0bits+0x2a>
 800827e:	2000      	movs	r0, #0
 8008280:	4770      	bx	lr
 8008282:	2020      	movs	r0, #32
 8008284:	4770      	bx	lr
	...

08008288 <__i2b>:
 8008288:	b510      	push	{r4, lr}
 800828a:	460c      	mov	r4, r1
 800828c:	2101      	movs	r1, #1
 800828e:	f7ff ff03 	bl	8008098 <_Balloc>
 8008292:	4602      	mov	r2, r0
 8008294:	b928      	cbnz	r0, 80082a2 <__i2b+0x1a>
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <__i2b+0x24>)
 8008298:	4805      	ldr	r0, [pc, #20]	; (80082b0 <__i2b+0x28>)
 800829a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800829e:	f000 fd35 	bl	8008d0c <__assert_func>
 80082a2:	2301      	movs	r3, #1
 80082a4:	6144      	str	r4, [r0, #20]
 80082a6:	6103      	str	r3, [r0, #16]
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	08009103 	.word	0x08009103
 80082b0:	08009174 	.word	0x08009174

080082b4 <__multiply>:
 80082b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b8:	4691      	mov	r9, r2
 80082ba:	690a      	ldr	r2, [r1, #16]
 80082bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bfb8      	it	lt
 80082c4:	460b      	movlt	r3, r1
 80082c6:	460c      	mov	r4, r1
 80082c8:	bfbc      	itt	lt
 80082ca:	464c      	movlt	r4, r9
 80082cc:	4699      	movlt	r9, r3
 80082ce:	6927      	ldr	r7, [r4, #16]
 80082d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	6861      	ldr	r1, [r4, #4]
 80082d8:	eb07 060a 	add.w	r6, r7, sl
 80082dc:	42b3      	cmp	r3, r6
 80082de:	b085      	sub	sp, #20
 80082e0:	bfb8      	it	lt
 80082e2:	3101      	addlt	r1, #1
 80082e4:	f7ff fed8 	bl	8008098 <_Balloc>
 80082e8:	b930      	cbnz	r0, 80082f8 <__multiply+0x44>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4b44      	ldr	r3, [pc, #272]	; (8008400 <__multiply+0x14c>)
 80082ee:	4845      	ldr	r0, [pc, #276]	; (8008404 <__multiply+0x150>)
 80082f0:	f240 115d 	movw	r1, #349	; 0x15d
 80082f4:	f000 fd0a 	bl	8008d0c <__assert_func>
 80082f8:	f100 0514 	add.w	r5, r0, #20
 80082fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008300:	462b      	mov	r3, r5
 8008302:	2200      	movs	r2, #0
 8008304:	4543      	cmp	r3, r8
 8008306:	d321      	bcc.n	800834c <__multiply+0x98>
 8008308:	f104 0314 	add.w	r3, r4, #20
 800830c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008310:	f109 0314 	add.w	r3, r9, #20
 8008314:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008318:	9202      	str	r2, [sp, #8]
 800831a:	1b3a      	subs	r2, r7, r4
 800831c:	3a15      	subs	r2, #21
 800831e:	f022 0203 	bic.w	r2, r2, #3
 8008322:	3204      	adds	r2, #4
 8008324:	f104 0115 	add.w	r1, r4, #21
 8008328:	428f      	cmp	r7, r1
 800832a:	bf38      	it	cc
 800832c:	2204      	movcc	r2, #4
 800832e:	9201      	str	r2, [sp, #4]
 8008330:	9a02      	ldr	r2, [sp, #8]
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	429a      	cmp	r2, r3
 8008336:	d80c      	bhi.n	8008352 <__multiply+0x9e>
 8008338:	2e00      	cmp	r6, #0
 800833a:	dd03      	ble.n	8008344 <__multiply+0x90>
 800833c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008340:	2b00      	cmp	r3, #0
 8008342:	d05a      	beq.n	80083fa <__multiply+0x146>
 8008344:	6106      	str	r6, [r0, #16]
 8008346:	b005      	add	sp, #20
 8008348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834c:	f843 2b04 	str.w	r2, [r3], #4
 8008350:	e7d8      	b.n	8008304 <__multiply+0x50>
 8008352:	f8b3 a000 	ldrh.w	sl, [r3]
 8008356:	f1ba 0f00 	cmp.w	sl, #0
 800835a:	d024      	beq.n	80083a6 <__multiply+0xf2>
 800835c:	f104 0e14 	add.w	lr, r4, #20
 8008360:	46a9      	mov	r9, r5
 8008362:	f04f 0c00 	mov.w	ip, #0
 8008366:	f85e 2b04 	ldr.w	r2, [lr], #4
 800836a:	f8d9 1000 	ldr.w	r1, [r9]
 800836e:	fa1f fb82 	uxth.w	fp, r2
 8008372:	b289      	uxth	r1, r1
 8008374:	fb0a 110b 	mla	r1, sl, fp, r1
 8008378:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800837c:	f8d9 2000 	ldr.w	r2, [r9]
 8008380:	4461      	add	r1, ip
 8008382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008386:	fb0a c20b 	mla	r2, sl, fp, ip
 800838a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800838e:	b289      	uxth	r1, r1
 8008390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008394:	4577      	cmp	r7, lr
 8008396:	f849 1b04 	str.w	r1, [r9], #4
 800839a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800839e:	d8e2      	bhi.n	8008366 <__multiply+0xb2>
 80083a0:	9a01      	ldr	r2, [sp, #4]
 80083a2:	f845 c002 	str.w	ip, [r5, r2]
 80083a6:	9a03      	ldr	r2, [sp, #12]
 80083a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083ac:	3304      	adds	r3, #4
 80083ae:	f1b9 0f00 	cmp.w	r9, #0
 80083b2:	d020      	beq.n	80083f6 <__multiply+0x142>
 80083b4:	6829      	ldr	r1, [r5, #0]
 80083b6:	f104 0c14 	add.w	ip, r4, #20
 80083ba:	46ae      	mov	lr, r5
 80083bc:	f04f 0a00 	mov.w	sl, #0
 80083c0:	f8bc b000 	ldrh.w	fp, [ip]
 80083c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083c8:	fb09 220b 	mla	r2, r9, fp, r2
 80083cc:	4492      	add	sl, r2
 80083ce:	b289      	uxth	r1, r1
 80083d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083d4:	f84e 1b04 	str.w	r1, [lr], #4
 80083d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083dc:	f8be 1000 	ldrh.w	r1, [lr]
 80083e0:	0c12      	lsrs	r2, r2, #16
 80083e2:	fb09 1102 	mla	r1, r9, r2, r1
 80083e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083ea:	4567      	cmp	r7, ip
 80083ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083f0:	d8e6      	bhi.n	80083c0 <__multiply+0x10c>
 80083f2:	9a01      	ldr	r2, [sp, #4]
 80083f4:	50a9      	str	r1, [r5, r2]
 80083f6:	3504      	adds	r5, #4
 80083f8:	e79a      	b.n	8008330 <__multiply+0x7c>
 80083fa:	3e01      	subs	r6, #1
 80083fc:	e79c      	b.n	8008338 <__multiply+0x84>
 80083fe:	bf00      	nop
 8008400:	08009103 	.word	0x08009103
 8008404:	08009174 	.word	0x08009174

08008408 <__pow5mult>:
 8008408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800840c:	4615      	mov	r5, r2
 800840e:	f012 0203 	ands.w	r2, r2, #3
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	d007      	beq.n	8008428 <__pow5mult+0x20>
 8008418:	4c25      	ldr	r4, [pc, #148]	; (80084b0 <__pow5mult+0xa8>)
 800841a:	3a01      	subs	r2, #1
 800841c:	2300      	movs	r3, #0
 800841e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008422:	f7ff fe9b 	bl	800815c <__multadd>
 8008426:	4607      	mov	r7, r0
 8008428:	10ad      	asrs	r5, r5, #2
 800842a:	d03d      	beq.n	80084a8 <__pow5mult+0xa0>
 800842c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800842e:	b97c      	cbnz	r4, 8008450 <__pow5mult+0x48>
 8008430:	2010      	movs	r0, #16
 8008432:	f7ff fe1b 	bl	800806c <malloc>
 8008436:	4602      	mov	r2, r0
 8008438:	6270      	str	r0, [r6, #36]	; 0x24
 800843a:	b928      	cbnz	r0, 8008448 <__pow5mult+0x40>
 800843c:	4b1d      	ldr	r3, [pc, #116]	; (80084b4 <__pow5mult+0xac>)
 800843e:	481e      	ldr	r0, [pc, #120]	; (80084b8 <__pow5mult+0xb0>)
 8008440:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008444:	f000 fc62 	bl	8008d0c <__assert_func>
 8008448:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800844c:	6004      	str	r4, [r0, #0]
 800844e:	60c4      	str	r4, [r0, #12]
 8008450:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008454:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008458:	b94c      	cbnz	r4, 800846e <__pow5mult+0x66>
 800845a:	f240 2171 	movw	r1, #625	; 0x271
 800845e:	4630      	mov	r0, r6
 8008460:	f7ff ff12 	bl	8008288 <__i2b>
 8008464:	2300      	movs	r3, #0
 8008466:	f8c8 0008 	str.w	r0, [r8, #8]
 800846a:	4604      	mov	r4, r0
 800846c:	6003      	str	r3, [r0, #0]
 800846e:	f04f 0900 	mov.w	r9, #0
 8008472:	07eb      	lsls	r3, r5, #31
 8008474:	d50a      	bpl.n	800848c <__pow5mult+0x84>
 8008476:	4639      	mov	r1, r7
 8008478:	4622      	mov	r2, r4
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ff1a 	bl	80082b4 <__multiply>
 8008480:	4639      	mov	r1, r7
 8008482:	4680      	mov	r8, r0
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fe47 	bl	8008118 <_Bfree>
 800848a:	4647      	mov	r7, r8
 800848c:	106d      	asrs	r5, r5, #1
 800848e:	d00b      	beq.n	80084a8 <__pow5mult+0xa0>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	b938      	cbnz	r0, 80084a4 <__pow5mult+0x9c>
 8008494:	4622      	mov	r2, r4
 8008496:	4621      	mov	r1, r4
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff ff0b 	bl	80082b4 <__multiply>
 800849e:	6020      	str	r0, [r4, #0]
 80084a0:	f8c0 9000 	str.w	r9, [r0]
 80084a4:	4604      	mov	r4, r0
 80084a6:	e7e4      	b.n	8008472 <__pow5mult+0x6a>
 80084a8:	4638      	mov	r0, r7
 80084aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ae:	bf00      	nop
 80084b0:	080092c0 	.word	0x080092c0
 80084b4:	08009091 	.word	0x08009091
 80084b8:	08009174 	.word	0x08009174

080084bc <__lshift>:
 80084bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	460c      	mov	r4, r1
 80084c2:	6849      	ldr	r1, [r1, #4]
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084ca:	68a3      	ldr	r3, [r4, #8]
 80084cc:	4607      	mov	r7, r0
 80084ce:	4691      	mov	r9, r2
 80084d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084d4:	f108 0601 	add.w	r6, r8, #1
 80084d8:	42b3      	cmp	r3, r6
 80084da:	db0b      	blt.n	80084f4 <__lshift+0x38>
 80084dc:	4638      	mov	r0, r7
 80084de:	f7ff fddb 	bl	8008098 <_Balloc>
 80084e2:	4605      	mov	r5, r0
 80084e4:	b948      	cbnz	r0, 80084fa <__lshift+0x3e>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b2a      	ldr	r3, [pc, #168]	; (8008594 <__lshift+0xd8>)
 80084ea:	482b      	ldr	r0, [pc, #172]	; (8008598 <__lshift+0xdc>)
 80084ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084f0:	f000 fc0c 	bl	8008d0c <__assert_func>
 80084f4:	3101      	adds	r1, #1
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	e7ee      	b.n	80084d8 <__lshift+0x1c>
 80084fa:	2300      	movs	r3, #0
 80084fc:	f100 0114 	add.w	r1, r0, #20
 8008500:	f100 0210 	add.w	r2, r0, #16
 8008504:	4618      	mov	r0, r3
 8008506:	4553      	cmp	r3, sl
 8008508:	db37      	blt.n	800857a <__lshift+0xbe>
 800850a:	6920      	ldr	r0, [r4, #16]
 800850c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008510:	f104 0314 	add.w	r3, r4, #20
 8008514:	f019 091f 	ands.w	r9, r9, #31
 8008518:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800851c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008520:	d02f      	beq.n	8008582 <__lshift+0xc6>
 8008522:	f1c9 0e20 	rsb	lr, r9, #32
 8008526:	468a      	mov	sl, r1
 8008528:	f04f 0c00 	mov.w	ip, #0
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	fa02 f209 	lsl.w	r2, r2, r9
 8008532:	ea42 020c 	orr.w	r2, r2, ip
 8008536:	f84a 2b04 	str.w	r2, [sl], #4
 800853a:	f853 2b04 	ldr.w	r2, [r3], #4
 800853e:	4298      	cmp	r0, r3
 8008540:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008544:	d8f2      	bhi.n	800852c <__lshift+0x70>
 8008546:	1b03      	subs	r3, r0, r4
 8008548:	3b15      	subs	r3, #21
 800854a:	f023 0303 	bic.w	r3, r3, #3
 800854e:	3304      	adds	r3, #4
 8008550:	f104 0215 	add.w	r2, r4, #21
 8008554:	4290      	cmp	r0, r2
 8008556:	bf38      	it	cc
 8008558:	2304      	movcc	r3, #4
 800855a:	f841 c003 	str.w	ip, [r1, r3]
 800855e:	f1bc 0f00 	cmp.w	ip, #0
 8008562:	d001      	beq.n	8008568 <__lshift+0xac>
 8008564:	f108 0602 	add.w	r6, r8, #2
 8008568:	3e01      	subs	r6, #1
 800856a:	4638      	mov	r0, r7
 800856c:	612e      	str	r6, [r5, #16]
 800856e:	4621      	mov	r1, r4
 8008570:	f7ff fdd2 	bl	8008118 <_Bfree>
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857a:	f842 0f04 	str.w	r0, [r2, #4]!
 800857e:	3301      	adds	r3, #1
 8008580:	e7c1      	b.n	8008506 <__lshift+0x4a>
 8008582:	3904      	subs	r1, #4
 8008584:	f853 2b04 	ldr.w	r2, [r3], #4
 8008588:	f841 2f04 	str.w	r2, [r1, #4]!
 800858c:	4298      	cmp	r0, r3
 800858e:	d8f9      	bhi.n	8008584 <__lshift+0xc8>
 8008590:	e7ea      	b.n	8008568 <__lshift+0xac>
 8008592:	bf00      	nop
 8008594:	08009103 	.word	0x08009103
 8008598:	08009174 	.word	0x08009174

0800859c <__mcmp>:
 800859c:	b530      	push	{r4, r5, lr}
 800859e:	6902      	ldr	r2, [r0, #16]
 80085a0:	690c      	ldr	r4, [r1, #16]
 80085a2:	1b12      	subs	r2, r2, r4
 80085a4:	d10e      	bne.n	80085c4 <__mcmp+0x28>
 80085a6:	f100 0314 	add.w	r3, r0, #20
 80085aa:	3114      	adds	r1, #20
 80085ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085bc:	42a5      	cmp	r5, r4
 80085be:	d003      	beq.n	80085c8 <__mcmp+0x2c>
 80085c0:	d305      	bcc.n	80085ce <__mcmp+0x32>
 80085c2:	2201      	movs	r2, #1
 80085c4:	4610      	mov	r0, r2
 80085c6:	bd30      	pop	{r4, r5, pc}
 80085c8:	4283      	cmp	r3, r0
 80085ca:	d3f3      	bcc.n	80085b4 <__mcmp+0x18>
 80085cc:	e7fa      	b.n	80085c4 <__mcmp+0x28>
 80085ce:	f04f 32ff 	mov.w	r2, #4294967295
 80085d2:	e7f7      	b.n	80085c4 <__mcmp+0x28>

080085d4 <__mdiff>:
 80085d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	4606      	mov	r6, r0
 80085dc:	4611      	mov	r1, r2
 80085de:	4620      	mov	r0, r4
 80085e0:	4690      	mov	r8, r2
 80085e2:	f7ff ffdb 	bl	800859c <__mcmp>
 80085e6:	1e05      	subs	r5, r0, #0
 80085e8:	d110      	bne.n	800860c <__mdiff+0x38>
 80085ea:	4629      	mov	r1, r5
 80085ec:	4630      	mov	r0, r6
 80085ee:	f7ff fd53 	bl	8008098 <_Balloc>
 80085f2:	b930      	cbnz	r0, 8008602 <__mdiff+0x2e>
 80085f4:	4b3a      	ldr	r3, [pc, #232]	; (80086e0 <__mdiff+0x10c>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f240 2132 	movw	r1, #562	; 0x232
 80085fc:	4839      	ldr	r0, [pc, #228]	; (80086e4 <__mdiff+0x110>)
 80085fe:	f000 fb85 	bl	8008d0c <__assert_func>
 8008602:	2301      	movs	r3, #1
 8008604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	bfa4      	itt	ge
 800860e:	4643      	movge	r3, r8
 8008610:	46a0      	movge	r8, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008618:	bfa6      	itte	ge
 800861a:	461c      	movge	r4, r3
 800861c:	2500      	movge	r5, #0
 800861e:	2501      	movlt	r5, #1
 8008620:	f7ff fd3a 	bl	8008098 <_Balloc>
 8008624:	b920      	cbnz	r0, 8008630 <__mdiff+0x5c>
 8008626:	4b2e      	ldr	r3, [pc, #184]	; (80086e0 <__mdiff+0x10c>)
 8008628:	4602      	mov	r2, r0
 800862a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800862e:	e7e5      	b.n	80085fc <__mdiff+0x28>
 8008630:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008634:	6926      	ldr	r6, [r4, #16]
 8008636:	60c5      	str	r5, [r0, #12]
 8008638:	f104 0914 	add.w	r9, r4, #20
 800863c:	f108 0514 	add.w	r5, r8, #20
 8008640:	f100 0e14 	add.w	lr, r0, #20
 8008644:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008648:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800864c:	f108 0210 	add.w	r2, r8, #16
 8008650:	46f2      	mov	sl, lr
 8008652:	2100      	movs	r1, #0
 8008654:	f859 3b04 	ldr.w	r3, [r9], #4
 8008658:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800865c:	fa1f f883 	uxth.w	r8, r3
 8008660:	fa11 f18b 	uxtah	r1, r1, fp
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	eba1 0808 	sub.w	r8, r1, r8
 800866a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800866e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008672:	fa1f f888 	uxth.w	r8, r8
 8008676:	1419      	asrs	r1, r3, #16
 8008678:	454e      	cmp	r6, r9
 800867a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800867e:	f84a 3b04 	str.w	r3, [sl], #4
 8008682:	d8e7      	bhi.n	8008654 <__mdiff+0x80>
 8008684:	1b33      	subs	r3, r6, r4
 8008686:	3b15      	subs	r3, #21
 8008688:	f023 0303 	bic.w	r3, r3, #3
 800868c:	3304      	adds	r3, #4
 800868e:	3415      	adds	r4, #21
 8008690:	42a6      	cmp	r6, r4
 8008692:	bf38      	it	cc
 8008694:	2304      	movcc	r3, #4
 8008696:	441d      	add	r5, r3
 8008698:	4473      	add	r3, lr
 800869a:	469e      	mov	lr, r3
 800869c:	462e      	mov	r6, r5
 800869e:	4566      	cmp	r6, ip
 80086a0:	d30e      	bcc.n	80086c0 <__mdiff+0xec>
 80086a2:	f10c 0203 	add.w	r2, ip, #3
 80086a6:	1b52      	subs	r2, r2, r5
 80086a8:	f022 0203 	bic.w	r2, r2, #3
 80086ac:	3d03      	subs	r5, #3
 80086ae:	45ac      	cmp	ip, r5
 80086b0:	bf38      	it	cc
 80086b2:	2200      	movcc	r2, #0
 80086b4:	441a      	add	r2, r3
 80086b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086ba:	b17b      	cbz	r3, 80086dc <__mdiff+0x108>
 80086bc:	6107      	str	r7, [r0, #16]
 80086be:	e7a3      	b.n	8008608 <__mdiff+0x34>
 80086c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80086c4:	fa11 f288 	uxtah	r2, r1, r8
 80086c8:	1414      	asrs	r4, r2, #16
 80086ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086ce:	b292      	uxth	r2, r2
 80086d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086d4:	f84e 2b04 	str.w	r2, [lr], #4
 80086d8:	1421      	asrs	r1, r4, #16
 80086da:	e7e0      	b.n	800869e <__mdiff+0xca>
 80086dc:	3f01      	subs	r7, #1
 80086de:	e7ea      	b.n	80086b6 <__mdiff+0xe2>
 80086e0:	08009103 	.word	0x08009103
 80086e4:	08009174 	.word	0x08009174

080086e8 <__d2b>:
 80086e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	4689      	mov	r9, r1
 80086ee:	2101      	movs	r1, #1
 80086f0:	ec57 6b10 	vmov	r6, r7, d0
 80086f4:	4690      	mov	r8, r2
 80086f6:	f7ff fccf 	bl	8008098 <_Balloc>
 80086fa:	4604      	mov	r4, r0
 80086fc:	b930      	cbnz	r0, 800870c <__d2b+0x24>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b25      	ldr	r3, [pc, #148]	; (8008798 <__d2b+0xb0>)
 8008702:	4826      	ldr	r0, [pc, #152]	; (800879c <__d2b+0xb4>)
 8008704:	f240 310a 	movw	r1, #778	; 0x30a
 8008708:	f000 fb00 	bl	8008d0c <__assert_func>
 800870c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008714:	bb35      	cbnz	r5, 8008764 <__d2b+0x7c>
 8008716:	2e00      	cmp	r6, #0
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	d028      	beq.n	800876e <__d2b+0x86>
 800871c:	4668      	mov	r0, sp
 800871e:	9600      	str	r6, [sp, #0]
 8008720:	f7ff fd82 	bl	8008228 <__lo0bits>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	b300      	cbz	r0, 800876a <__d2b+0x82>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	f1c0 0320 	rsb	r3, r0, #32
 800872e:	fa02 f303 	lsl.w	r3, r2, r3
 8008732:	430b      	orrs	r3, r1
 8008734:	40c2      	lsrs	r2, r0
 8008736:	6163      	str	r3, [r4, #20]
 8008738:	9201      	str	r2, [sp, #4]
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	61a3      	str	r3, [r4, #24]
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2202      	movne	r2, #2
 8008744:	2201      	moveq	r2, #1
 8008746:	6122      	str	r2, [r4, #16]
 8008748:	b1d5      	cbz	r5, 8008780 <__d2b+0x98>
 800874a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800874e:	4405      	add	r5, r0
 8008750:	f8c9 5000 	str.w	r5, [r9]
 8008754:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008758:	f8c8 0000 	str.w	r0, [r8]
 800875c:	4620      	mov	r0, r4
 800875e:	b003      	add	sp, #12
 8008760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008768:	e7d5      	b.n	8008716 <__d2b+0x2e>
 800876a:	6161      	str	r1, [r4, #20]
 800876c:	e7e5      	b.n	800873a <__d2b+0x52>
 800876e:	a801      	add	r0, sp, #4
 8008770:	f7ff fd5a 	bl	8008228 <__lo0bits>
 8008774:	9b01      	ldr	r3, [sp, #4]
 8008776:	6163      	str	r3, [r4, #20]
 8008778:	2201      	movs	r2, #1
 800877a:	6122      	str	r2, [r4, #16]
 800877c:	3020      	adds	r0, #32
 800877e:	e7e3      	b.n	8008748 <__d2b+0x60>
 8008780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008788:	f8c9 0000 	str.w	r0, [r9]
 800878c:	6918      	ldr	r0, [r3, #16]
 800878e:	f7ff fd2b 	bl	80081e8 <__hi0bits>
 8008792:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008796:	e7df      	b.n	8008758 <__d2b+0x70>
 8008798:	08009103 	.word	0x08009103
 800879c:	08009174 	.word	0x08009174

080087a0 <_calloc_r>:
 80087a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087a2:	fba1 2402 	umull	r2, r4, r1, r2
 80087a6:	b94c      	cbnz	r4, 80087bc <_calloc_r+0x1c>
 80087a8:	4611      	mov	r1, r2
 80087aa:	9201      	str	r2, [sp, #4]
 80087ac:	f000 f87a 	bl	80088a4 <_malloc_r>
 80087b0:	9a01      	ldr	r2, [sp, #4]
 80087b2:	4605      	mov	r5, r0
 80087b4:	b930      	cbnz	r0, 80087c4 <_calloc_r+0x24>
 80087b6:	4628      	mov	r0, r5
 80087b8:	b003      	add	sp, #12
 80087ba:	bd30      	pop	{r4, r5, pc}
 80087bc:	220c      	movs	r2, #12
 80087be:	6002      	str	r2, [r0, #0]
 80087c0:	2500      	movs	r5, #0
 80087c2:	e7f8      	b.n	80087b6 <_calloc_r+0x16>
 80087c4:	4621      	mov	r1, r4
 80087c6:	f7fd fdf3 	bl	80063b0 <memset>
 80087ca:	e7f4      	b.n	80087b6 <_calloc_r+0x16>

080087cc <_free_r>:
 80087cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d044      	beq.n	800885c <_free_r+0x90>
 80087d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d6:	9001      	str	r0, [sp, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f1a1 0404 	sub.w	r4, r1, #4
 80087de:	bfb8      	it	lt
 80087e0:	18e4      	addlt	r4, r4, r3
 80087e2:	f000 fb19 	bl	8008e18 <__malloc_lock>
 80087e6:	4a1e      	ldr	r2, [pc, #120]	; (8008860 <_free_r+0x94>)
 80087e8:	9801      	ldr	r0, [sp, #4]
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	b933      	cbnz	r3, 80087fc <_free_r+0x30>
 80087ee:	6063      	str	r3, [r4, #4]
 80087f0:	6014      	str	r4, [r2, #0]
 80087f2:	b003      	add	sp, #12
 80087f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087f8:	f000 bb14 	b.w	8008e24 <__malloc_unlock>
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d908      	bls.n	8008812 <_free_r+0x46>
 8008800:	6825      	ldr	r5, [r4, #0]
 8008802:	1961      	adds	r1, r4, r5
 8008804:	428b      	cmp	r3, r1
 8008806:	bf01      	itttt	eq
 8008808:	6819      	ldreq	r1, [r3, #0]
 800880a:	685b      	ldreq	r3, [r3, #4]
 800880c:	1949      	addeq	r1, r1, r5
 800880e:	6021      	streq	r1, [r4, #0]
 8008810:	e7ed      	b.n	80087ee <_free_r+0x22>
 8008812:	461a      	mov	r2, r3
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	b10b      	cbz	r3, 800881c <_free_r+0x50>
 8008818:	42a3      	cmp	r3, r4
 800881a:	d9fa      	bls.n	8008812 <_free_r+0x46>
 800881c:	6811      	ldr	r1, [r2, #0]
 800881e:	1855      	adds	r5, r2, r1
 8008820:	42a5      	cmp	r5, r4
 8008822:	d10b      	bne.n	800883c <_free_r+0x70>
 8008824:	6824      	ldr	r4, [r4, #0]
 8008826:	4421      	add	r1, r4
 8008828:	1854      	adds	r4, r2, r1
 800882a:	42a3      	cmp	r3, r4
 800882c:	6011      	str	r1, [r2, #0]
 800882e:	d1e0      	bne.n	80087f2 <_free_r+0x26>
 8008830:	681c      	ldr	r4, [r3, #0]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	6053      	str	r3, [r2, #4]
 8008836:	4421      	add	r1, r4
 8008838:	6011      	str	r1, [r2, #0]
 800883a:	e7da      	b.n	80087f2 <_free_r+0x26>
 800883c:	d902      	bls.n	8008844 <_free_r+0x78>
 800883e:	230c      	movs	r3, #12
 8008840:	6003      	str	r3, [r0, #0]
 8008842:	e7d6      	b.n	80087f2 <_free_r+0x26>
 8008844:	6825      	ldr	r5, [r4, #0]
 8008846:	1961      	adds	r1, r4, r5
 8008848:	428b      	cmp	r3, r1
 800884a:	bf04      	itt	eq
 800884c:	6819      	ldreq	r1, [r3, #0]
 800884e:	685b      	ldreq	r3, [r3, #4]
 8008850:	6063      	str	r3, [r4, #4]
 8008852:	bf04      	itt	eq
 8008854:	1949      	addeq	r1, r1, r5
 8008856:	6021      	streq	r1, [r4, #0]
 8008858:	6054      	str	r4, [r2, #4]
 800885a:	e7ca      	b.n	80087f2 <_free_r+0x26>
 800885c:	b003      	add	sp, #12
 800885e:	bd30      	pop	{r4, r5, pc}
 8008860:	2000041c 	.word	0x2000041c

08008864 <sbrk_aligned>:
 8008864:	b570      	push	{r4, r5, r6, lr}
 8008866:	4e0e      	ldr	r6, [pc, #56]	; (80088a0 <sbrk_aligned+0x3c>)
 8008868:	460c      	mov	r4, r1
 800886a:	6831      	ldr	r1, [r6, #0]
 800886c:	4605      	mov	r5, r0
 800886e:	b911      	cbnz	r1, 8008876 <sbrk_aligned+0x12>
 8008870:	f000 f9e6 	bl	8008c40 <_sbrk_r>
 8008874:	6030      	str	r0, [r6, #0]
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 f9e1 	bl	8008c40 <_sbrk_r>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	d00a      	beq.n	8008898 <sbrk_aligned+0x34>
 8008882:	1cc4      	adds	r4, r0, #3
 8008884:	f024 0403 	bic.w	r4, r4, #3
 8008888:	42a0      	cmp	r0, r4
 800888a:	d007      	beq.n	800889c <sbrk_aligned+0x38>
 800888c:	1a21      	subs	r1, r4, r0
 800888e:	4628      	mov	r0, r5
 8008890:	f000 f9d6 	bl	8008c40 <_sbrk_r>
 8008894:	3001      	adds	r0, #1
 8008896:	d101      	bne.n	800889c <sbrk_aligned+0x38>
 8008898:	f04f 34ff 	mov.w	r4, #4294967295
 800889c:	4620      	mov	r0, r4
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	20000420 	.word	0x20000420

080088a4 <_malloc_r>:
 80088a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	1ccd      	adds	r5, r1, #3
 80088aa:	f025 0503 	bic.w	r5, r5, #3
 80088ae:	3508      	adds	r5, #8
 80088b0:	2d0c      	cmp	r5, #12
 80088b2:	bf38      	it	cc
 80088b4:	250c      	movcc	r5, #12
 80088b6:	2d00      	cmp	r5, #0
 80088b8:	4607      	mov	r7, r0
 80088ba:	db01      	blt.n	80088c0 <_malloc_r+0x1c>
 80088bc:	42a9      	cmp	r1, r5
 80088be:	d905      	bls.n	80088cc <_malloc_r+0x28>
 80088c0:	230c      	movs	r3, #12
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	2600      	movs	r6, #0
 80088c6:	4630      	mov	r0, r6
 80088c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088cc:	4e2e      	ldr	r6, [pc, #184]	; (8008988 <_malloc_r+0xe4>)
 80088ce:	f000 faa3 	bl	8008e18 <__malloc_lock>
 80088d2:	6833      	ldr	r3, [r6, #0]
 80088d4:	461c      	mov	r4, r3
 80088d6:	bb34      	cbnz	r4, 8008926 <_malloc_r+0x82>
 80088d8:	4629      	mov	r1, r5
 80088da:	4638      	mov	r0, r7
 80088dc:	f7ff ffc2 	bl	8008864 <sbrk_aligned>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	4604      	mov	r4, r0
 80088e4:	d14d      	bne.n	8008982 <_malloc_r+0xde>
 80088e6:	6834      	ldr	r4, [r6, #0]
 80088e8:	4626      	mov	r6, r4
 80088ea:	2e00      	cmp	r6, #0
 80088ec:	d140      	bne.n	8008970 <_malloc_r+0xcc>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4631      	mov	r1, r6
 80088f2:	4638      	mov	r0, r7
 80088f4:	eb04 0803 	add.w	r8, r4, r3
 80088f8:	f000 f9a2 	bl	8008c40 <_sbrk_r>
 80088fc:	4580      	cmp	r8, r0
 80088fe:	d13a      	bne.n	8008976 <_malloc_r+0xd2>
 8008900:	6821      	ldr	r1, [r4, #0]
 8008902:	3503      	adds	r5, #3
 8008904:	1a6d      	subs	r5, r5, r1
 8008906:	f025 0503 	bic.w	r5, r5, #3
 800890a:	3508      	adds	r5, #8
 800890c:	2d0c      	cmp	r5, #12
 800890e:	bf38      	it	cc
 8008910:	250c      	movcc	r5, #12
 8008912:	4629      	mov	r1, r5
 8008914:	4638      	mov	r0, r7
 8008916:	f7ff ffa5 	bl	8008864 <sbrk_aligned>
 800891a:	3001      	adds	r0, #1
 800891c:	d02b      	beq.n	8008976 <_malloc_r+0xd2>
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	442b      	add	r3, r5
 8008922:	6023      	str	r3, [r4, #0]
 8008924:	e00e      	b.n	8008944 <_malloc_r+0xa0>
 8008926:	6822      	ldr	r2, [r4, #0]
 8008928:	1b52      	subs	r2, r2, r5
 800892a:	d41e      	bmi.n	800896a <_malloc_r+0xc6>
 800892c:	2a0b      	cmp	r2, #11
 800892e:	d916      	bls.n	800895e <_malloc_r+0xba>
 8008930:	1961      	adds	r1, r4, r5
 8008932:	42a3      	cmp	r3, r4
 8008934:	6025      	str	r5, [r4, #0]
 8008936:	bf18      	it	ne
 8008938:	6059      	strne	r1, [r3, #4]
 800893a:	6863      	ldr	r3, [r4, #4]
 800893c:	bf08      	it	eq
 800893e:	6031      	streq	r1, [r6, #0]
 8008940:	5162      	str	r2, [r4, r5]
 8008942:	604b      	str	r3, [r1, #4]
 8008944:	4638      	mov	r0, r7
 8008946:	f104 060b 	add.w	r6, r4, #11
 800894a:	f000 fa6b 	bl	8008e24 <__malloc_unlock>
 800894e:	f026 0607 	bic.w	r6, r6, #7
 8008952:	1d23      	adds	r3, r4, #4
 8008954:	1af2      	subs	r2, r6, r3
 8008956:	d0b6      	beq.n	80088c6 <_malloc_r+0x22>
 8008958:	1b9b      	subs	r3, r3, r6
 800895a:	50a3      	str	r3, [r4, r2]
 800895c:	e7b3      	b.n	80088c6 <_malloc_r+0x22>
 800895e:	6862      	ldr	r2, [r4, #4]
 8008960:	42a3      	cmp	r3, r4
 8008962:	bf0c      	ite	eq
 8008964:	6032      	streq	r2, [r6, #0]
 8008966:	605a      	strne	r2, [r3, #4]
 8008968:	e7ec      	b.n	8008944 <_malloc_r+0xa0>
 800896a:	4623      	mov	r3, r4
 800896c:	6864      	ldr	r4, [r4, #4]
 800896e:	e7b2      	b.n	80088d6 <_malloc_r+0x32>
 8008970:	4634      	mov	r4, r6
 8008972:	6876      	ldr	r6, [r6, #4]
 8008974:	e7b9      	b.n	80088ea <_malloc_r+0x46>
 8008976:	230c      	movs	r3, #12
 8008978:	603b      	str	r3, [r7, #0]
 800897a:	4638      	mov	r0, r7
 800897c:	f000 fa52 	bl	8008e24 <__malloc_unlock>
 8008980:	e7a1      	b.n	80088c6 <_malloc_r+0x22>
 8008982:	6025      	str	r5, [r4, #0]
 8008984:	e7de      	b.n	8008944 <_malloc_r+0xa0>
 8008986:	bf00      	nop
 8008988:	2000041c 	.word	0x2000041c

0800898c <__sfputc_r>:
 800898c:	6893      	ldr	r3, [r2, #8]
 800898e:	3b01      	subs	r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	b410      	push	{r4}
 8008994:	6093      	str	r3, [r2, #8]
 8008996:	da08      	bge.n	80089aa <__sfputc_r+0x1e>
 8008998:	6994      	ldr	r4, [r2, #24]
 800899a:	42a3      	cmp	r3, r4
 800899c:	db01      	blt.n	80089a2 <__sfputc_r+0x16>
 800899e:	290a      	cmp	r1, #10
 80089a0:	d103      	bne.n	80089aa <__sfputc_r+0x1e>
 80089a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a6:	f7fe ba03 	b.w	8006db0 <__swbuf_r>
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	1c58      	adds	r0, r3, #1
 80089ae:	6010      	str	r0, [r2, #0]
 80089b0:	7019      	strb	r1, [r3, #0]
 80089b2:	4608      	mov	r0, r1
 80089b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <__sfputs_r>:
 80089ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089bc:	4606      	mov	r6, r0
 80089be:	460f      	mov	r7, r1
 80089c0:	4614      	mov	r4, r2
 80089c2:	18d5      	adds	r5, r2, r3
 80089c4:	42ac      	cmp	r4, r5
 80089c6:	d101      	bne.n	80089cc <__sfputs_r+0x12>
 80089c8:	2000      	movs	r0, #0
 80089ca:	e007      	b.n	80089dc <__sfputs_r+0x22>
 80089cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d0:	463a      	mov	r2, r7
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7ff ffda 	bl	800898c <__sfputc_r>
 80089d8:	1c43      	adds	r3, r0, #1
 80089da:	d1f3      	bne.n	80089c4 <__sfputs_r+0xa>
 80089dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089e0 <_vfiprintf_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	460d      	mov	r5, r1
 80089e6:	b09d      	sub	sp, #116	; 0x74
 80089e8:	4614      	mov	r4, r2
 80089ea:	4698      	mov	r8, r3
 80089ec:	4606      	mov	r6, r0
 80089ee:	b118      	cbz	r0, 80089f8 <_vfiprintf_r+0x18>
 80089f0:	6983      	ldr	r3, [r0, #24]
 80089f2:	b90b      	cbnz	r3, 80089f8 <_vfiprintf_r+0x18>
 80089f4:	f7ff fa30 	bl	8007e58 <__sinit>
 80089f8:	4b89      	ldr	r3, [pc, #548]	; (8008c20 <_vfiprintf_r+0x240>)
 80089fa:	429d      	cmp	r5, r3
 80089fc:	d11b      	bne.n	8008a36 <_vfiprintf_r+0x56>
 80089fe:	6875      	ldr	r5, [r6, #4]
 8008a00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a02:	07d9      	lsls	r1, r3, #31
 8008a04:	d405      	bmi.n	8008a12 <_vfiprintf_r+0x32>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	059a      	lsls	r2, r3, #22
 8008a0a:	d402      	bmi.n	8008a12 <_vfiprintf_r+0x32>
 8008a0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0e:	f7ff fac6 	bl	8007f9e <__retarget_lock_acquire_recursive>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	d501      	bpl.n	8008a1c <_vfiprintf_r+0x3c>
 8008a18:	692b      	ldr	r3, [r5, #16]
 8008a1a:	b9eb      	cbnz	r3, 8008a58 <_vfiprintf_r+0x78>
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7fe fa18 	bl	8006e54 <__swsetup_r>
 8008a24:	b1c0      	cbz	r0, 8008a58 <_vfiprintf_r+0x78>
 8008a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a28:	07dc      	lsls	r4, r3, #31
 8008a2a:	d50e      	bpl.n	8008a4a <_vfiprintf_r+0x6a>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	b01d      	add	sp, #116	; 0x74
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	4b7b      	ldr	r3, [pc, #492]	; (8008c24 <_vfiprintf_r+0x244>)
 8008a38:	429d      	cmp	r5, r3
 8008a3a:	d101      	bne.n	8008a40 <_vfiprintf_r+0x60>
 8008a3c:	68b5      	ldr	r5, [r6, #8]
 8008a3e:	e7df      	b.n	8008a00 <_vfiprintf_r+0x20>
 8008a40:	4b79      	ldr	r3, [pc, #484]	; (8008c28 <_vfiprintf_r+0x248>)
 8008a42:	429d      	cmp	r5, r3
 8008a44:	bf08      	it	eq
 8008a46:	68f5      	ldreq	r5, [r6, #12]
 8008a48:	e7da      	b.n	8008a00 <_vfiprintf_r+0x20>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	0598      	lsls	r0, r3, #22
 8008a4e:	d4ed      	bmi.n	8008a2c <_vfiprintf_r+0x4c>
 8008a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a52:	f7ff faa5 	bl	8007fa0 <__retarget_lock_release_recursive>
 8008a56:	e7e9      	b.n	8008a2c <_vfiprintf_r+0x4c>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a66:	2330      	movs	r3, #48	; 0x30
 8008a68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c2c <_vfiprintf_r+0x24c>
 8008a6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a70:	f04f 0901 	mov.w	r9, #1
 8008a74:	4623      	mov	r3, r4
 8008a76:	469a      	mov	sl, r3
 8008a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a7c:	b10a      	cbz	r2, 8008a82 <_vfiprintf_r+0xa2>
 8008a7e:	2a25      	cmp	r2, #37	; 0x25
 8008a80:	d1f9      	bne.n	8008a76 <_vfiprintf_r+0x96>
 8008a82:	ebba 0b04 	subs.w	fp, sl, r4
 8008a86:	d00b      	beq.n	8008aa0 <_vfiprintf_r+0xc0>
 8008a88:	465b      	mov	r3, fp
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff93 	bl	80089ba <__sfputs_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	f000 80aa 	beq.w	8008bee <_vfiprintf_r+0x20e>
 8008a9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a9c:	445a      	add	r2, fp
 8008a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8008aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80a2 	beq.w	8008bee <_vfiprintf_r+0x20e>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab4:	f10a 0a01 	add.w	sl, sl, #1
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	9307      	str	r3, [sp, #28]
 8008abc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ac0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ac2:	4654      	mov	r4, sl
 8008ac4:	2205      	movs	r2, #5
 8008ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aca:	4858      	ldr	r0, [pc, #352]	; (8008c2c <_vfiprintf_r+0x24c>)
 8008acc:	f7f7 fb88 	bl	80001e0 <memchr>
 8008ad0:	9a04      	ldr	r2, [sp, #16]
 8008ad2:	b9d8      	cbnz	r0, 8008b0c <_vfiprintf_r+0x12c>
 8008ad4:	06d1      	lsls	r1, r2, #27
 8008ad6:	bf44      	itt	mi
 8008ad8:	2320      	movmi	r3, #32
 8008ada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ade:	0713      	lsls	r3, r2, #28
 8008ae0:	bf44      	itt	mi
 8008ae2:	232b      	movmi	r3, #43	; 0x2b
 8008ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aec:	2b2a      	cmp	r3, #42	; 0x2a
 8008aee:	d015      	beq.n	8008b1c <_vfiprintf_r+0x13c>
 8008af0:	9a07      	ldr	r2, [sp, #28]
 8008af2:	4654      	mov	r4, sl
 8008af4:	2000      	movs	r0, #0
 8008af6:	f04f 0c0a 	mov.w	ip, #10
 8008afa:	4621      	mov	r1, r4
 8008afc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b00:	3b30      	subs	r3, #48	; 0x30
 8008b02:	2b09      	cmp	r3, #9
 8008b04:	d94e      	bls.n	8008ba4 <_vfiprintf_r+0x1c4>
 8008b06:	b1b0      	cbz	r0, 8008b36 <_vfiprintf_r+0x156>
 8008b08:	9207      	str	r2, [sp, #28]
 8008b0a:	e014      	b.n	8008b36 <_vfiprintf_r+0x156>
 8008b0c:	eba0 0308 	sub.w	r3, r0, r8
 8008b10:	fa09 f303 	lsl.w	r3, r9, r3
 8008b14:	4313      	orrs	r3, r2
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	46a2      	mov	sl, r4
 8008b1a:	e7d2      	b.n	8008ac2 <_vfiprintf_r+0xe2>
 8008b1c:	9b03      	ldr	r3, [sp, #12]
 8008b1e:	1d19      	adds	r1, r3, #4
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	9103      	str	r1, [sp, #12]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	bfbb      	ittet	lt
 8008b28:	425b      	neglt	r3, r3
 8008b2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2e:	9307      	strge	r3, [sp, #28]
 8008b30:	9307      	strlt	r3, [sp, #28]
 8008b32:	bfb8      	it	lt
 8008b34:	9204      	strlt	r2, [sp, #16]
 8008b36:	7823      	ldrb	r3, [r4, #0]
 8008b38:	2b2e      	cmp	r3, #46	; 0x2e
 8008b3a:	d10c      	bne.n	8008b56 <_vfiprintf_r+0x176>
 8008b3c:	7863      	ldrb	r3, [r4, #1]
 8008b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b40:	d135      	bne.n	8008bae <_vfiprintf_r+0x1ce>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	1d1a      	adds	r2, r3, #4
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	9203      	str	r2, [sp, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	bfb8      	it	lt
 8008b4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b52:	3402      	adds	r4, #2
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c3c <_vfiprintf_r+0x25c>
 8008b5a:	7821      	ldrb	r1, [r4, #0]
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	4650      	mov	r0, sl
 8008b60:	f7f7 fb3e 	bl	80001e0 <memchr>
 8008b64:	b140      	cbz	r0, 8008b78 <_vfiprintf_r+0x198>
 8008b66:	2340      	movs	r3, #64	; 0x40
 8008b68:	eba0 000a 	sub.w	r0, r0, sl
 8008b6c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b70:	9b04      	ldr	r3, [sp, #16]
 8008b72:	4303      	orrs	r3, r0
 8008b74:	3401      	adds	r4, #1
 8008b76:	9304      	str	r3, [sp, #16]
 8008b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7c:	482c      	ldr	r0, [pc, #176]	; (8008c30 <_vfiprintf_r+0x250>)
 8008b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b82:	2206      	movs	r2, #6
 8008b84:	f7f7 fb2c 	bl	80001e0 <memchr>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d03f      	beq.n	8008c0c <_vfiprintf_r+0x22c>
 8008b8c:	4b29      	ldr	r3, [pc, #164]	; (8008c34 <_vfiprintf_r+0x254>)
 8008b8e:	bb1b      	cbnz	r3, 8008bd8 <_vfiprintf_r+0x1f8>
 8008b90:	9b03      	ldr	r3, [sp, #12]
 8008b92:	3307      	adds	r3, #7
 8008b94:	f023 0307 	bic.w	r3, r3, #7
 8008b98:	3308      	adds	r3, #8
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9e:	443b      	add	r3, r7
 8008ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ba2:	e767      	b.n	8008a74 <_vfiprintf_r+0x94>
 8008ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba8:	460c      	mov	r4, r1
 8008baa:	2001      	movs	r0, #1
 8008bac:	e7a5      	b.n	8008afa <_vfiprintf_r+0x11a>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	3401      	adds	r4, #1
 8008bb2:	9305      	str	r3, [sp, #20]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f04f 0c0a 	mov.w	ip, #10
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc0:	3a30      	subs	r2, #48	; 0x30
 8008bc2:	2a09      	cmp	r2, #9
 8008bc4:	d903      	bls.n	8008bce <_vfiprintf_r+0x1ee>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0c5      	beq.n	8008b56 <_vfiprintf_r+0x176>
 8008bca:	9105      	str	r1, [sp, #20]
 8008bcc:	e7c3      	b.n	8008b56 <_vfiprintf_r+0x176>
 8008bce:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e7f0      	b.n	8008bba <_vfiprintf_r+0x1da>
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	462a      	mov	r2, r5
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <_vfiprintf_r+0x258>)
 8008be0:	a904      	add	r1, sp, #16
 8008be2:	4630      	mov	r0, r6
 8008be4:	f7fd fc8c 	bl	8006500 <_printf_float>
 8008be8:	4607      	mov	r7, r0
 8008bea:	1c78      	adds	r0, r7, #1
 8008bec:	d1d6      	bne.n	8008b9c <_vfiprintf_r+0x1bc>
 8008bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bf0:	07d9      	lsls	r1, r3, #31
 8008bf2:	d405      	bmi.n	8008c00 <_vfiprintf_r+0x220>
 8008bf4:	89ab      	ldrh	r3, [r5, #12]
 8008bf6:	059a      	lsls	r2, r3, #22
 8008bf8:	d402      	bmi.n	8008c00 <_vfiprintf_r+0x220>
 8008bfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bfc:	f7ff f9d0 	bl	8007fa0 <__retarget_lock_release_recursive>
 8008c00:	89ab      	ldrh	r3, [r5, #12]
 8008c02:	065b      	lsls	r3, r3, #25
 8008c04:	f53f af12 	bmi.w	8008a2c <_vfiprintf_r+0x4c>
 8008c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c0a:	e711      	b.n	8008a30 <_vfiprintf_r+0x50>
 8008c0c:	ab03      	add	r3, sp, #12
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	462a      	mov	r2, r5
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <_vfiprintf_r+0x258>)
 8008c14:	a904      	add	r1, sp, #16
 8008c16:	4630      	mov	r0, r6
 8008c18:	f7fd ff16 	bl	8006a48 <_printf_i>
 8008c1c:	e7e4      	b.n	8008be8 <_vfiprintf_r+0x208>
 8008c1e:	bf00      	nop
 8008c20:	08009134 	.word	0x08009134
 8008c24:	08009154 	.word	0x08009154
 8008c28:	08009114 	.word	0x08009114
 8008c2c:	080092cc 	.word	0x080092cc
 8008c30:	080092d6 	.word	0x080092d6
 8008c34:	08006501 	.word	0x08006501
 8008c38:	080089bb 	.word	0x080089bb
 8008c3c:	080092d2 	.word	0x080092d2

08008c40 <_sbrk_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d06      	ldr	r5, [pc, #24]	; (8008c5c <_sbrk_r+0x1c>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	602b      	str	r3, [r5, #0]
 8008c4c:	f7f8 fe54 	bl	80018f8 <_sbrk>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	d102      	bne.n	8008c5a <_sbrk_r+0x1a>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b103      	cbz	r3, 8008c5a <_sbrk_r+0x1a>
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	20000424 	.word	0x20000424

08008c60 <__sread>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	460c      	mov	r4, r1
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	f000 f8e2 	bl	8008e30 <_read_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	bfab      	itete	ge
 8008c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c72:	89a3      	ldrhlt	r3, [r4, #12]
 8008c74:	181b      	addge	r3, r3, r0
 8008c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c7a:	bfac      	ite	ge
 8008c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c7e:	81a3      	strhlt	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__swrite>:
 8008c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	461f      	mov	r7, r3
 8008c88:	898b      	ldrh	r3, [r1, #12]
 8008c8a:	05db      	lsls	r3, r3, #23
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	4616      	mov	r6, r2
 8008c92:	d505      	bpl.n	8008ca0 <__swrite+0x1e>
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	2302      	movs	r3, #2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f000 f898 	bl	8008dd0 <_lseek_r>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	f000 b817 	b.w	8008ce8 <_write_r>

08008cba <__sseek>:
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 f885 	bl	8008dd0 <_lseek_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	bf15      	itete	ne
 8008ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cd6:	81a3      	strheq	r3, [r4, #12]
 8008cd8:	bf18      	it	ne
 8008cda:	81a3      	strhne	r3, [r4, #12]
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <__sclose>:
 8008cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce2:	f000 b831 	b.w	8008d48 <_close_r>
	...

08008ce8 <_write_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d07      	ldr	r5, [pc, #28]	; (8008d08 <_write_r+0x20>)
 8008cec:	4604      	mov	r4, r0
 8008cee:	4608      	mov	r0, r1
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	602a      	str	r2, [r5, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f7f8 fdad 	bl	8001856 <_write>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_write_r+0x1e>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_write_r+0x1e>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20000424 	.word	0x20000424

08008d0c <__assert_func>:
 8008d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d0e:	4614      	mov	r4, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4b09      	ldr	r3, [pc, #36]	; (8008d38 <__assert_func+0x2c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	68d8      	ldr	r0, [r3, #12]
 8008d1a:	b14c      	cbz	r4, 8008d30 <__assert_func+0x24>
 8008d1c:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <__assert_func+0x30>)
 8008d1e:	9100      	str	r1, [sp, #0]
 8008d20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d24:	4906      	ldr	r1, [pc, #24]	; (8008d40 <__assert_func+0x34>)
 8008d26:	462b      	mov	r3, r5
 8008d28:	f000 f81e 	bl	8008d68 <fiprintf>
 8008d2c:	f000 f89f 	bl	8008e6e <abort>
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <__assert_func+0x38>)
 8008d32:	461c      	mov	r4, r3
 8008d34:	e7f3      	b.n	8008d1e <__assert_func+0x12>
 8008d36:	bf00      	nop
 8008d38:	20000040 	.word	0x20000040
 8008d3c:	080092dd 	.word	0x080092dd
 8008d40:	080092ea 	.word	0x080092ea
 8008d44:	08009318 	.word	0x08009318

08008d48 <_close_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	; (8008d64 <_close_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f8 fd9b 	bl	800188e <_close>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_close_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_close_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20000424 	.word	0x20000424

08008d68 <fiprintf>:
 8008d68:	b40e      	push	{r1, r2, r3}
 8008d6a:	b503      	push	{r0, r1, lr}
 8008d6c:	4601      	mov	r1, r0
 8008d6e:	ab03      	add	r3, sp, #12
 8008d70:	4805      	ldr	r0, [pc, #20]	; (8008d88 <fiprintf+0x20>)
 8008d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d76:	6800      	ldr	r0, [r0, #0]
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	f7ff fe31 	bl	80089e0 <_vfiprintf_r>
 8008d7e:	b002      	add	sp, #8
 8008d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d84:	b003      	add	sp, #12
 8008d86:	4770      	bx	lr
 8008d88:	20000040 	.word	0x20000040

08008d8c <_fstat_r>:
 8008d8c:	b538      	push	{r3, r4, r5, lr}
 8008d8e:	4d07      	ldr	r5, [pc, #28]	; (8008dac <_fstat_r+0x20>)
 8008d90:	2300      	movs	r3, #0
 8008d92:	4604      	mov	r4, r0
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	602b      	str	r3, [r5, #0]
 8008d9a:	f7f8 fd84 	bl	80018a6 <_fstat>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	d102      	bne.n	8008da8 <_fstat_r+0x1c>
 8008da2:	682b      	ldr	r3, [r5, #0]
 8008da4:	b103      	cbz	r3, 8008da8 <_fstat_r+0x1c>
 8008da6:	6023      	str	r3, [r4, #0]
 8008da8:	bd38      	pop	{r3, r4, r5, pc}
 8008daa:	bf00      	nop
 8008dac:	20000424 	.word	0x20000424

08008db0 <_isatty_r>:
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4d06      	ldr	r5, [pc, #24]	; (8008dcc <_isatty_r+0x1c>)
 8008db4:	2300      	movs	r3, #0
 8008db6:	4604      	mov	r4, r0
 8008db8:	4608      	mov	r0, r1
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	f7f8 fd83 	bl	80018c6 <_isatty>
 8008dc0:	1c43      	adds	r3, r0, #1
 8008dc2:	d102      	bne.n	8008dca <_isatty_r+0x1a>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	b103      	cbz	r3, 8008dca <_isatty_r+0x1a>
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
 8008dcc:	20000424 	.word	0x20000424

08008dd0 <_lseek_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d07      	ldr	r5, [pc, #28]	; (8008df0 <_lseek_r+0x20>)
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	4608      	mov	r0, r1
 8008dd8:	4611      	mov	r1, r2
 8008dda:	2200      	movs	r2, #0
 8008ddc:	602a      	str	r2, [r5, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	f7f8 fd7c 	bl	80018dc <_lseek>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d102      	bne.n	8008dee <_lseek_r+0x1e>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	b103      	cbz	r3, 8008dee <_lseek_r+0x1e>
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	bd38      	pop	{r3, r4, r5, pc}
 8008df0:	20000424 	.word	0x20000424

08008df4 <__ascii_mbtowc>:
 8008df4:	b082      	sub	sp, #8
 8008df6:	b901      	cbnz	r1, 8008dfa <__ascii_mbtowc+0x6>
 8008df8:	a901      	add	r1, sp, #4
 8008dfa:	b142      	cbz	r2, 8008e0e <__ascii_mbtowc+0x1a>
 8008dfc:	b14b      	cbz	r3, 8008e12 <__ascii_mbtowc+0x1e>
 8008dfe:	7813      	ldrb	r3, [r2, #0]
 8008e00:	600b      	str	r3, [r1, #0]
 8008e02:	7812      	ldrb	r2, [r2, #0]
 8008e04:	1e10      	subs	r0, r2, #0
 8008e06:	bf18      	it	ne
 8008e08:	2001      	movne	r0, #1
 8008e0a:	b002      	add	sp, #8
 8008e0c:	4770      	bx	lr
 8008e0e:	4610      	mov	r0, r2
 8008e10:	e7fb      	b.n	8008e0a <__ascii_mbtowc+0x16>
 8008e12:	f06f 0001 	mvn.w	r0, #1
 8008e16:	e7f8      	b.n	8008e0a <__ascii_mbtowc+0x16>

08008e18 <__malloc_lock>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__malloc_lock+0x8>)
 8008e1a:	f7ff b8c0 	b.w	8007f9e <__retarget_lock_acquire_recursive>
 8008e1e:	bf00      	nop
 8008e20:	20000418 	.word	0x20000418

08008e24 <__malloc_unlock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__malloc_unlock+0x8>)
 8008e26:	f7ff b8bb 	b.w	8007fa0 <__retarget_lock_release_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	20000418 	.word	0x20000418

08008e30 <_read_r>:
 8008e30:	b538      	push	{r3, r4, r5, lr}
 8008e32:	4d07      	ldr	r5, [pc, #28]	; (8008e50 <_read_r+0x20>)
 8008e34:	4604      	mov	r4, r0
 8008e36:	4608      	mov	r0, r1
 8008e38:	4611      	mov	r1, r2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	602a      	str	r2, [r5, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f7f8 fcec 	bl	800181c <_read>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d102      	bne.n	8008e4e <_read_r+0x1e>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	b103      	cbz	r3, 8008e4e <_read_r+0x1e>
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	bd38      	pop	{r3, r4, r5, pc}
 8008e50:	20000424 	.word	0x20000424

08008e54 <__ascii_wctomb>:
 8008e54:	b149      	cbz	r1, 8008e6a <__ascii_wctomb+0x16>
 8008e56:	2aff      	cmp	r2, #255	; 0xff
 8008e58:	bf85      	ittet	hi
 8008e5a:	238a      	movhi	r3, #138	; 0x8a
 8008e5c:	6003      	strhi	r3, [r0, #0]
 8008e5e:	700a      	strbls	r2, [r1, #0]
 8008e60:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e64:	bf98      	it	ls
 8008e66:	2001      	movls	r0, #1
 8008e68:	4770      	bx	lr
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4770      	bx	lr

08008e6e <abort>:
 8008e6e:	b508      	push	{r3, lr}
 8008e70:	2006      	movs	r0, #6
 8008e72:	f000 f82b 	bl	8008ecc <raise>
 8008e76:	2001      	movs	r0, #1
 8008e78:	f7f8 fcc6 	bl	8001808 <_exit>

08008e7c <_raise_r>:
 8008e7c:	291f      	cmp	r1, #31
 8008e7e:	b538      	push	{r3, r4, r5, lr}
 8008e80:	4604      	mov	r4, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	d904      	bls.n	8008e90 <_raise_r+0x14>
 8008e86:	2316      	movs	r3, #22
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e92:	b112      	cbz	r2, 8008e9a <_raise_r+0x1e>
 8008e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e98:	b94b      	cbnz	r3, 8008eae <_raise_r+0x32>
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f830 	bl	8008f00 <_getpid_r>
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eaa:	f000 b817 	b.w	8008edc <_kill_r>
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d00a      	beq.n	8008ec8 <_raise_r+0x4c>
 8008eb2:	1c59      	adds	r1, r3, #1
 8008eb4:	d103      	bne.n	8008ebe <_raise_r+0x42>
 8008eb6:	2316      	movs	r3, #22
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7e7      	b.n	8008e8e <_raise_r+0x12>
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	4798      	blx	r3
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7e0      	b.n	8008e8e <_raise_r+0x12>

08008ecc <raise>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <raise+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f7ff bfd3 	b.w	8008e7c <_raise_r>
 8008ed6:	bf00      	nop
 8008ed8:	20000040 	.word	0x20000040

08008edc <_kill_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_kill_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	f7f8 fc7d 	bl	80017e8 <_kill>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_kill_r+0x1c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_kill_r+0x1c>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	20000424 	.word	0x20000424

08008f00 <_getpid_r>:
 8008f00:	f7f8 bc6a 	b.w	80017d8 <_getpid>

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
