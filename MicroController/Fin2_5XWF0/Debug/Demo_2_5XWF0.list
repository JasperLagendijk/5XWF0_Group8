
Demo_2_5XWF0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08008ed8  08008ed8  00018ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800938c  0800938c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800938c  0800938c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800938c  0800938c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08009394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00000218  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a83  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ad  00000000  00000000  00031cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00034ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d131  00000000  00000000  00035e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012dc3  00000000  00000000  00052fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad5a5  00000000  00000000  00065d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00113321  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005270  00000000  00000000  00113374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ebc 	.word	0x08008ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08008ebc 	.word	0x08008ebc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch,FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFF);
 8000bb0:	1d39      	adds	r1, r7, #4
 8000bb2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <__io_putchar+0x20>)
 8000bba:	f005 f830 	bl	8005c1e <HAL_UART_Transmit>

    return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000358 	.word	0x20000358

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fedf 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f939 	bl	8000e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 fb93 	bl	8001304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bde:	f000 fb43 	bl	8001268 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000be2:	f000 fb71 	bl	80012c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000be6:	f000 f98b 	bl	8000f00 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000bea:	f000 fa17 	bl	800101c <MX_TIM1_Init>
  MX_TIM16_Init();
 8000bee:	f000 fac1 	bl	8001174 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  printf("%s",TxStartMessage);
 8000bf2:	497c      	ldr	r1, [pc, #496]	; (8000de4 <main+0x218>)
 8000bf4:	487c      	ldr	r0, [pc, #496]	; (8000de8 <main+0x21c>)
 8000bf6:	f006 f829 	bl	8006c4c <iprintf>

  //DC-AC PWM
  PWM_Period_AC = 64000000/(PWM_Freq_AC)-1;
 8000bfa:	4b7c      	ldr	r3, [pc, #496]	; (8000dec <main+0x220>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a7c      	ldr	r2, [pc, #496]	; (8000df0 <main+0x224>)
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	3b01      	subs	r3, #1
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b7a      	ldr	r3, [pc, #488]	; (8000df4 <main+0x228>)
 8000c0a:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth_AC = (int)((PWM_Period_AC*PWM_DutyC_AC)/100);
 8000c0c:	4b79      	ldr	r3, [pc, #484]	; (8000df4 <main+0x228>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	4b77      	ldr	r3, [pc, #476]	; (8000df8 <main+0x22c>)
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c22:	eddf 6a76 	vldr	s13, [pc, #472]	; 8000dfc <main+0x230>
 8000c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c2e:	ee17 2a90 	vmov	r2, s15
 8000c32:	4b73      	ldr	r3, [pc, #460]	; (8000e00 <main+0x234>)
 8000c34:	601a      	str	r2, [r3, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim16, PWM_Period_AC);
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <main+0x228>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <main+0x238>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c40:	4b6c      	ldr	r3, [pc, #432]	; (8000df4 <main+0x228>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b6f      	ldr	r3, [pc, #444]	; (8000e04 <main+0x238>)
 8000c48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM_PulseWidth_AC);
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <main+0x234>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b6d      	ldr	r3, [pc, #436]	; (8000e04 <main+0x238>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	486b      	ldr	r0, [pc, #428]	; (8000e04 <main+0x238>)
 8000c58:	f003 ff3a 	bl	8004ad0 <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim16, TIM_CHANNEL_1);			//TIM16 CH1N
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4869      	ldr	r0, [pc, #420]	; (8000e04 <main+0x238>)
 8000c60:	f004 fdde 	bl	8005820 <HAL_TIMEx_PWMN_Start>

  //DC-DC PWM
  PWM_Period_DC = 64000000/(2*PWM_Freq_DC)-1;
 8000c64:	4b68      	ldr	r3, [pc, #416]	; (8000e08 <main+0x23c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4a61      	ldr	r2, [pc, #388]	; (8000df0 <main+0x224>)
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	3b01      	subs	r3, #1
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b65      	ldr	r3, [pc, #404]	; (8000e0c <main+0x240>)
 8000c76:	601a      	str	r2, [r3, #0]
  PWM_PulseWidth_DC = (int)((PWM_Period_DC*PWM_DutyC_DC)/100);
 8000c78:	4b64      	ldr	r3, [pc, #400]	; (8000e0c <main+0x240>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c84:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <main+0x244>)
 8000c86:	edd3 7a00 	vldr	s15, [r3]
 8000c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c8e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8000dfc <main+0x230>
 8000c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c9a:	ee17 2a90 	vmov	r2, s15
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <main+0x248>)
 8000ca0:	601a      	str	r2, [r3, #0]

  __HAL_TIM_SET_AUTORELOAD(&htim1, PWM_Period_DC);
 8000ca2:	4b5a      	ldr	r3, [pc, #360]	; (8000e0c <main+0x240>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <main+0x24c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cac:	4b57      	ldr	r3, [pc, #348]	; (8000e0c <main+0x240>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <main+0x24c>)
 8000cb4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DC);
 8000cb6:	4b57      	ldr	r3, [pc, #348]	; (8000e14 <main+0x248>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <main+0x24c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4855      	ldr	r0, [pc, #340]	; (8000e18 <main+0x24c>)
 8000cc4:	f003 ff04 	bl	8004ad0 <HAL_TIM_PWM_Start>

  //ADC Init
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4854      	ldr	r0, [pc, #336]	; (8000e1c <main+0x250>)
 8000ccc:	f001 f96c 	bl	8001fa8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Buff, 3);
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4953      	ldr	r1, [pc, #332]	; (8000e20 <main+0x254>)
 8000cd4:	4851      	ldr	r0, [pc, #324]	; (8000e1c <main+0x250>)
 8000cd6:	f001 f88d 	bl	8001df4 <HAL_ADC_Start_DMA>
  //MPPT

  float I_in = meas_volt_1;		// have to convert to Amps (look it up)
 8000cda:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <main+0x258>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	60fb      	str	r3, [r7, #12]
  float V_in = meas_volt_3;	// Starting value input voltage in V
 8000ce0:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <main+0x25c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60bb      	str	r3, [r7, #8]
  float P_in = I_in*V_in;
 8000ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000cea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cf2:	edc7 7a01 	vstr	s15, [r7, #4]

  while (1)
  {


	  printf("The new D again: %.2f\r\n", PWM_DutyC_DC);
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <main+0x244>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc24 	bl	8000548 <__aeabi_f2d>
 8000d00:	4602      	mov	r2, r0
 8000d02:	460b      	mov	r3, r1
 8000d04:	4849      	ldr	r0, [pc, #292]	; (8000e2c <main+0x260>)
 8000d06:	f005 ffa1 	bl	8006c4c <iprintf>
//	  PWM_DutyC_DC = meas_volt_1*11.1f;
//	  printf("ADC Voltage: %.2f V - Duty Cycle %d\r\n", meas_volt_1, (int)PWM_DutyC_DC);


	  // Creating PWM for DC-AC
	  PWM_PulseWidth_AC = (int)((PWM_Period_AC*PWM_DutyC_AC)/100);
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <main+0x228>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d16:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <main+0x22c>)
 8000d18:	edd3 7a00 	vldr	s15, [r3]
 8000d1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d20:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000dfc <main+0x230>
 8000d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2c:	ee17 2a90 	vmov	r2, s15
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <main+0x234>)
 8000d32:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, PWM_PulseWidth_AC);
 8000d34:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <main+0x234>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <main+0x238>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	635a      	str	r2, [r3, #52]	; 0x34

	  // Creating PWM for DC-DC
//	  PWM_DutyC_DC = MPPT(&I_in, &V_in, &P_in, PWM_DutyC_DC);	// MPPT
	  PWM_PulseWidth_DC = (int)((PWM_Period_DC*PWM_DutyC_DC)/100);
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <main+0x240>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4a:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <main+0x244>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d54:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000dfc <main+0x230>
 8000d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d60:	ee17 2a90 	vmov	r2, s15
 8000d64:	4b2b      	ldr	r3, [pc, #172]	; (8000e14 <main+0x248>)
 8000d66:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_PulseWidth_DC);
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <main+0x248>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <main+0x24c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34

	  printf("Test\r\n");
 8000d72:	482f      	ldr	r0, [pc, #188]	; (8000e30 <main+0x264>)
 8000d74:	f005 fff0 	bl	8006d58 <puts>
	  printf("Duty Cycle DC: %.2f\r\n", PWM_DutyC_DC);
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <main+0x244>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fbe3 	bl	8000548 <__aeabi_f2d>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	482b      	ldr	r0, [pc, #172]	; (8000e34 <main+0x268>)
 8000d88:	f005 ff60 	bl	8006c4c <iprintf>
	  printf("Duty Cycle AC: %.2f\r\n", PWM_DutyC_AC);
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <main+0x22c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbd9 	bl	8000548 <__aeabi_f2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4827      	ldr	r0, [pc, #156]	; (8000e38 <main+0x26c>)
 8000d9c:	f005 ff56 	bl	8006c4c <iprintf>
	  printf("ADC1/1: %.2f V\r\n", meas_volt_1);
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <main+0x258>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fbcf 	bl	8000548 <__aeabi_f2d>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4823      	ldr	r0, [pc, #140]	; (8000e3c <main+0x270>)
 8000db0:	f005 ff4c 	bl	8006c4c <iprintf>
	  printf("ADC1/2: %.2f V\r\n", meas_volt_2);
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <main+0x274>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbc5 	bl	8000548 <__aeabi_f2d>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4820      	ldr	r0, [pc, #128]	; (8000e44 <main+0x278>)
 8000dc4:	f005 ff42 	bl	8006c4c <iprintf>
	  printf("ADC1/4: %.2f V\r\n", meas_volt_3);
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <main+0x25c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fbbb 	bl	8000548 <__aeabi_f2d>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <main+0x27c>)
 8000dd8:	f005 ff38 	bl	8006c4c <iprintf>

	  HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	; 0x64
 8000dde:	f000 fe3f 	bl	8001a60 <HAL_Delay>
	  printf("The new D again: %.2f\r\n", PWM_DutyC_DC);
 8000de2:	e788      	b.n	8000cf6 <main+0x12a>
 8000de4:	20000000 	.word	0x20000000
 8000de8:	08008ed8 	.word	0x08008ed8
 8000dec:	2000002c 	.word	0x2000002c
 8000df0:	03d09000 	.word	0x03d09000
 8000df4:	20000408 	.word	0x20000408
 8000df8:	20000030 	.word	0x20000030
 8000dfc:	42c80000 	.word	0x42c80000
 8000e00:	2000040c 	.word	0x2000040c
 8000e04:	2000030c 	.word	0x2000030c
 8000e08:	20000024 	.word	0x20000024
 8000e0c:	20000400 	.word	0x20000400
 8000e10:	20000028 	.word	0x20000028
 8000e14:	20000404 	.word	0x20000404
 8000e18:	200002c0 	.word	0x200002c0
 8000e1c:	2000022c 	.word	0x2000022c
 8000e20:	200003dc 	.word	0x200003dc
 8000e24:	200003f4 	.word	0x200003f4
 8000e28:	200003fc 	.word	0x200003fc
 8000e2c:	08008edc 	.word	0x08008edc
 8000e30:	08008ef4 	.word	0x08008ef4
 8000e34:	08008efc 	.word	0x08008efc
 8000e38:	08008f14 	.word	0x08008f14
 8000e3c:	08008f2c 	.word	0x08008f2c
 8000e40:	200003f8 	.word	0x200003f8
 8000e44:	08008f40 	.word	0x08008f40
 8000e48:	08008f54 	.word	0x08008f54

08000e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b096      	sub	sp, #88	; 0x58
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e56:	2228      	movs	r2, #40	; 0x28
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f005 fa84 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e80:	2302      	movs	r3, #2
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e84:	2301      	movs	r3, #1
 8000e86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e90:	2300      	movs	r3, #0
 8000e92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e94:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f9c4 	bl	800322c <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000eaa:	f000 fab7 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 f9ec 	bl	80042a8 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ed6:	f000 faa1 	bl	800141c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f003 fc14 	bl	8004714 <HAL_RCCEx_PeriphCLKConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ef2:	f000 fa93 	bl	800141c <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3758      	adds	r7, #88	; 0x58
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
 8000f20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f22:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f38:	4b37      	ldr	r3, [pc, #220]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f4c:	4b32      	ldr	r3, [pc, #200]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f56:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f82:	4825      	ldr	r0, [pc, #148]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f84:	f000 fda4 	bl	8001ad0 <HAL_ADC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000f8e:	f000 fa45 	bl	800141c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <MX_ADC1_Init+0x118>)
 8000f9e:	f001 fb35 	bl	800260c <HAL_ADCEx_MultiModeConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fa8:	f000 fa38 	bl	800141c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4813      	ldr	r0, [pc, #76]	; (8001018 <MX_ADC1_Init+0x118>)
 8000fca:	f001 f85f 	bl	800208c <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000fd4:	f000 fa22 	bl	800141c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <MX_ADC1_Init+0x118>)
 8000fe6:	f001 f851 	bl	800208c <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000ff0:	f000 fa14 	bl	800141c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_ADC1_Init+0x118>)
 8001002:	f001 f843 	bl	800208c <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 800100c:	f000 fa06 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000022c 	.word	0x2000022c

0800101c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b09a      	sub	sp, #104	; 0x68
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	222c      	movs	r2, #44	; 0x2c
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f005 f986 	bl	8006368 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <MX_TIM1_Init+0x150>)
 800105e:	4a44      	ldr	r2, [pc, #272]	; (8001170 <MX_TIM1_Init+0x154>)
 8001060:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <MX_TIM1_Init+0x150>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001068:	4b40      	ldr	r3, [pc, #256]	; (800116c <MX_TIM1_Init+0x150>)
 800106a:	2220      	movs	r2, #32
 800106c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <MX_TIM1_Init+0x150>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <MX_TIM1_Init+0x150>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <MX_TIM1_Init+0x150>)
 800107e:	2201      	movs	r2, #1
 8001080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <MX_TIM1_Init+0x150>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001088:	4838      	ldr	r0, [pc, #224]	; (800116c <MX_TIM1_Init+0x150>)
 800108a:	f003 fc69 	bl	8004960 <HAL_TIM_Base_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001094:	f000 f9c2 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a2:	4619      	mov	r1, r3
 80010a4:	4831      	ldr	r0, [pc, #196]	; (800116c <MX_TIM1_Init+0x150>)
 80010a6:	f003 ff13 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010b0:	f000 f9b4 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b4:	482d      	ldr	r0, [pc, #180]	; (800116c <MX_TIM1_Init+0x150>)
 80010b6:	f003 fcaa 	bl	8004a0e <HAL_TIM_PWM_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010c0:	f000 f9ac 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010c4:	2320      	movs	r3, #32
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d4:	4619      	mov	r1, r3
 80010d6:	4825      	ldr	r0, [pc, #148]	; (800116c <MX_TIM1_Init+0x150>)
 80010d8:	f004 fc48 	bl	800596c <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010e2:	f000 f99b 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_TIM1_Init+0x150>)
 800110c:	f003 fdcc 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001116:	f000 f981 	bl	800141c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800112e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001132:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800113c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <MX_TIM1_Init+0x150>)
 8001150:	f004 fc7a 	bl	8005a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800115a:	f000 f95f 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM1_Init+0x150>)
 8001160:	f000 fa22 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8001164:	bf00      	nop
 8001166:	3768      	adds	r7, #104	; 0x68
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200002c0 	.word	0x200002c0
 8001170:	40012c00 	.word	0x40012c00

08001174 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b092      	sub	sp, #72	; 0x48
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800117a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	222c      	movs	r2, #44	; 0x2c
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 f8e7 	bl	8006368 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <MX_TIM16_Init+0xec>)
 800119c:	4a31      	ldr	r2, [pc, #196]	; (8001264 <MX_TIM16_Init+0xf0>)
 800119e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_TIM16_Init+0xec>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <MX_TIM16_Init+0xec>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_TIM16_Init+0xec>)
 80011ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM16_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_TIM16_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_TIM16_Init+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011c6:	4826      	ldr	r0, [pc, #152]	; (8001260 <MX_TIM16_Init+0xec>)
 80011c8:	f003 fbca 	bl	8004960 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80011d2:	f000 f923 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_TIM16_Init+0xec>)
 80011d8:	f003 fc19 	bl	8004a0e <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80011e2:	f000 f91b 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	; 0x60
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011f2:	2300      	movs	r3, #0
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	4815      	ldr	r0, [pc, #84]	; (8001260 <MX_TIM16_Init+0xec>)
 800120c:	f003 fd4c 	bl	8004ca8 <HAL_TIM_PWM_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001216:	f000 f901 	bl	800141c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 10;
 8001226:	230a      	movs	r3, #10
 8001228:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <MX_TIM16_Init+0xec>)
 8001242:	f004 fc01 	bl	8005a48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800124c:	f000 f8e6 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <MX_TIM16_Init+0xec>)
 8001252:	f000 f9a9 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 8001256:	bf00      	nop
 8001258:	3748      	adds	r7, #72	; 0x48
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000030c 	.word	0x2000030c
 8001264:	40014400 	.word	0x40014400

08001268 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <MX_USART2_UART_Init+0x5c>)
 8001270:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001278:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART2_UART_Init+0x58>)
 80012ac:	f004 fc69 	bl	8005b82 <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012b6:	f000 f8b1 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000358 	.word	0x20000358
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_DMA_Init+0x38>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <MX_DMA_Init+0x38>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_DMA_Init+0x38>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	200b      	movs	r0, #11
 80012ec:	f001 fc5f 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f0:	200b      	movs	r0, #11
 80012f2:	f001 fc78 	bl	8002be6 <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_GPIO_Init+0x5c>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	6153      	str	r3, [r2, #20]
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6153      	str	r3, [r2, #20]
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_GPIO_Init+0x5c>)
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6153      	str	r3, [r2, #20]
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_GPIO_Init+0x5c>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000

08001364 <HAL_ADC_ConvCpltCallback>:
	printf("New D: %.2f\r\n", D);
	return D;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	// Prevent unused argument(s) compilation warning
	UNUSED(hadc);

		adc_val_1 = ADC_Buff[0];	//DC-DC Current sensor output value
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x94>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <HAL_ADC_ConvCpltCallback+0x98>)
 8001372:	6013      	str	r3, [r2, #0]
		adc_val_2 = ADC_Buff[1];	//DC-DC Voltage output value
 8001374:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x94>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a21      	ldr	r2, [pc, #132]	; (8001400 <HAL_ADC_ConvCpltCallback+0x9c>)
 800137a:	6013      	str	r3, [r2, #0]
		adc_val_3 = ADC_Buff[2];	//DC-DC Voltage input value
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <HAL_ADC_ConvCpltCallback+0x94>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001382:	6013      	str	r3, [r2, #0]

		meas_volt_1 = (((float)adc_val_1)/4095.0f)*3.3f;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_ADC_ConvCpltCallback+0x98>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001390:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001408 <HAL_ADC_ConvCpltCallback+0xa4>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800140c <HAL_ADC_ConvCpltCallback+0xa8>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_ADC_ConvCpltCallback+0xac>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
		meas_volt_2 = (((float)adc_val_2)/4095.0f)*3.3f ;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_ADC_ConvCpltCallback+0x9c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013b2:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001408 <HAL_ADC_ConvCpltCallback+0xa4>
 80013b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800140c <HAL_ADC_ConvCpltCallback+0xa8>
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_ADC_ConvCpltCallback+0xb0>)
 80013c4:	edc3 7a00 	vstr	s15, [r3]
		meas_volt_3 = (((float)adc_val_3)/4095.0f)*3.3f;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_ADC_ConvCpltCallback+0xa0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013d4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001408 <HAL_ADC_ConvCpltCallback+0xa4>
 80013d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013dc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800140c <HAL_ADC_ConvCpltCallback+0xa8>
 80013e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_ADC_ConvCpltCallback+0xb4>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200003dc 	.word	0x200003dc
 80013fc:	200003e8 	.word	0x200003e8
 8001400:	200003ec 	.word	0x200003ec
 8001404:	200003f0 	.word	0x200003f0
 8001408:	457ff000 	.word	0x457ff000
 800140c:	40533333 	.word	0x40533333
 8001410:	200003f4 	.word	0x200003f4
 8001414:	200003f8 	.word	0x200003f8
 8001418:	200003fc 	.word	0x200003fc

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6193      	str	r3, [r2, #24]
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d14c      	bne.n	800152c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001492:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b22      	ldr	r3, [pc, #136]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4a21      	ldr	r2, [pc, #132]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	6153      	str	r3, [r2, #20]
 80014b6:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <HAL_ADC_MspInit+0xc4>)
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80014c2:	230b      	movs	r3, #11
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f001 fd36 	bl	8002f48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_ADC_MspInit+0xcc>)
 80014e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 80014fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001502:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 8001506:	2220      	movs	r2, #32
 8001508:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 800150c:	2200      	movs	r2, #0
 800150e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 8001512:	f001 fb82 	bl	8002c1a <HAL_DMA_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800151c:	f7ff ff7e 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_ADC_MspInit+0xc8>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	2000027c 	.word	0x2000027c
 800153c:	40020008 	.word	0x40020008

08001540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_TIM_Base_MspInit+0x5c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10c      	bne.n	800156c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800156a:	e010      	b.n	800158e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_TIM_Base_MspInit+0x64>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d10b      	bne.n	800158e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6193      	str	r3, [r2, #24]
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_TIM_Base_MspInit+0x60>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40012c00 	.word	0x40012c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40014400 	.word	0x40014400

080015a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a32      	ldr	r2, [pc, #200]	; (8001690 <HAL_TIM_MspPostInit+0xe8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d11e      	bne.n	8001608 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	4a31      	ldr	r2, [pc, #196]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	6153      	str	r3, [r2, #20]
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80015f4:	2306      	movs	r3, #6
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001602:	f001 fca1 	bl	8002f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001606:	e03e      	b.n	8001686 <HAL_TIM_MspPostInit+0xde>
  else if(htim->Instance==TIM16)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <HAL_TIM_MspPostInit+0xf0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d139      	bne.n	8001686 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6153      	str	r3, [r2, #20]
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6153      	str	r3, [r2, #20]
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_MspPostInit+0xec>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001654:	2301      	movs	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f001 fc71 	bl	8002f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001666:	2340      	movs	r3, #64	; 0x40
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <HAL_TIM_MspPostInit+0xf4>)
 8001682:	f001 fc61 	bl	8002f48 <HAL_GPIO_Init>
}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40014400 	.word	0x40014400
 800169c:	48000400 	.word	0x48000400

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_UART_MspInit+0x80>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d129      	bne.n	8001716 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	6153      	str	r3, [r2, #20]
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_UART_MspInit+0x84>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80016f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001704:	2307      	movs	r3, #7
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f001 fc19 	bl	8002f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004400 	.word	0x40004400
 8001724:	40021000 	.word	0x40021000

08001728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800172c:	e7fe      	b.n	800172c <NMI_Handler+0x4>

0800172e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <MemManage_Handler+0x4>

0800173a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173e:	e7fe      	b.n	800173e <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <UsageFault_Handler+0x4>

08001746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001774:	f000 f954 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Channel1_IRQHandler+0x10>)
 8001782:	f001 faf0 	bl	8002d66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000027c 	.word	0x2000027c

08001790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return 1;
 8001794:	2301      	movs	r3, #1
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <_kill>:

int _kill(int pid, int sig)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017aa:	f004 fdb3 	bl	8006314 <__errno>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2216      	movs	r2, #22
 80017b2:	601a      	str	r2, [r3, #0]
	return -1;
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_exit>:

void _exit (int status)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ffe7 	bl	80017a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017d2:	e7fe      	b.n	80017d2 <_exit+0x12>

080017d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00a      	b.n	80017fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017e6:	f3af 8000 	nop.w
 80017ea:	4601      	mov	r1, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	60ba      	str	r2, [r7, #8]
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbf0      	blt.n	80017e6 <_read+0x12>
	}

return len;
 8001804:	687b      	ldr	r3, [r7, #4]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e009      	b.n	8001834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	60ba      	str	r2, [r7, #8]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9bd 	bl	8000ba8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf1      	blt.n	8001820 <_write+0x12>
	}
	return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_close>:

int _close(int file)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	return -1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186e:	605a      	str	r2, [r3, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_isatty>:

int _isatty(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return 1;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	; (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	; (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f004 fd18 	bl	8006314 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20003000 	.word	0x20003000
 8001910:	00000400 	.word	0x00000400
 8001914:	20000410 	.word	0x20000410
 8001918:	20000428 	.word	0x20000428

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001944:	480d      	ldr	r0, [pc, #52]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 8001946:	490e      	ldr	r1, [pc, #56]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001948:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 800195c:	4c0b      	ldr	r4, [pc, #44]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800196a:	f7ff ffd7 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f004 fcd7 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff f92b 	bl	8000bcc <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001978:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001984:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001988:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800198c:	20000428 	.word	0x20000428

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f001 f8f7 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fd3a 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f001 f90f 	bl	8002c02 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f001 f8d7 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000034 	.word	0x20000034
 8001a18:	2000003c 	.word	0x2000003c
 8001a1c:	20000038 	.word	0x20000038

08001a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	2000003c 	.word	0x2000003c
 8001a44:	20000414 	.word	0x20000414

08001a48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000414 	.word	0x20000414

08001a60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2000003c 	.word	0x2000003c

08001aa8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b09a      	sub	sp, #104	; 0x68
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e172      	b.n	8001dd6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d176      	bne.n	8001bf0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d152      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fca3 	bl	8001470 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d13b      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fef7 	bl	800292c <ADC_Disable>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d12f      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
 8001b50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d12b      	bne.n	8001bb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b60:	f023 0302 	bic.w	r3, r3, #2
 8001b64:	f043 0202 	orr.w	r2, r3, #2
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_ADC_Init+0x310>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <HAL_ADC_Init+0x314>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9a      	lsrs	r2, r3, #18
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ba2:	e002      	b.n	8001baa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f9      	bne.n	8001ba4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bcc:	d110      	bne.n	8001bf0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f023 0312 	bic.w	r3, r3, #18
 8001bd6:	f043 0210 	orr.w	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f043 0201 	orr.w	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 80df 	bne.w	8001dbc <HAL_ADC_Init+0x2ec>
 8001bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 80da 	bne.w	8001dbc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f040 80d2 	bne.w	8001dbc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c20:	f043 0202 	orr.w	r2, r3, #2
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c28:	4b6f      	ldr	r3, [pc, #444]	; (8001de8 <HAL_ADC_Init+0x318>)
 8001c2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c34:	d102      	bne.n	8001c3c <HAL_ADC_Init+0x16c>
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_ADC_Init+0x31c>)
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	e002      	b.n	8001c42 <HAL_ADC_Init+0x172>
 8001c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <HAL_ADC_Init+0x192>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x192>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_ADC_Init+0x194>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d11c      	bne.n	8001ca2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d010      	beq.n	8001c90 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Init+0x1ba>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_ADC_Init+0x1bc>
 8001c8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d108      	bne.n	8001ca2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e5b      	ldrb	r3, [r3, #25]
 8001ca6:	035b      	lsls	r3, r3, #13
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cac:	2a01      	cmp	r2, #1
 8001cae:	d002      	beq.n	8001cb6 <HAL_ADC_Init+0x1e6>
 8001cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cb4:	e000      	b.n	8001cb8 <HAL_ADC_Init+0x1e8>
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d11b      	bne.n	8001d0e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7e5b      	ldrb	r3, [r3, #25]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	045a      	lsls	r2, r3, #17
 8001ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
 8001cf0:	e00d      	b.n	8001d0e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001cfa:	f043 0220 	orr.w	r2, r3, #32
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f043 0201 	orr.w	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d007      	beq.n	8001d26 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d22:	4313      	orrs	r3, r2
 8001d24:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d114      	bne.n	8001d5e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d42:	f023 0302 	bic.w	r3, r3, #2
 8001d46:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	039a      	lsls	r2, r3, #14
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4313      	orrs	r3, r2
 8001d58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_ADC_Init+0x320>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d6e:	430b      	orrs	r3, r1
 8001d70:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d10c      	bne.n	8001d94 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f023 010f 	bic.w	r1, r3, #15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
 8001d92:	e007      	b.n	8001da4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 020f 	bic.w	r2, r2, #15
 8001da2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dba:	e00a      	b.n	8001dd2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3768      	adds	r7, #104	; 0x68
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000034 	.word	0x20000034
 8001de4:	431bde83 	.word	0x431bde83
 8001de8:	50000300 	.word	0x50000300
 8001dec:	50000100 	.word	0x50000100
 8001df0:	fff0c007 	.word	0xfff0c007

08001df4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 80b9 	bne.w	8001f86 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_Start_DMA+0x2e>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e0b4      	b.n	8001f8c <HAL_ADC_Start_DMA+0x198>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_ADC_Start_DMA+0x1a0>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f040 80a0 	bne.w	8001f78 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fd13 	bl	8002864 <ADC_Enable>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 8092 	bne.w	8001f6e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e5e:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_ADC_Start_DMA+0x1a0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <HAL_ADC_Start_DMA+0x80>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e72:	d115      	bne.n	8001ea0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d027      	beq.n	8001ede <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e9e:	e01e      	b.n	8001ede <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADC_Start_DMA+0xcc>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a37      	ldr	r2, [pc, #220]	; (8001f98 <HAL_ADC_Start_DMA+0x1a4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10e      	bne.n	8001ede <HAL_ADC_Start_DMA+0xea>
 8001ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ed6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eea:	d106      	bne.n	8001efa <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f023 0206 	bic.w	r2, r3, #6
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	4a23      	ldr	r2, [pc, #140]	; (8001f9c <HAL_ADC_Start_DMA+0x1a8>)
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_ADC_Start_DMA+0x1ac>)
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	4a21      	ldr	r2, [pc, #132]	; (8001fa4 <HAL_ADC_Start_DMA+0x1b0>)
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	221c      	movs	r2, #28
 8001f26:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0210 	orr.w	r2, r2, #16
 8001f36:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	3340      	adds	r3, #64	; 0x40
 8001f52:	4619      	mov	r1, r3
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f000 fea6 	bl	8002ca8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0204 	orr.w	r2, r2, #4
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e00d      	b.n	8001f8a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f76:	e008      	b.n	8001f8a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001f84:	e001      	b.n	8001f8a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	50000300 	.word	0x50000300
 8001f98:	50000100 	.word	0x50000100
 8001f9c:	08002799 	.word	0x08002799
 8001fa0:	08002813 	.word	0x08002813
 8001fa4:	0800282f 	.word	0x0800282f

08001fa8 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADCEx_Calibration_Start+0x1c>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e05f      	b.n	8002084 <HAL_ADCEx_Calibration_Start+0xdc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fcad 	bl	800292c <ADC_Disable>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d14e      	bne.n	800207a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001ff0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002006:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002016:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002018:	f7ff fd16 	bl	8001a48 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800201e:	e01c      	b.n	800205a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002020:	f7ff fd12 	bl	8001a48 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b0a      	cmp	r3, #10
 800202c:	d915      	bls.n	800205a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800203c:	d10d      	bne.n	800205a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f023 0312 	bic.w	r3, r3, #18
 8002046:	f043 0210 	orr.w	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e014      	b.n	8002084 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002068:	d0da      	beq.n	8002020 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f023 0303 	bic.w	r3, r3, #3
 8002072:	f043 0201 	orr.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800208c:	b480      	push	{r7}
 800208e:	b09b      	sub	sp, #108	; 0x6c
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x22>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e2a4      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x56c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 8288 	bne.w	80025d6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d81c      	bhi.n	8002108 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	461a      	mov	r2, r3
 80020e2:	231f      	movs	r3, #31
 80020e4:	4093      	lsls	r3, r2
 80020e6:	43db      	mvns	r3, r3
 80020e8:	4019      	ands	r1, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	e063      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b09      	cmp	r3, #9
 800210e:	d81e      	bhi.n	800214e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	3b1e      	subs	r3, #30
 8002124:	221f      	movs	r2, #31
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	4019      	ands	r1, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	3b1e      	subs	r3, #30
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
 800214c:	e040      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b0e      	cmp	r3, #14
 8002154:	d81e      	bhi.n	8002194 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	3b3c      	subs	r3, #60	; 0x3c
 800216a:	221f      	movs	r2, #31
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	4019      	ands	r1, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	3b3c      	subs	r3, #60	; 0x3c
 8002186:	fa00 f203 	lsl.w	r2, r0, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
 8002192:	e01d      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	3b5a      	subs	r3, #90	; 0x5a
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	4019      	ands	r1, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	3b5a      	subs	r3, #90	; 0x5a
 80021c4:	fa00 f203 	lsl.w	r2, r0, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 80e5 	bne.w	80023aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b09      	cmp	r3, #9
 80021e6:	d91c      	bls.n	8002222 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6999      	ldr	r1, [r3, #24]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	3b1e      	subs	r3, #30
 80021fa:	2207      	movs	r2, #7
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	4019      	ands	r1, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6898      	ldr	r0, [r3, #8]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	3b1e      	subs	r3, #30
 8002214:	fa00 f203 	lsl.w	r2, r0, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	619a      	str	r2, [r3, #24]
 8002220:	e019      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6959      	ldr	r1, [r3, #20]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	2207      	movs	r2, #7
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	4019      	ands	r1, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6898      	ldr	r0, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	3b01      	subs	r3, #1
 8002274:	2b03      	cmp	r3, #3
 8002276:	d84f      	bhi.n	8002318 <HAL_ADC_ConfigChannel+0x28c>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_ADC_ConfigChannel+0x1f4>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002291 	.word	0x08002291
 8002284:	080022b3 	.word	0x080022b3
 8002288:	080022d5 	.word	0x080022d5
 800228c:	080022f7 	.word	0x080022f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002296:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <HAL_ADC_ConfigChannel+0x45c>)
 8002298:	4013      	ands	r3, r2
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	0691      	lsls	r1, r2, #26
 80022a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a2:	430a      	orrs	r2, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b0:	e07e      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022b8:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_ADC_ConfigChannel+0x45c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	0691      	lsls	r1, r2, #26
 80022c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022c4:	430a      	orrs	r2, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022d2:	e06d      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_ADC_ConfigChannel+0x45c>)
 80022dc:	4013      	ands	r3, r2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	0691      	lsls	r1, r2, #26
 80022e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022e6:	430a      	orrs	r2, r1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022f4:	e05c      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022fc:	4b7a      	ldr	r3, [pc, #488]	; (80024e8 <HAL_ADC_ConfigChannel+0x45c>)
 80022fe:	4013      	ands	r3, r2
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	0691      	lsls	r1, r2, #26
 8002306:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002308:	430a      	orrs	r2, r1
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002316:	e04b      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	069b      	lsls	r3, r3, #26
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800233a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	069b      	lsls	r3, r3, #26
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800235e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002382:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d10a      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023a8:	e001      	b.n	80023ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023aa:	bf00      	nop
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d108      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x344>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x344>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x346>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 810a 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d00f      	beq.n	8002400 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43da      	mvns	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	400a      	ands	r2, r1
 80023fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80023fe:	e049      	b.n	8002494 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2201      	movs	r2, #1
 800240e:	409a      	lsls	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b09      	cmp	r3, #9
 8002420:	d91c      	bls.n	800245c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6999      	ldr	r1, [r3, #24]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	3b1b      	subs	r3, #27
 8002434:	2207      	movs	r2, #7
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	4019      	ands	r1, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6898      	ldr	r0, [r3, #8]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	3b1b      	subs	r3, #27
 800244e:	fa00 f203 	lsl.w	r2, r0, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	619a      	str	r2, [r3, #24]
 800245a:	e01b      	b.n	8002494 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6959      	ldr	r1, [r3, #20]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_ADC_ConfigChannel+0x460>)
 8002496:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b10      	cmp	r3, #16
 800249e:	d105      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024b0:	2b11      	cmp	r3, #17
 80024b2:	d105      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	f040 8091 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 808a 	bne.w	80025ec <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e0:	d108      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x468>
 80024e2:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_ADC_ConfigChannel+0x464>)
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e008      	b.n	80024fa <HAL_ADC_ConfigChannel+0x46e>
 80024e8:	83fff000 	.word	0x83fff000
 80024ec:	50000300 	.word	0x50000300
 80024f0:	50000100 	.word	0x50000100
 80024f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d108      	bne.n	800251a <HAL_ADC_ConfigChannel+0x48e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x48e>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_ADC_ConfigChannel+0x490>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d150      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002520:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x4b6>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x4b6>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_ADC_ConfigChannel+0x4b8>
 8002542:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002544:	2b00      	cmp	r3, #0
 8002546:	d13c      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b10      	cmp	r3, #16
 800254e:	d11d      	bne.n	800258c <HAL_ADC_ConfigChannel+0x500>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002558:	d118      	bne.n	800258c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_ADC_ConfigChannel+0x578>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a27      	ldr	r2, [pc, #156]	; (8002608 <HAL_ADC_ConfigChannel+0x57c>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	0c9a      	lsrs	r2, r3, #18
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257c:	e002      	b.n	8002584 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3b01      	subs	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f9      	bne.n	800257e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800258a:	e02e      	b.n	80025ea <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b11      	cmp	r3, #17
 8002592:	d10b      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x520>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800259c:	d106      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800259e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025aa:	e01e      	b.n	80025ea <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d11a      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c0:	e013      	b.n	80025ea <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f043 0220 	orr.w	r2, r3, #32
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025d4:	e00a      	b.n	80025ec <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025e8:	e000      	b.n	80025ec <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	376c      	adds	r7, #108	; 0x6c
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20000034 	.word	0x20000034
 8002608:	431bde83 	.word	0x431bde83

0800260c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800260c:	b480      	push	{r7}
 800260e:	b099      	sub	sp, #100	; 0x64
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002624:	d102      	bne.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002626:	4b5a      	ldr	r3, [pc, #360]	; (8002790 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	e002      	b.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800262c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002630:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0a2      	b.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002646:	2302      	movs	r3, #2
 8002648:	e09b      	b.n	8002782 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d17f      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d179      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800266e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d040      	beq.n	80026fa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800268a:	035b      	lsls	r3, r3, #13
 800268c:	430b      	orrs	r3, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002692:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d15c      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80026d6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d14b      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026e4:	f023 030f 	bic.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	6811      	ldr	r1, [r2, #0]
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	431a      	orrs	r2, r3
 80026f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f8:	e03c      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002704:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b01      	cmp	r3, #1
 8002712:	d108      	bne.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d123      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002748:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d112      	bne.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800274e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002756:	f023 030f 	bic.w	r3, r3, #15
 800275a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800275c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800275e:	e009      	b.n	8002774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002772:	e000      	b.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002774:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800277e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002782:	4618      	mov	r0, r3
 8002784:	3764      	adds	r7, #100	; 0x64
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	50000100 	.word	0x50000100
 8002794:	50000300 	.word	0x50000300

08002798 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d126      	bne.n	8002800 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d115      	bne.n	80027f8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7fe fdb3 	bl	8001364 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027fe:	e004      	b.n	800280a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff f941 	bl	8001aa8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff f931 	bl	8001abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d108      	bne.n	8002890 <ADC_Enable+0x2c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <ADC_Enable+0x2c>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <ADC_Enable+0x2e>
 8002890:	2300      	movs	r3, #0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d143      	bne.n	800291e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <ADC_Enable+0xc4>)
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0210 	orr.w	r2, r3, #16
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e02f      	b.n	8002920 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80028d0:	f7ff f8ba 	bl	8001a48 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028d6:	e01b      	b.n	8002910 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028d8:	f7ff f8b6 	bl	8001a48 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d914      	bls.n	8002910 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00d      	beq.n	8002910 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f043 0210 	orr.w	r2, r3, #16
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f043 0201 	orr.w	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b01      	cmp	r3, #1
 800291c:	d1dc      	bne.n	80028d8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	8000003f 	.word	0x8000003f

0800292c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d108      	bne.n	8002958 <ADC_Disable+0x2c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <ADC_Disable+0x2c>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <ADC_Disable+0x2e>
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d047      	beq.n	80029ee <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030d 	and.w	r3, r3, #13
 8002968:	2b01      	cmp	r3, #1
 800296a:	d10f      	bne.n	800298c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0202 	orr.w	r2, r2, #2
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2203      	movs	r2, #3
 8002982:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002984:	f7ff f860 	bl	8001a48 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800298a:	e029      	b.n	80029e0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f043 0210 	orr.w	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0201 	orr.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e023      	b.n	80029f0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029a8:	f7ff f84e 	bl	8001a48 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d914      	bls.n	80029e0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d10d      	bne.n	80029e0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f043 0210 	orr.w	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f043 0201 	orr.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e007      	b.n	80029f0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d0dc      	beq.n	80029a8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc0:	f7ff ff3e 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7ff ff8e 	bl	8002aec <NVIC_EncodePriority>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff5d 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff31 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffa2 	bl	8002b54 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e037      	b.n	8002ca0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f940 	bl	8002f08 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}  
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Start_IT+0x20>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e04a      	b.n	8002d5e <HAL_DMA_Start_IT+0xb6>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d13a      	bne.n	8002d50 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8d4 	bl	8002eac <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 020e 	orr.w	r2, r2, #14
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e00f      	b.n	8002d3e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 020a 	orr.w	r2, r2, #10
 8002d2c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0204 	bic.w	r2, r2, #4
 8002d3c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e005      	b.n	8002d5c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2204      	movs	r2, #4
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d024      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x72>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01f      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0204 	bic.w	r2, r2, #4
 8002db4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d06a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002dd6:	e065      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2202      	movs	r2, #2
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02c      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xdc>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d027      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 020a 	bic.w	r2, r2, #10
 8002e0e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	2102      	movs	r1, #2
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d035      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e40:	e030      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2208      	movs	r2, #8
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d028      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d023      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 020e 	bic.w	r2, r2, #14
 8002e6a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	2101      	movs	r1, #1
 8002e76:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    }
  }
}  
 8002ea2:	e7ff      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x13e>
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d108      	bne.n	8002eec <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002eea:	e007      	b.n	8002efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <DMA_CalcBaseAndBitshift+0x34>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <DMA_CalcBaseAndBitshift+0x38>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	009a      	lsls	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <DMA_CalcBaseAndBitshift+0x3c>)
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	bffdfff8 	.word	0xbffdfff8
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f56:	e14e      	b.n	80031f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	4013      	ands	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8140 	beq.w	80031f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d005      	beq.n	8002f88 <HAL_GPIO_Init+0x40>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d130      	bne.n	8002fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	091b      	lsrs	r3, r3, #4
 8002fd4:	f003 0201 	and.w	r2, r3, #1
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d017      	beq.n	8003026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	2203      	movs	r2, #3
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d123      	bne.n	800307a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	220f      	movs	r2, #15
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	6939      	ldr	r1, [r7, #16]
 8003076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0203 	and.w	r2, r3, #3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 809a 	beq.w	80031f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030bc:	4b55      	ldr	r3, [pc, #340]	; (8003214 <HAL_GPIO_Init+0x2cc>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	4a54      	ldr	r2, [pc, #336]	; (8003214 <HAL_GPIO_Init+0x2cc>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6193      	str	r3, [r2, #24]
 80030c8:	4b52      	ldr	r3, [pc, #328]	; (8003214 <HAL_GPIO_Init+0x2cc>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030d4:	4a50      	ldr	r2, [pc, #320]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	3302      	adds	r3, #2
 80030dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030fe:	d013      	beq.n	8003128 <HAL_GPIO_Init+0x1e0>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a46      	ldr	r2, [pc, #280]	; (800321c <HAL_GPIO_Init+0x2d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00d      	beq.n	8003124 <HAL_GPIO_Init+0x1dc>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a45      	ldr	r2, [pc, #276]	; (8003220 <HAL_GPIO_Init+0x2d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d007      	beq.n	8003120 <HAL_GPIO_Init+0x1d8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a44      	ldr	r2, [pc, #272]	; (8003224 <HAL_GPIO_Init+0x2dc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_GPIO_Init+0x1d4>
 8003118:	2303      	movs	r3, #3
 800311a:	e006      	b.n	800312a <HAL_GPIO_Init+0x1e2>
 800311c:	2305      	movs	r3, #5
 800311e:	e004      	b.n	800312a <HAL_GPIO_Init+0x1e2>
 8003120:	2302      	movs	r3, #2
 8003122:	e002      	b.n	800312a <HAL_GPIO_Init+0x1e2>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_GPIO_Init+0x1e2>
 8003128:	2300      	movs	r3, #0
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	f002 0203 	and.w	r2, r2, #3
 8003130:	0092      	lsls	r2, r2, #2
 8003132:	4093      	lsls	r3, r2
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800313a:	4937      	ldr	r1, [pc, #220]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003148:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800316c:	4a2e      	ldr	r2, [pc, #184]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003172:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031ea:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <HAL_GPIO_Init+0x2e0>)
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	f47f aea9 	bne.w	8002f58 <HAL_GPIO_Init+0x10>
  }
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000
 800321c:	48000400 	.word	0x48000400
 8003220:	48000800 	.word	0x48000800
 8003224:	48000c00 	.word	0x48000c00
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003232:	af00      	add	r7, sp, #0
 8003234:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800323c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f001 b823 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003256:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 817d 	beq.w	8003562 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003268:	4bbc      	ldr	r3, [pc, #752]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 030c 	and.w	r3, r3, #12
 8003270:	2b04      	cmp	r3, #4
 8003272:	d00c      	beq.n	800328e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003274:	4bb9      	ldr	r3, [pc, #740]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d15c      	bne.n	800333a <HAL_RCC_OscConfig+0x10e>
 8003280:	4bb6      	ldr	r3, [pc, #728]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d155      	bne.n	800333a <HAL_RCC_OscConfig+0x10e>
 800328e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003292:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <HAL_RCC_OscConfig+0x94>
 80032ba:	4ba8      	ldr	r3, [pc, #672]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e015      	b.n	80032ec <HAL_RCC_OscConfig+0xc0>
 80032c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80032d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80032dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80032e8:	4b9c      	ldr	r3, [pc, #624]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80032f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003300:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003304:	fab2 f282 	clz	r2, r2
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	f042 0220 	orr.w	r2, r2, #32
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f002 021f 	and.w	r2, r2, #31
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f202 	lsl.w	r2, r1, r2
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 811f 	beq.w	8003560 <HAL_RCC_OscConfig+0x334>
 8003322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003326:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8116 	bne.w	8003560 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f000 bfaf 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d106      	bne.n	800335a <HAL_RCC_OscConfig+0x12e>
 800334c:	4b83      	ldr	r3, [pc, #524]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a82      	ldr	r2, [pc, #520]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	e036      	b.n	80033c8 <HAL_RCC_OscConfig+0x19c>
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x158>
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7b      	ldr	r2, [pc, #492]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b79      	ldr	r3, [pc, #484]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a78      	ldr	r2, [pc, #480]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800337c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e021      	b.n	80033c8 <HAL_RCC_OscConfig+0x19c>
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x184>
 8003396:	4b71      	ldr	r3, [pc, #452]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a70      	ldr	r2, [pc, #448]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b6e      	ldr	r3, [pc, #440]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6d      	ldr	r2, [pc, #436]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x19c>
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a69      	ldr	r2, [pc, #420]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033c8:	4b64      	ldr	r3, [pc, #400]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f023 020f 	bic.w	r2, r3, #15
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	495f      	ldr	r1, [pc, #380]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d059      	beq.n	80034a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fb29 	bl	8001a48 <HAL_GetTick>
 80033f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fb24 	bl	8001a48 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	; 0x64
 800340a:	d902      	bls.n	8003412 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	f000 bf43 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 8003412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003416:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003426:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_RCC_OscConfig+0x218>
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	e015      	b.n	8003470 <HAL_RCC_OscConfig+0x244>
 8003444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003448:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003458:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800345c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003460:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_OscConfig+0x330>)
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003474:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003478:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003484:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003488:	fab2 f282 	clz	r2, r2
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	f042 0220 	orr.w	r2, r2, #32
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f002 021f 	and.w	r2, r2, #31
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f202 	lsl.w	r2, r1, r2
 800349e:	4013      	ands	r3, r2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ab      	beq.n	80033fc <HAL_RCC_OscConfig+0x1d0>
 80034a4:	e05d      	b.n	8003562 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe facf 	bl	8001a48 <HAL_GetTick>
 80034aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe faca 	bl	8001a48 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	; 0x64
 80034be:	d902      	bls.n	80034c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	f000 bee9 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 80034c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80034da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0x2cc>
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_OscConfig+0x330>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e015      	b.n	8003524 <HAL_RCC_OscConfig+0x2f8>
 80034f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800350c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003510:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003514:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <HAL_RCC_OscConfig+0x330>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003528:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800352c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003530:	fa92 f2a2 	rbit	r2, r2
 8003534:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003538:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800353c:	fab2 f282 	clz	r2, r2
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	f042 0220 	orr.w	r2, r2, #32
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	f002 021f 	and.w	r2, r2, #31
 800354c:	2101      	movs	r1, #1
 800354e:	fa01 f202 	lsl.w	r2, r1, r2
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ab      	bne.n	80034b0 <HAL_RCC_OscConfig+0x284>
 8003558:	e003      	b.n	8003562 <HAL_RCC_OscConfig+0x336>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 817d 	beq.w	8003872 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003578:	4ba6      	ldr	r3, [pc, #664]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003584:	4ba3      	ldr	r3, [pc, #652]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 030c 	and.w	r3, r3, #12
 800358c:	2b08      	cmp	r3, #8
 800358e:	d172      	bne.n	8003676 <HAL_RCC_OscConfig+0x44a>
 8003590:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d16c      	bne.n	8003676 <HAL_RCC_OscConfig+0x44a>
 800359c:	2302      	movs	r3, #2
 800359e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80035ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d102      	bne.n	80035cc <HAL_RCC_OscConfig+0x3a0>
 80035c6:	4b93      	ldr	r3, [pc, #588]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	e013      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c8>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80035f0:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2202      	movs	r2, #2
 80035f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80035fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80035fe:	fa92 f2a2 	rbit	r2, r2
 8003602:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003606:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f042 0220 	orr.w	r2, r2, #32
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f002 021f 	and.w	r2, r2, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCC_OscConfig+0x410>
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d002      	beq.n	800363c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f000 be2e 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	21f8      	movs	r1, #248	; 0xf8
 8003652:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800365a:	fa91 f1a1 	rbit	r1, r1
 800365e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003662:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003666:	fab1 f181 	clz	r1, r1
 800366a:	b2c9      	uxtb	r1, r1
 800366c:	408b      	lsls	r3, r1
 800366e:	4969      	ldr	r1, [pc, #420]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003674:	e0fd      	b.n	8003872 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 8088 	beq.w	8003798 <HAL_RCC_OscConfig+0x56c>
 8003688:	2301      	movs	r3, #1
 800368a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800369a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	2301      	movs	r3, #1
 80036b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe f9c8 	bl	8001a48 <HAL_GetTick>
 80036b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036be:	f7fe f9c3 	bl	8001a48 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	f000 bde2 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 80036d4:	2302      	movs	r3, #2
 80036d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80036e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_RCC_OscConfig+0x4d8>
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0x500>
 8003704:	2302      	movs	r3, #2
 8003706:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003716:	2302      	movs	r3, #2
 8003718:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800371c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003728:	4b3a      	ldr	r3, [pc, #232]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2202      	movs	r2, #2
 800372e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003732:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003736:	fa92 f2a2 	rbit	r2, r2
 800373a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800373e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003742:	fab2 f282 	clz	r2, r2
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	f042 0220 	orr.w	r2, r2, #32
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f002 021f 	and.w	r2, r2, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0af      	beq.n	80036be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375e:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	21f8      	movs	r1, #248	; 0xf8
 8003774:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003778:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800377c:	fa91 f1a1 	rbit	r1, r1
 8003780:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003784:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003788:	fab1 f181 	clz	r1, r1
 800378c:	b2c9      	uxtb	r1, r1
 800378e:	408b      	lsls	r3, r1
 8003790:	4920      	ldr	r1, [pc, #128]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
 8003796:	e06c      	b.n	8003872 <HAL_RCC_OscConfig+0x646>
 8003798:	2301      	movs	r3, #1
 800379a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80037aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	fab3 f383 	clz	r3, r3
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe f940 	bl	8001a48 <HAL_GetTick>
 80037c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ce:	f7fe f93b 	bl	8001a48 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d902      	bls.n	80037e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	f000 bd5a 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80037f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d104      	bne.n	8003818 <HAL_RCC_OscConfig+0x5ec>
 800380e:	4b01      	ldr	r3, [pc, #4]	; (8003814 <HAL_RCC_OscConfig+0x5e8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	e015      	b.n	8003840 <HAL_RCC_OscConfig+0x614>
 8003814:	40021000 	.word	0x40021000
 8003818:	2302      	movs	r3, #2
 800381a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003822:	fa93 f3a3 	rbit	r3, r3
 8003826:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800382a:	2302      	movs	r3, #2
 800382c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003834:	fa93 f3a3 	rbit	r3, r3
 8003838:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800383c:	4bc8      	ldr	r3, [pc, #800]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2202      	movs	r2, #2
 8003842:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003846:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800384a:	fa92 f2a2 	rbit	r2, r2
 800384e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003852:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003856:	fab2 f282 	clz	r2, r2
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	f042 0220 	orr.w	r2, r2, #32
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	f002 021f 	and.w	r2, r2, #31
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f202 	lsl.w	r2, r1, r2
 800386c:	4013      	ands	r3, r2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ad      	bne.n	80037ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8110 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d079      	beq.n	800398c <HAL_RCC_OscConfig+0x760>
 8003898:	2301      	movs	r3, #1
 800389a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80038aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	4bab      	ldr	r3, [pc, #684]	; (8003b64 <HAL_RCC_OscConfig+0x938>)
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	461a      	mov	r2, r3
 80038be:	2301      	movs	r3, #1
 80038c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7fe f8c1 	bl	8001a48 <HAL_GetTick>
 80038c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe f8bc 	bl	8001a48 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d902      	bls.n	80038e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	f000 bcdb 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 80038e2:	2302      	movs	r3, #2
 80038e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038fc:	2202      	movs	r2, #2
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	fa93 f2a3 	rbit	r2, r3
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003920:	2202      	movs	r2, #2
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800393a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393c:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003948:	2102      	movs	r1, #2
 800394a:	6019      	str	r1, [r3, #0]
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f1a3 	rbit	r1, r3
 800395a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003962:	6019      	str	r1, [r3, #0]
  return result;
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2101      	movs	r1, #1
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0a0      	beq.n	80038cc <HAL_RCC_OscConfig+0x6a0>
 800398a:	e08d      	b.n	8003aa8 <HAL_RCC_OscConfig+0x87c>
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003994:	2201      	movs	r2, #1
 8003996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039ae:	601a      	str	r2, [r3, #0]
  return result;
 80039b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80039b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCC_OscConfig+0x938>)
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	461a      	mov	r2, r3
 80039ca:	2300      	movs	r3, #0
 80039cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fe f83b 	bl	8001a48 <HAL_GetTick>
 80039d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fe f836 	bl	8001a48 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d902      	bls.n	80039ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	f000 bc55 	b.w	8004298 <HAL_RCC_OscConfig+0x106c>
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80039f6:	2202      	movs	r2, #2
 80039f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	fa93 f2a3 	rbit	r2, r3
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	fa93 f2a3 	rbit	r2, r3
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a3e:	2202      	movs	r2, #2
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	fa93 f2a3 	rbit	r2, r3
 8003a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a54:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003a58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5a:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a66:	2102      	movs	r1, #2
 8003a68:	6019      	str	r1, [r3, #0]
 8003a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	fa93 f1a3 	rbit	r1, r3
 8003a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a80:	6019      	str	r1, [r3, #0]
  return result;
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fab3 f383 	clz	r3, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d197      	bne.n	80039d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 81a1 	beq.w	8003e00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d116      	bne.n	8003afe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003af6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCC_OscConfig+0x93c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <HAL_RCC_OscConfig+0x93c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <HAL_RCC_OscConfig+0x93c>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fd ff97 	bl	8001a48 <HAL_GetTick>
 8003b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	e009      	b.n	8003b34 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b20:	f7fd ff92 	bl	8001a48 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e3b1      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <HAL_RCC_OscConfig+0x93c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ef      	beq.n	8003b20 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_OscConfig+0x940>
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a02      	ldr	r2, [pc, #8]	; (8003b60 <HAL_RCC_OscConfig+0x934>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	e03c      	b.n	8003bd8 <HAL_RCC_OscConfig+0x9ac>
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	10908120 	.word	0x10908120
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x96a>
 8003b7c:	4bc1      	ldr	r3, [pc, #772]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4ac0      	ldr	r2, [pc, #768]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	4bbe      	ldr	r3, [pc, #760]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4abd      	ldr	r2, [pc, #756]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e020      	b.n	8003bd8 <HAL_RCC_OscConfig+0x9ac>
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b05      	cmp	r3, #5
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x994>
 8003ba6:	4bb7      	ldr	r3, [pc, #732]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4ab6      	ldr	r2, [pc, #728]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bac:	f043 0304 	orr.w	r3, r3, #4
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	4bb4      	ldr	r3, [pc, #720]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4ab3      	ldr	r2, [pc, #716]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bb8:	f043 0301 	orr.w	r3, r3, #1
 8003bbc:	6213      	str	r3, [r2, #32]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x9ac>
 8003bc0:	4bb0      	ldr	r3, [pc, #704]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4aaf      	ldr	r2, [pc, #700]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6213      	str	r3, [r2, #32]
 8003bcc:	4bad      	ldr	r3, [pc, #692]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4aac      	ldr	r2, [pc, #688]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8081 	beq.w	8003cec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fd ff2d 	bl	8001a48 <HAL_GetTick>
 8003bee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf4:	f7fd ff28 	bl	8001a48 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e345      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c14:	2202      	movs	r2, #2
 8003c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fa93 f2a3 	rbit	r2, r3
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c34:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c38:	2202      	movs	r2, #2
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c40:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	fa93 f2a3 	rbit	r2, r3
 8003c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c52:	601a      	str	r2, [r3, #0]
  return result;
 8003c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003c5c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f043 0302 	orr.w	r3, r3, #2
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d102      	bne.n	8003c78 <HAL_RCC_OscConfig+0xa4c>
 8003c72:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	e013      	b.n	8003ca0 <HAL_RCC_OscConfig+0xa74>
 8003c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c80:	2202      	movs	r2, #2
 8003c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c88:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	fa93 f2a3 	rbit	r2, r3
 8003c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c96:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ca4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ca8:	2102      	movs	r1, #2
 8003caa:	6011      	str	r1, [r2, #0]
 8003cac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cb0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003cb4:	6812      	ldr	r2, [r2, #0]
 8003cb6:	fa92 f1a2 	rbit	r1, r2
 8003cba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cbe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003cc2:	6011      	str	r1, [r2, #0]
  return result;
 8003cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cc8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	fab2 f282 	clz	r2, r2
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	f002 021f 	and.w	r2, r2, #31
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d084      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x9c8>
 8003cea:	e07f      	b.n	8003dec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd feac 	bl	8001a48 <HAL_GetTick>
 8003cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf4:	e00b      	b.n	8003d0e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fea7 	bl	8001a48 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e2c4      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
 8003d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d12:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d16:	2202      	movs	r2, #2
 8003d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d54:	601a      	str	r2, [r3, #0]
  return result;
 8003d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d5a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003d5e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f043 0302 	orr.w	r3, r3, #2
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0xb4e>
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	e013      	b.n	8003da2 <HAL_RCC_OscConfig+0xb76>
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d82:	2202      	movs	r2, #2
 8003d84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	fa93 f2a3 	rbit	r2, r3
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003da6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003daa:	2102      	movs	r1, #2
 8003dac:	6011      	str	r1, [r2, #0]
 8003dae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003db2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	fa92 f1a2 	rbit	r1, r2
 8003dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003dc4:	6011      	str	r1, [r2, #0]
  return result;
 8003dc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	fab2 f282 	clz	r2, r2
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f002 021f 	and.w	r2, r2, #31
 8003de0:	2101      	movs	r1, #1
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d184      	bne.n	8003cf6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df4:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8242 	beq.w	8004296 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_RCC_OscConfig+0xc58>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	f000 8213 	beq.w	8004246 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	f040 8162 	bne.w	80040f6 <HAL_RCC_OscConfig+0xeca>
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003e60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	2300      	movs	r3, #0
 8003e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fde6 	bl	8001a48 <HAL_GetTick>
 8003e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e80:	e00c      	b.n	8003e9c <HAL_RCC_OscConfig+0xc70>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e88:	f7fd fdde 	bl	8001a48 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1fd      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
 8003e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	fa93 f2a3 	rbit	r2, r3
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003ec0:	601a      	str	r2, [r3, #0]
  return result;
 8003ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003eca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d102      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xcba>
 8003ee0:	4bb0      	ldr	r3, [pc, #704]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	e027      	b.n	8003f36 <HAL_RCC_OscConfig+0xd0a>
 8003ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003eee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4b9c      	ldr	r3, [pc, #624]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f3a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f48:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	fa92 f1a2 	rbit	r1, r2
 8003f52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f56:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f5a:	6011      	str	r1, [r2, #0]
  return result;
 8003f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f60:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	fab2 f282 	clz	r2, r2
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	f042 0220 	orr.w	r2, r2, #32
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f002 021f 	and.w	r2, r2, #31
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d182      	bne.n	8003e88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f82:	4b88      	ldr	r3, [pc, #544]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	497f      	ldr	r1, [pc, #508]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	604b      	str	r3, [r1, #4]
 8003faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fbc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	fa93 f2a3 	rbit	r2, r3
 8003fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fce:	601a      	str	r2, [r3, #0]
  return result;
 8003fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003fd8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	461a      	mov	r2, r3
 8003fec:	2301      	movs	r3, #1
 8003fee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fd2a 	bl	8001a48 <HAL_GetTick>
 8003ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ff8:	e009      	b.n	800400e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fd fd25 	bl	8001a48 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e144      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
 800400e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004012:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004020:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800402e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004032:	601a      	str	r2, [r3, #0]
  return result;
 8004034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004038:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800403c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b01      	cmp	r3, #1
 8004050:	d102      	bne.n	8004058 <HAL_RCC_OscConfig+0xe2c>
 8004052:	4b54      	ldr	r3, [pc, #336]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	e027      	b.n	80040a8 <HAL_RCC_OscConfig+0xe7c>
 8004058:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	fa93 f2a3 	rbit	r2, r3
 8004074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004078:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004082:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004090:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800409e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	4b3f      	ldr	r3, [pc, #252]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040b0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	fa92 f1a2 	rbit	r1, r2
 80040c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040cc:	6011      	str	r1, [r2, #0]
  return result;
 80040ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040d2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	fab2 f282 	clz	r2, r2
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	f042 0220 	orr.w	r2, r2, #32
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	f002 021f 	and.w	r2, r2, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f202 	lsl.w	r2, r1, r2
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d082      	beq.n	8003ffa <HAL_RCC_OscConfig+0xdce>
 80040f4:	e0cf      	b.n	8004296 <HAL_RCC_OscConfig+0x106a>
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004108:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004116:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800411a:	601a      	str	r2, [r3, #0]
  return result;
 800411c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004120:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004124:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fd fc84 	bl	8001a48 <HAL_GetTick>
 8004140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004144:	e009      	b.n	800415a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fd fc7f 	bl	8001a48 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e09e      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
 800415a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004162:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	fa93 f2a3 	rbit	r2, r3
 8004176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800417a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800417e:	601a      	str	r2, [r3, #0]
  return result;
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004188:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d104      	bne.n	80041a8 <HAL_RCC_OscConfig+0xf7c>
 800419e:	4b01      	ldr	r3, [pc, #4]	; (80041a4 <HAL_RCC_OscConfig+0xf78>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	e029      	b.n	80041f8 <HAL_RCC_OscConfig+0xfcc>
 80041a4:	40021000 	.word	0x40021000
 80041a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa93 f2a3 	rbit	r2, r3
 80041c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	fa93 f2a3 	rbit	r2, r3
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_OscConfig+0x1078>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041fc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004200:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800420a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	fa92 f1a2 	rbit	r1, r2
 8004214:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004218:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800421c:	6011      	str	r1, [r2, #0]
  return result;
 800421e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004222:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	fab2 f282 	clz	r2, r2
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f042 0220 	orr.w	r2, r2, #32
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	f002 021f 	and.w	r2, r2, #31
 8004238:	2101      	movs	r1, #1
 800423a:	fa01 f202 	lsl.w	r2, r1, r2
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d180      	bne.n	8004146 <HAL_RCC_OscConfig+0xf1a>
 8004244:	e027      	b.n	8004296 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e01e      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_OscConfig+0x1078>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004262:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004266:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	429a      	cmp	r2, r3
 8004278:	d10b      	bne.n	8004292 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800427a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800427e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000

080042a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b09e      	sub	sp, #120	; 0x78
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e162      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c0:	4b90      	ldr	r3, [pc, #576]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d910      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b8d      	ldr	r3, [pc, #564]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 0207 	bic.w	r2, r3, #7
 80042d6:	498b      	ldr	r1, [pc, #556]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b89      	ldr	r3, [pc, #548]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e14a      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b82      	ldr	r3, [pc, #520]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	497f      	ldr	r1, [pc, #508]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80dc 	beq.w	80044d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d13c      	bne.n	800439e <HAL_RCC_ClockConfig+0xf6>
 8004324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004328:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HAL_RCC_ClockConfig+0xa6>
 8004348:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	e00f      	b.n	800436e <HAL_RCC_ClockConfig+0xc6>
 800434e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004352:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004356:	fa93 f3a3 	rbit	r3, r3
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
 800435c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004360:	663b      	str	r3, [r7, #96]	; 0x60
 8004362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436a:	4b67      	ldr	r3, [pc, #412]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004372:	65ba      	str	r2, [r7, #88]	; 0x58
 8004374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004376:	fa92 f2a2 	rbit	r2, r2
 800437a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800437c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800437e:	fab2 f282 	clz	r2, r2
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	f042 0220 	orr.w	r2, r2, #32
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	f002 021f 	and.w	r2, r2, #31
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d17b      	bne.n	8004492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e0f3      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d13c      	bne.n	8004420 <HAL_RCC_ClockConfig+0x178>
 80043a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ae:	fa93 f3a3 	rbit	r3, r3
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x128>
 80043ca:	4b4f      	ldr	r3, [pc, #316]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e00f      	b.n	80043f0 <HAL_RCC_ClockConfig+0x148>
 80043d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e2:	643b      	str	r3, [r7, #64]	; 0x40
 80043e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ec:	4b46      	ldr	r3, [pc, #280]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043f4:	63ba      	str	r2, [r7, #56]	; 0x38
 80043f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f8:	fa92 f2a2 	rbit	r2, r2
 80043fc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004400:	fab2 f282 	clz	r2, r2
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	f042 0220 	orr.w	r2, r2, #32
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	f002 021f 	and.w	r2, r2, #31
 8004410:	2101      	movs	r1, #1
 8004412:	fa01 f202 	lsl.w	r2, r1, r2
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d13a      	bne.n	8004492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b2      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
 8004420:	2302      	movs	r3, #2
 8004422:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800442c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_RCC_ClockConfig+0x1a0>
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e00d      	b.n	8004464 <HAL_RCC_ClockConfig+0x1bc>
 8004448:	2302      	movs	r3, #2
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
 8004454:	2302      	movs	r3, #2
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	2202      	movs	r2, #2
 8004466:	61ba      	str	r2, [r7, #24]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	fa92 f2a2 	rbit	r2, r2
 800446e:	617a      	str	r2, [r7, #20]
  return result;
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	f042 0220 	orr.w	r2, r2, #32
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f002 021f 	and.w	r2, r2, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f202 	lsl.w	r2, r1, r2
 8004488:	4013      	ands	r3, r2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e079      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f023 0203 	bic.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	491a      	ldr	r1, [pc, #104]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044a4:	f7fd fad0 	bl	8001a48 <HAL_GetTick>
 80044a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ac:	f7fd facc 	bl	8001a48 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e061      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 020c 	and.w	r2, r3, #12
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d1eb      	bne.n	80044ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d4:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d214      	bcs.n	800450c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0207 	bic.w	r2, r3, #7
 80044ea:	4906      	ldr	r1, [pc, #24]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b04      	ldr	r3, [pc, #16]	; (8004504 <HAL_RCC_ClockConfig+0x25c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e040      	b.n	8004586 <HAL_RCC_ClockConfig+0x2de>
 8004504:	40022000 	.word	0x40022000
 8004508:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <HAL_RCC_ClockConfig+0x2e8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	491a      	ldr	r1, [pc, #104]	; (8004590 <HAL_RCC_ClockConfig+0x2e8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004536:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_RCC_ClockConfig+0x2e8>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4912      	ldr	r1, [pc, #72]	; (8004590 <HAL_RCC_ClockConfig+0x2e8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800454a:	f000 f829 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800454e:	4601      	mov	r1, r0
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <HAL_RCC_ClockConfig+0x2e8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	22f0      	movs	r2, #240	; 0xf0
 800455a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	fa92 f2a2 	rbit	r2, r2
 8004562:	60fa      	str	r2, [r7, #12]
  return result;
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	fab2 f282 	clz	r2, r2
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	40d3      	lsrs	r3, r2
 800456e:	4a09      	ldr	r2, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x2ec>)
 8004570:	5cd3      	ldrb	r3, [r2, r3]
 8004572:	fa21 f303 	lsr.w	r3, r1, r3
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <HAL_RCC_ClockConfig+0x2f0>)
 8004578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_RCC_ClockConfig+0x2f4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fa1e 	bl	80019c0 <HAL_InitTick>
  
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3778      	adds	r7, #120	; 0x78
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	08008f78 	.word	0x08008f78
 8004598:	20000034 	.word	0x20000034
 800459c:	20000038 	.word	0x20000038

080045a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x30>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x36>
 80045ce:	e03c      	b.n	800464a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 80045d2:	623b      	str	r3, [r7, #32]
      break;
 80045d4:	e03c      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80045dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	fa92 f2a2 	rbit	r2, r2
 80045e8:	607a      	str	r2, [r7, #4]
  return result;
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	fab2 f282 	clz	r2, r2
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	40d3      	lsrs	r3, r2
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045f6:	5cd3      	ldrb	r3, [r2, r3]
 80045f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	220f      	movs	r2, #15
 8004604:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	fa92 f2a2 	rbit	r2, r2
 800460c:	60fa      	str	r2, [r7, #12]
  return result;
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	fab2 f282 	clz	r2, r2
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	40d3      	lsrs	r3, r2
 8004618:	4a14      	ldr	r2, [pc, #80]	; (800466c <HAL_RCC_GetSysClockFreq+0xcc>)
 800461a:	5cd3      	ldrb	r3, [r2, r3]
 800461c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004628:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
 8004638:	e004      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <HAL_RCC_GetSysClockFreq+0xd0>)
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	623b      	str	r3, [r7, #32]
      break;
 8004648:	e002      	b.n	8004650 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc4>)
 800464c:	623b      	str	r3, [r7, #32]
      break;
 800464e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004650:	6a3b      	ldr	r3, [r7, #32]
}
 8004652:	4618      	mov	r0, r3
 8004654:	372c      	adds	r7, #44	; 0x2c
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000
 8004664:	007a1200 	.word	0x007a1200
 8004668:	08008f90 	.word	0x08008f90
 800466c:	08008fa0 	.word	0x08008fa0
 8004670:	003d0900 	.word	0x003d0900

08004674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004678:	4b03      	ldr	r3, [pc, #12]	; (8004688 <HAL_RCC_GetHCLKFreq+0x14>)
 800467a:	681b      	ldr	r3, [r3, #0]
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000034 	.word	0x20000034

0800468c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004692:	f7ff ffef 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8004696:	4601      	mov	r1, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80046a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	603a      	str	r2, [r7, #0]
  return result;
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	fab2 f282 	clz	r2, r2
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	40d3      	lsrs	r3, r2
 80046b8:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	08008f88 	.word	0x08008f88

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046d6:	f7ff ffcd 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 80046da:	4601      	mov	r1, r0
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	fa92 f2a2 	rbit	r2, r2
 80046f0:	603a      	str	r2, [r7, #0]
  return result;
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	fab2 f282 	clz	r2, r2
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	40d3      	lsrs	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	08008f88 	.word	0x08008f88

08004714 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b092      	sub	sp, #72	; 0x48
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80cd 	beq.w	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004738:	4b86      	ldr	r3, [pc, #536]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10e      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b83      	ldr	r3, [pc, #524]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	4a82      	ldr	r2, [pc, #520]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474e:	61d3      	str	r3, [r2, #28]
 8004750:	4b80      	ldr	r3, [pc, #512]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004762:	4b7d      	ldr	r3, [pc, #500]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d118      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a79      	ldr	r2, [pc, #484]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004778:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477a:	f7fd f965 	bl	8001a48 <HAL_GetTick>
 800477e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004780:	e008      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004782:	f7fd f961 	bl	8001a48 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d901      	bls.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e0db      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004794:	4b70      	ldr	r3, [pc, #448]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f0      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047a0:	4b6c      	ldr	r3, [pc, #432]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d07d      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d076      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047be:	4b65      	ldr	r3, [pc, #404]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	4b5e      	ldr	r3, [pc, #376]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	461a      	mov	r2, r3
 80047e8:	2301      	movs	r3, #1
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fc:	fab3 f383 	clz	r3, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	461a      	mov	r2, r3
 800480c:	2300      	movs	r3, #0
 800480e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004810:	4a50      	ldr	r2, [pc, #320]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004814:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d045      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fd f912 	bl	8001a48 <HAL_GetTick>
 8004824:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd f90e 	bl	8001a48 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e086      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800483e:	2302      	movs	r3, #2
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
 800484a:	2302      	movs	r3, #2
 800484c:	623b      	str	r3, [r7, #32]
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	fa93 f3a3 	rbit	r3, r3
 8004854:	61fb      	str	r3, [r7, #28]
  return result;
 8004856:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d102      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800486c:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	e007      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004872:	2302      	movs	r3, #2
 8004874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	4b35      	ldr	r3, [pc, #212]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2202      	movs	r2, #2
 8004884:	613a      	str	r2, [r7, #16]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	fa92 f2a2 	rbit	r2, r2
 800488c:	60fa      	str	r2, [r7, #12]
  return result;
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	fab2 f282 	clz	r2, r2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	f002 021f 	and.w	r2, r2, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f202 	lsl.w	r2, r1, r2
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0bd      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048ac:	4b29      	ldr	r3, [pc, #164]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4926      	ldr	r1, [pc, #152]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	491a      	ldr	r1, [pc, #104]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048fc:	4b15      	ldr	r3, [pc, #84]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	f023 0210 	bic.w	r2, r3, #16
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4912      	ldr	r1, [pc, #72]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800490a:	4313      	orrs	r3, r2
 800490c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	490b      	ldr	r1, [pc, #44]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004928:	4313      	orrs	r3, r2
 800492a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004946:	4313      	orrs	r3, r2
 8004948:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3748      	adds	r7, #72	; 0x48
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
 800495c:	10908100 	.word	0x10908100

08004960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e049      	b.n	8004a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d106      	bne.n	800498c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fdda 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 fb60 	bl	8005064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e049      	b.n	8004ab4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f841 	bl	8004abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f000 fb09 	bl	8005064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_TIM_PWM_Start+0x24>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bf14      	ite	ne
 8004aec:	2301      	movne	r3, #1
 8004aee:	2300      	moveq	r3, #0
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	e03c      	b.n	8004b6e <HAL_TIM_PWM_Start+0x9e>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d109      	bne.n	8004b0e <HAL_TIM_PWM_Start+0x3e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	bf14      	ite	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	2300      	moveq	r3, #0
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	e02f      	b.n	8004b6e <HAL_TIM_PWM_Start+0x9e>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d109      	bne.n	8004b28 <HAL_TIM_PWM_Start+0x58>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	e022      	b.n	8004b6e <HAL_TIM_PWM_Start+0x9e>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b0c      	cmp	r3, #12
 8004b2c:	d109      	bne.n	8004b42 <HAL_TIM_PWM_Start+0x72>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e015      	b.n	8004b6e <HAL_TIM_PWM_Start+0x9e>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d109      	bne.n	8004b5c <HAL_TIM_PWM_Start+0x8c>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	bf14      	ite	ne
 8004b54:	2301      	movne	r3, #1
 8004b56:	2300      	moveq	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e008      	b.n	8004b6e <HAL_TIM_PWM_Start+0x9e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf14      	ite	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	2300      	moveq	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e088      	b.n	8004c88 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d104      	bne.n	8004b86 <HAL_TIM_PWM_Start+0xb6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b84:	e023      	b.n	8004bce <HAL_TIM_PWM_Start+0xfe>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIM_PWM_Start+0xc6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b94:	e01b      	b.n	8004bce <HAL_TIM_PWM_Start+0xfe>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Start+0xd6>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba4:	e013      	b.n	8004bce <HAL_TIM_PWM_Start+0xfe>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b0c      	cmp	r3, #12
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0xe6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb4:	e00b      	b.n	8004bce <HAL_TIM_PWM_Start+0xfe>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0xf6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc4:	e003      	b.n	8004bce <HAL_TIM_PWM_Start+0xfe>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fdfc 	bl	80057d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <HAL_TIM_PWM_Start+0x1c0>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_TIM_PWM_Start+0x134>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_TIM_PWM_Start+0x1c4>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_TIM_PWM_Start+0x134>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a28      	ldr	r2, [pc, #160]	; (8004c98 <HAL_TIM_PWM_Start+0x1c8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_PWM_Start+0x134>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a27      	ldr	r2, [pc, #156]	; (8004c9c <HAL_TIM_PWM_Start+0x1cc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x138>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_TIM_PWM_Start+0x13a>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <HAL_TIM_PWM_Start+0x1c0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x176>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d009      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x176>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_TIM_PWM_Start+0x1d0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIM_PWM_Start+0x176>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_TIM_PWM_Start+0x1c4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d115      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <HAL_TIM_PWM_Start+0x1d4>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2b06      	cmp	r3, #6
 8004c56:	d015      	beq.n	8004c84 <HAL_TIM_PWM_Start+0x1b4>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d011      	beq.n	8004c84 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c70:	e008      	b.n	8004c84 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0201 	orr.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	e000      	b.n	8004c86 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	00010007 	.word	0x00010007

08004ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0ff      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b14      	cmp	r3, #20
 8004cd2:	f200 80f0 	bhi.w	8004eb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004eb7 	.word	0x08004eb7
 8004ce4:	08004eb7 	.word	0x08004eb7
 8004ce8:	08004eb7 	.word	0x08004eb7
 8004cec:	08004d71 	.word	0x08004d71
 8004cf0:	08004eb7 	.word	0x08004eb7
 8004cf4:	08004eb7 	.word	0x08004eb7
 8004cf8:	08004eb7 	.word	0x08004eb7
 8004cfc:	08004db3 	.word	0x08004db3
 8004d00:	08004eb7 	.word	0x08004eb7
 8004d04:	08004eb7 	.word	0x08004eb7
 8004d08:	08004eb7 	.word	0x08004eb7
 8004d0c:	08004df3 	.word	0x08004df3
 8004d10:	08004eb7 	.word	0x08004eb7
 8004d14:	08004eb7 	.word	0x08004eb7
 8004d18:	08004eb7 	.word	0x08004eb7
 8004d1c:	08004e35 	.word	0x08004e35
 8004d20:	08004eb7 	.word	0x08004eb7
 8004d24:	08004eb7 	.word	0x08004eb7
 8004d28:	08004eb7 	.word	0x08004eb7
 8004d2c:	08004e75 	.word	0x08004e75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 fa0c 	bl	8005154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 0204 	bic.w	r2, r2, #4
 8004d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6999      	ldr	r1, [r3, #24]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	619a      	str	r2, [r3, #24]
      break;
 8004d6e:	e0a5      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fa72 	bl	8005260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6999      	ldr	r1, [r3, #24]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	619a      	str	r2, [r3, #24]
      break;
 8004db0:	e084      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fad1 	bl	8005360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0208 	orr.w	r2, r2, #8
 8004dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0204 	bic.w	r2, r2, #4
 8004ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	61da      	str	r2, [r3, #28]
      break;
 8004df0:	e064      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fb2f 	bl	800545c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69d9      	ldr	r1, [r3, #28]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	021a      	lsls	r2, r3, #8
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	61da      	str	r2, [r3, #28]
      break;
 8004e32:	e043      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fb72 	bl	8005524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0208 	orr.w	r2, r2, #8
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0204 	bic.w	r2, r2, #4
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e72:	e023      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fbb0 	bl	80055e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eb4:	e002      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop

08004ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_ConfigClockSource+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0b6      	b.n	800505a <HAL_TIM_ConfigClockSource+0x18a>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d03e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xd8>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	f200 8087 	bhi.w	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	f000 8086 	beq.w	8005046 <HAL_TIM_ConfigClockSource+0x176>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d87f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d01a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xaa>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d87b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d050      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x11e>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d877      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d03c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xfe>
 8004f54:	2b50      	cmp	r3, #80	; 0x50
 8004f56:	d873      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d058      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x13e>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d86f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d064      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15e>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d86b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d060      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15e>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d867      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15e>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d05a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15e>
 8004f78:	e062      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 fc03 	bl	8005794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e04f      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f000 fbec 	bl	8005794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e03c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fb60 	bl	80056a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2150      	movs	r1, #80	; 0x50
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fbb9 	bl	800575e <TIM_ITRx_SetConfig>
      break;
 8004fec:	e02c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fb7f 	bl	80056fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2160      	movs	r1, #96	; 0x60
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fba9 	bl	800575e <TIM_ITRx_SetConfig>
      break;
 800500c:	e01c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fb40 	bl	80056a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fb99 	bl	800575e <TIM_ITRx_SetConfig>
      break;
 800502c:	e00c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 fb90 	bl	800575e <TIM_ITRx_SetConfig>
      break;
 800503e:	e003      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e000      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a32      	ldr	r2, [pc, #200]	; (8005140 <TIM_Base_SetConfig+0xdc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_Base_SetConfig+0x28>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0x28>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a2f      	ldr	r2, [pc, #188]	; (8005144 <TIM_Base_SetConfig+0xe0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a27      	ldr	r2, [pc, #156]	; (8005140 <TIM_Base_SetConfig+0xdc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d013      	beq.n	80050ce <TIM_Base_SetConfig+0x6a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d00f      	beq.n	80050ce <TIM_Base_SetConfig+0x6a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a24      	ldr	r2, [pc, #144]	; (8005144 <TIM_Base_SetConfig+0xe0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00b      	beq.n	80050ce <TIM_Base_SetConfig+0x6a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <TIM_Base_SetConfig+0xe4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d007      	beq.n	80050ce <TIM_Base_SetConfig+0x6a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <TIM_Base_SetConfig+0xe8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <TIM_Base_SetConfig+0x6a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a21      	ldr	r2, [pc, #132]	; (8005150 <TIM_Base_SetConfig+0xec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d108      	bne.n	80050e0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <TIM_Base_SetConfig+0xdc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00b      	beq.n	8005124 <TIM_Base_SetConfig+0xc0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0e      	ldr	r2, [pc, #56]	; (8005148 <TIM_Base_SetConfig+0xe4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_Base_SetConfig+0xc0>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0d      	ldr	r2, [pc, #52]	; (800514c <TIM_Base_SetConfig+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_Base_SetConfig+0xc0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <TIM_Base_SetConfig+0xec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	615a      	str	r2, [r3, #20]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40000400 	.word	0x40000400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0302 	bic.w	r3, r3, #2
 80051a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a28      	ldr	r2, [pc, #160]	; (8005250 <TIM_OC1_SetConfig+0xfc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00b      	beq.n	80051cc <TIM_OC1_SetConfig+0x78>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a27      	ldr	r2, [pc, #156]	; (8005254 <TIM_OC1_SetConfig+0x100>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d007      	beq.n	80051cc <TIM_OC1_SetConfig+0x78>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a26      	ldr	r2, [pc, #152]	; (8005258 <TIM_OC1_SetConfig+0x104>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_OC1_SetConfig+0x78>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a25      	ldr	r2, [pc, #148]	; (800525c <TIM_OC1_SetConfig+0x108>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d10c      	bne.n	80051e6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f023 0308 	bic.w	r3, r3, #8
 80051d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a19      	ldr	r2, [pc, #100]	; (8005250 <TIM_OC1_SetConfig+0xfc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00b      	beq.n	8005206 <TIM_OC1_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <TIM_OC1_SetConfig+0x100>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d007      	beq.n	8005206 <TIM_OC1_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a17      	ldr	r2, [pc, #92]	; (8005258 <TIM_OC1_SetConfig+0x104>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d003      	beq.n	8005206 <TIM_OC1_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <TIM_OC1_SetConfig+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d111      	bne.n	800522a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f023 0320 	bic.w	r3, r3, #32
 80052ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <TIM_OC2_SetConfig+0xf0>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10d      	bne.n	80052e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1b      	ldr	r2, [pc, #108]	; (8005350 <TIM_OC2_SetConfig+0xf0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_OC2_SetConfig+0xa0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <TIM_OC2_SetConfig+0xf4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_OC2_SetConfig+0xa0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a19      	ldr	r2, [pc, #100]	; (8005358 <TIM_OC2_SetConfig+0xf8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_OC2_SetConfig+0xa0>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a18      	ldr	r2, [pc, #96]	; (800535c <TIM_OC2_SetConfig+0xfc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d113      	bne.n	8005328 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005306:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800530e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800

08005360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0303 	bic.w	r3, r3, #3
 800539a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a23      	ldr	r2, [pc, #140]	; (800544c <TIM_OC3_SetConfig+0xec>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10d      	bne.n	80053de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	021b      	lsls	r3, r3, #8
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053dc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1a      	ldr	r2, [pc, #104]	; (800544c <TIM_OC3_SetConfig+0xec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00b      	beq.n	80053fe <TIM_OC3_SetConfig+0x9e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a19      	ldr	r2, [pc, #100]	; (8005450 <TIM_OC3_SetConfig+0xf0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d007      	beq.n	80053fe <TIM_OC3_SetConfig+0x9e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <TIM_OC3_SetConfig+0xf4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d003      	beq.n	80053fe <TIM_OC3_SetConfig+0x9e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a17      	ldr	r2, [pc, #92]	; (8005458 <TIM_OC3_SetConfig+0xf8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40012c00 	.word	0x40012c00
 8005450:	40014000 	.word	0x40014000
 8005454:	40014400 	.word	0x40014400
 8005458:	40014800 	.word	0x40014800

0800545c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800548a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800548e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC4_SetConfig+0xb8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00b      	beq.n	80054d8 <TIM_OC4_SetConfig+0x7c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <TIM_OC4_SetConfig+0xbc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d007      	beq.n	80054d8 <TIM_OC4_SetConfig+0x7c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a14      	ldr	r2, [pc, #80]	; (800551c <TIM_OC4_SetConfig+0xc0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC4_SetConfig+0x7c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <TIM_OC4_SetConfig+0xc4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00
 8005518:	40014000 	.word	0x40014000
 800551c:	40014400 	.word	0x40014400
 8005520:	40014800 	.word	0x40014800

08005524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	041b      	lsls	r3, r3, #16
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <TIM_OC5_SetConfig+0xac>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_OC5_SetConfig+0x72>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a14      	ldr	r2, [pc, #80]	; (80055d4 <TIM_OC5_SetConfig+0xb0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_OC5_SetConfig+0x72>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <TIM_OC5_SetConfig+0xb4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC5_SetConfig+0x72>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a12      	ldr	r2, [pc, #72]	; (80055dc <TIM_OC5_SetConfig+0xb8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d109      	bne.n	80055aa <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	621a      	str	r2, [r3, #32]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	051b      	lsls	r3, r3, #20
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	4313      	orrs	r3, r2
 8005632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <TIM_OC6_SetConfig+0xb0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_OC6_SetConfig+0x74>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <TIM_OC6_SetConfig+0xb4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_OC6_SetConfig+0x74>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <TIM_OC6_SetConfig+0xb8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC6_SetConfig+0x74>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a13      	ldr	r2, [pc, #76]	; (800569c <TIM_OC6_SetConfig+0xbc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d109      	bne.n	8005668 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f023 0201 	bic.w	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 030a 	bic.w	r3, r3, #10
 80056dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056fe:	b480      	push	{r7}
 8005700:	b087      	sub	sp, #28
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0210 	bic.w	r2, r3, #16
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	031b      	lsls	r3, r3, #12
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800573a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	f043 0307 	orr.w	r3, r3, #7
 8005780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	609a      	str	r2, [r3, #8]
}
 8005788:	bf00      	nop
 800578a:	3714      	adds	r7, #20
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	021a      	lsls	r2, r3, #8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	609a      	str	r2, [r3, #8]
}
 80057c8:	bf00      	nop
 80057ca:	371c      	adds	r7, #28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	2201      	movs	r2, #1
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	43db      	mvns	r3, r3
 80057f6:	401a      	ands	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	fa01 f303 	lsl.w	r3, r1, r3
 800580c:	431a      	orrs	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <HAL_TIMEx_PWMN_Start+0x24>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	bf14      	ite	ne
 800583c:	2301      	movne	r3, #1
 800583e:	2300      	moveq	r3, #0
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e022      	b.n	800588a <HAL_TIMEx_PWMN_Start+0x6a>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b04      	cmp	r3, #4
 8005848:	d109      	bne.n	800585e <HAL_TIMEx_PWMN_Start+0x3e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b01      	cmp	r3, #1
 8005854:	bf14      	ite	ne
 8005856:	2301      	movne	r3, #1
 8005858:	2300      	moveq	r3, #0
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e015      	b.n	800588a <HAL_TIMEx_PWMN_Start+0x6a>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d109      	bne.n	8005878 <HAL_TIMEx_PWMN_Start+0x58>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e008      	b.n	800588a <HAL_TIMEx_PWMN_Start+0x6a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	bf14      	ite	ne
 8005884:	2301      	movne	r3, #1
 8005886:	2300      	moveq	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e05f      	b.n	8005952 <HAL_TIMEx_PWMN_Start+0x132>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <HAL_TIMEx_PWMN_Start+0x82>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058a0:	e013      	b.n	80058ca <HAL_TIMEx_PWMN_Start+0xaa>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d104      	bne.n	80058b2 <HAL_TIMEx_PWMN_Start+0x92>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b0:	e00b      	b.n	80058ca <HAL_TIMEx_PWMN_Start+0xaa>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d104      	bne.n	80058c2 <HAL_TIMEx_PWMN_Start+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c0:	e003      	b.n	80058ca <HAL_TIMEx_PWMN_Start+0xaa>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2204      	movs	r2, #4
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f930 	bl	8005b38 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_TIMEx_PWMN_Start+0x13c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00e      	beq.n	8005910 <HAL_TIMEx_PWMN_Start+0xf0>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d009      	beq.n	8005910 <HAL_TIMEx_PWMN_Start+0xf0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a17      	ldr	r2, [pc, #92]	; (8005960 <HAL_TIMEx_PWMN_Start+0x140>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <HAL_TIMEx_PWMN_Start+0xf0>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_TIMEx_PWMN_Start+0x144>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d115      	bne.n	800593c <HAL_TIMEx_PWMN_Start+0x11c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	4b14      	ldr	r3, [pc, #80]	; (8005968 <HAL_TIMEx_PWMN_Start+0x148>)
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2b06      	cmp	r3, #6
 8005920:	d015      	beq.n	800594e <HAL_TIMEx_PWMN_Start+0x12e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d011      	beq.n	800594e <HAL_TIMEx_PWMN_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	e008      	b.n	800594e <HAL_TIMEx_PWMN_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e000      	b.n	8005950 <HAL_TIMEx_PWMN_Start+0x130>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40000400 	.word	0x40000400
 8005964:	40014000 	.word	0x40014000
 8005968:	00010007 	.word	0x00010007

0800596c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e054      	b.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a24      	ldr	r2, [pc, #144]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80059b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d009      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10c      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40012c00 	.word	0x40012c00
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40014000 	.word	0x40014000

08005a48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e060      	b.n	8005b26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d115      	bne.n	8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	051b      	lsls	r3, r3, #20
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	40012c00 	.word	0x40012c00

08005b38 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e040      	b.n	8005c16 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7fb fd7b 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	; 0x24
 8005bae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f8c1 	bl	8005d48 <UART_SetConfig>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e022      	b.n	8005c16 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f9eb 	bl	8005fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005bec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005bfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa72 	bl	80060f8 <UART_CheckIdleState>
 8005c14:	4603      	mov	r3, r0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b08a      	sub	sp, #40	; 0x28
 8005c22:	af02      	add	r7, sp, #8
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	f040 8082 	bne.w	8005d3c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_UART_Transmit+0x26>
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e07a      	b.n	8005d3e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Transmit+0x38>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e073      	b.n	8005d3e <HAL_UART_Transmit+0x120>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2221      	movs	r2, #33	; 0x21
 8005c6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c6c:	f7fb feec 	bl	8001a48 <HAL_GetTick>
 8005c70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	88fa      	ldrh	r2, [r7, #6]
 8005c76:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d108      	bne.n	8005c9e <HAL_UART_Transmit+0x80>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	e003      	b.n	8005ca6 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005cae:	e02d      	b.n	8005d0c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2180      	movs	r1, #128	; 0x80
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fa65 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e039      	b.n	8005d3e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10b      	bne.n	8005ce8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	881a      	ldrh	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	3302      	adds	r3, #2
 8005ce4:	61bb      	str	r3, [r7, #24]
 8005ce6:	e008      	b.n	8005cfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	b292      	uxth	r2, r2
 8005cf2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1cb      	bne.n	8005cb0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa31 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e005      	b.n	8005d3e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005d3c:	2302      	movs	r3, #2
  }
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b8a      	ldr	r3, [pc, #552]	; (8005f9c <UART_SetConfig+0x254>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a78      	ldr	r2, [pc, #480]	; (8005fa0 <UART_SetConfig+0x258>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d120      	bne.n	8005e06 <UART_SetConfig+0xbe>
 8005dc4:	4b77      	ldr	r3, [pc, #476]	; (8005fa4 <UART_SetConfig+0x25c>)
 8005dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d817      	bhi.n	8005e00 <UART_SetConfig+0xb8>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <UART_SetConfig+0x90>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfb 	.word	0x08005dfb
 8005de4:	08005def 	.word	0x08005def
 8005de8:	2300      	movs	r3, #0
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e01d      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005dee:	2302      	movs	r3, #2
 8005df0:	77fb      	strb	r3, [r7, #31]
 8005df2:	e01a      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005df4:	2304      	movs	r3, #4
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e017      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	77fb      	strb	r3, [r7, #31]
 8005dfe:	e014      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005e00:	2310      	movs	r3, #16
 8005e02:	77fb      	strb	r3, [r7, #31]
 8005e04:	e011      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a67      	ldr	r2, [pc, #412]	; (8005fa8 <UART_SetConfig+0x260>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d102      	bne.n	8005e16 <UART_SetConfig+0xce>
 8005e10:	2300      	movs	r3, #0
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e009      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a64      	ldr	r2, [pc, #400]	; (8005fac <UART_SetConfig+0x264>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d102      	bne.n	8005e26 <UART_SetConfig+0xde>
 8005e20:	2300      	movs	r3, #0
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e001      	b.n	8005e2a <UART_SetConfig+0xe2>
 8005e26:	2310      	movs	r3, #16
 8005e28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e32:	d15b      	bne.n	8005eec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005e34:	7ffb      	ldrb	r3, [r7, #31]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d827      	bhi.n	8005e8a <UART_SetConfig+0x142>
 8005e3a:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0xf8>)
 8005e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e7b 	.word	0x08005e7b
 8005e54:	08005e8b 	.word	0x08005e8b
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	08005e83 	.word	0x08005e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe fc12 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8005e68:	61b8      	str	r0, [r7, #24]
        break;
 8005e6a:	e013      	b.n	8005e94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fe fc30 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b4e      	ldr	r3, [pc, #312]	; (8005fb0 <UART_SetConfig+0x268>)
 8005e76:	61bb      	str	r3, [r7, #24]
        break;
 8005e78:	e00c      	b.n	8005e94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fe fb91 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8005e7e:	61b8      	str	r0, [r7, #24]
        break;
 8005e80:	e008      	b.n	8005e94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e004      	b.n	8005e94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	77bb      	strb	r3, [r7, #30]
        break;
 8005e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d074      	beq.n	8005f84 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	005a      	lsls	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b0f      	cmp	r3, #15
 8005eb6:	d916      	bls.n	8005ee6 <UART_SetConfig+0x19e>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebe:	d212      	bcs.n	8005ee6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f023 030f 	bic.w	r3, r3, #15
 8005ec8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	89fa      	ldrh	r2, [r7, #14]
 8005ee2:	60da      	str	r2, [r3, #12]
 8005ee4:	e04e      	b.n	8005f84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	77bb      	strb	r3, [r7, #30]
 8005eea:	e04b      	b.n	8005f84 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d827      	bhi.n	8005f42 <UART_SetConfig+0x1fa>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x1b0>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f25 	.word	0x08005f25
 8005f00:	08005f2d 	.word	0x08005f2d
 8005f04:	08005f43 	.word	0x08005f43
 8005f08:	08005f33 	.word	0x08005f33
 8005f0c:	08005f43 	.word	0x08005f43
 8005f10:	08005f43 	.word	0x08005f43
 8005f14:	08005f43 	.word	0x08005f43
 8005f18:	08005f3b 	.word	0x08005f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1c:	f7fe fbb6 	bl	800468c <HAL_RCC_GetPCLK1Freq>
 8005f20:	61b8      	str	r0, [r7, #24]
        break;
 8005f22:	e013      	b.n	8005f4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f24:	f7fe fbd4 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8005f28:	61b8      	str	r0, [r7, #24]
        break;
 8005f2a:	e00f      	b.n	8005f4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <UART_SetConfig+0x268>)
 8005f2e:	61bb      	str	r3, [r7, #24]
        break;
 8005f30:	e00c      	b.n	8005f4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f32:	f7fe fb35 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8005f36:	61b8      	str	r0, [r7, #24]
        break;
 8005f38:	e008      	b.n	8005f4c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f3e:	61bb      	str	r3, [r7, #24]
        break;
 8005f40:	e004      	b.n	8005f4c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	77bb      	strb	r3, [r7, #30]
        break;
 8005f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d018      	beq.n	8005f84 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	085a      	lsrs	r2, r3, #1
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	441a      	add	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b0f      	cmp	r3, #15
 8005f6c:	d908      	bls.n	8005f80 <UART_SetConfig+0x238>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f74:	d204      	bcs.n	8005f80 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	e001      	b.n	8005f84 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f90:	7fbb      	ldrb	r3, [r7, #30]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	efff69f3 	.word	0xefff69f3
 8005fa0:	40013800 	.word	0x40013800
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40004400 	.word	0x40004400
 8005fac:	40004800 	.word	0x40004800
 8005fb0:	007a1200 	.word	0x007a1200

08005fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00a      	beq.n	8005fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00a      	beq.n	8006022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00a      	beq.n	8006066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	f003 0320 	and.w	r3, r3, #32
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01a      	beq.n	80060ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b2:	d10a      	bne.n	80060ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
  }
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006108:	f7fb fc9e 	bl	8001a48 <HAL_GetTick>
 800610c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b08      	cmp	r3, #8
 800611a:	d10e      	bne.n	800613a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800611c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f82d 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e023      	b.n	8006182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d10e      	bne.n	8006166 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f817 	bl	800618a <UART_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e00d      	b.n	8006182 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b09c      	sub	sp, #112	; 0x70
 800618e:	af00      	add	r7, sp, #0
 8006190:	60f8      	str	r0, [r7, #12]
 8006192:	60b9      	str	r1, [r7, #8]
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	4613      	mov	r3, r2
 8006198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619a:	e0a5      	b.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	f000 80a1 	beq.w	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fb fc4f 	bl	8001a48 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <UART_WaitOnFlagUntilTimeout+0x32>
 80061b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d13e      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80061ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061d0:	667b      	str	r3, [r7, #100]	; 0x64
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80061e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e6      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	663b      	str	r3, [r7, #96]	; 0x60
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800620e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800621c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e067      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d04f      	beq.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006256:	d147      	bne.n	80062e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006260:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	637b      	str	r3, [r7, #52]	; 0x34
 8006282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e6      	bne.n	8006262 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	613b      	str	r3, [r7, #16]
   return(result);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 0301 	bic.w	r3, r3, #1
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3308      	adds	r3, #8
 80062b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062b4:	623a      	str	r2, [r7, #32]
 80062b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e010      	b.n	800630a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	69da      	ldr	r2, [r3, #28]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	429a      	cmp	r2, r3
 8006304:	f43f af4a 	beq.w	800619c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3770      	adds	r7, #112	; 0x70
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000040 	.word	0x20000040

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f002 fdc2 	bl	8008ebc <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	0800938c 	.word	0x0800938c
 800635c:	0800938c 	.word	0x0800938c
 8006360:	0800938c 	.word	0x0800938c
 8006364:	08009390 	.word	0x08009390

08006368 <memset>:
 8006368:	4402      	add	r2, r0
 800636a:	4603      	mov	r3, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <__cvt>:
 8006378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	ec55 4b10 	vmov	r4, r5, d0
 8006380:	2d00      	cmp	r5, #0
 8006382:	460e      	mov	r6, r1
 8006384:	4619      	mov	r1, r3
 8006386:	462b      	mov	r3, r5
 8006388:	bfbb      	ittet	lt
 800638a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800638e:	461d      	movlt	r5, r3
 8006390:	2300      	movge	r3, #0
 8006392:	232d      	movlt	r3, #45	; 0x2d
 8006394:	700b      	strb	r3, [r1, #0]
 8006396:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006398:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800639c:	4691      	mov	r9, r2
 800639e:	f023 0820 	bic.w	r8, r3, #32
 80063a2:	bfbc      	itt	lt
 80063a4:	4622      	movlt	r2, r4
 80063a6:	4614      	movlt	r4, r2
 80063a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063ac:	d005      	beq.n	80063ba <__cvt+0x42>
 80063ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063b2:	d100      	bne.n	80063b6 <__cvt+0x3e>
 80063b4:	3601      	adds	r6, #1
 80063b6:	2102      	movs	r1, #2
 80063b8:	e000      	b.n	80063bc <__cvt+0x44>
 80063ba:	2103      	movs	r1, #3
 80063bc:	ab03      	add	r3, sp, #12
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	ab02      	add	r3, sp, #8
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	ec45 4b10 	vmov	d0, r4, r5
 80063c8:	4653      	mov	r3, sl
 80063ca:	4632      	mov	r2, r6
 80063cc:	f000 fe18 	bl	8007000 <_dtoa_r>
 80063d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063d4:	4607      	mov	r7, r0
 80063d6:	d102      	bne.n	80063de <__cvt+0x66>
 80063d8:	f019 0f01 	tst.w	r9, #1
 80063dc:	d022      	beq.n	8006424 <__cvt+0xac>
 80063de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063e2:	eb07 0906 	add.w	r9, r7, r6
 80063e6:	d110      	bne.n	800640a <__cvt+0x92>
 80063e8:	783b      	ldrb	r3, [r7, #0]
 80063ea:	2b30      	cmp	r3, #48	; 0x30
 80063ec:	d10a      	bne.n	8006404 <__cvt+0x8c>
 80063ee:	2200      	movs	r2, #0
 80063f0:	2300      	movs	r3, #0
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	f7fa fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80063fa:	b918      	cbnz	r0, 8006404 <__cvt+0x8c>
 80063fc:	f1c6 0601 	rsb	r6, r6, #1
 8006400:	f8ca 6000 	str.w	r6, [sl]
 8006404:	f8da 3000 	ldr.w	r3, [sl]
 8006408:	4499      	add	r9, r3
 800640a:	2200      	movs	r2, #0
 800640c:	2300      	movs	r3, #0
 800640e:	4620      	mov	r0, r4
 8006410:	4629      	mov	r1, r5
 8006412:	f7fa fb59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006416:	b108      	cbz	r0, 800641c <__cvt+0xa4>
 8006418:	f8cd 900c 	str.w	r9, [sp, #12]
 800641c:	2230      	movs	r2, #48	; 0x30
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	454b      	cmp	r3, r9
 8006422:	d307      	bcc.n	8006434 <__cvt+0xbc>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006428:	1bdb      	subs	r3, r3, r7
 800642a:	4638      	mov	r0, r7
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	b004      	add	sp, #16
 8006430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	9103      	str	r1, [sp, #12]
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e7f0      	b.n	800641e <__cvt+0xa6>

0800643c <__exponent>:
 800643c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800643e:	4603      	mov	r3, r0
 8006440:	2900      	cmp	r1, #0
 8006442:	bfb8      	it	lt
 8006444:	4249      	neglt	r1, r1
 8006446:	f803 2b02 	strb.w	r2, [r3], #2
 800644a:	bfb4      	ite	lt
 800644c:	222d      	movlt	r2, #45	; 0x2d
 800644e:	222b      	movge	r2, #43	; 0x2b
 8006450:	2909      	cmp	r1, #9
 8006452:	7042      	strb	r2, [r0, #1]
 8006454:	dd2a      	ble.n	80064ac <__exponent+0x70>
 8006456:	f10d 0407 	add.w	r4, sp, #7
 800645a:	46a4      	mov	ip, r4
 800645c:	270a      	movs	r7, #10
 800645e:	46a6      	mov	lr, r4
 8006460:	460a      	mov	r2, r1
 8006462:	fb91 f6f7 	sdiv	r6, r1, r7
 8006466:	fb07 1516 	mls	r5, r7, r6, r1
 800646a:	3530      	adds	r5, #48	; 0x30
 800646c:	2a63      	cmp	r2, #99	; 0x63
 800646e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006472:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006476:	4631      	mov	r1, r6
 8006478:	dcf1      	bgt.n	800645e <__exponent+0x22>
 800647a:	3130      	adds	r1, #48	; 0x30
 800647c:	f1ae 0502 	sub.w	r5, lr, #2
 8006480:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006484:	1c44      	adds	r4, r0, #1
 8006486:	4629      	mov	r1, r5
 8006488:	4561      	cmp	r1, ip
 800648a:	d30a      	bcc.n	80064a2 <__exponent+0x66>
 800648c:	f10d 0209 	add.w	r2, sp, #9
 8006490:	eba2 020e 	sub.w	r2, r2, lr
 8006494:	4565      	cmp	r5, ip
 8006496:	bf88      	it	hi
 8006498:	2200      	movhi	r2, #0
 800649a:	4413      	add	r3, r2
 800649c:	1a18      	subs	r0, r3, r0
 800649e:	b003      	add	sp, #12
 80064a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064aa:	e7ed      	b.n	8006488 <__exponent+0x4c>
 80064ac:	2330      	movs	r3, #48	; 0x30
 80064ae:	3130      	adds	r1, #48	; 0x30
 80064b0:	7083      	strb	r3, [r0, #2]
 80064b2:	70c1      	strb	r1, [r0, #3]
 80064b4:	1d03      	adds	r3, r0, #4
 80064b6:	e7f1      	b.n	800649c <__exponent+0x60>

080064b8 <_printf_float>:
 80064b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ed2d 8b02 	vpush	{d8}
 80064c0:	b08d      	sub	sp, #52	; 0x34
 80064c2:	460c      	mov	r4, r1
 80064c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064c8:	4616      	mov	r6, r2
 80064ca:	461f      	mov	r7, r3
 80064cc:	4605      	mov	r5, r0
 80064ce:	f001 fd3d 	bl	8007f4c <_localeconv_r>
 80064d2:	f8d0 a000 	ldr.w	sl, [r0]
 80064d6:	4650      	mov	r0, sl
 80064d8:	f7f9 fe7a 	bl	80001d0 <strlen>
 80064dc:	2300      	movs	r3, #0
 80064de:	930a      	str	r3, [sp, #40]	; 0x28
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	9305      	str	r3, [sp, #20]
 80064e4:	f8d8 3000 	ldr.w	r3, [r8]
 80064e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064ec:	3307      	adds	r3, #7
 80064ee:	f023 0307 	bic.w	r3, r3, #7
 80064f2:	f103 0208 	add.w	r2, r3, #8
 80064f6:	f8c8 2000 	str.w	r2, [r8]
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006502:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006506:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800650a:	9307      	str	r3, [sp, #28]
 800650c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006510:	ee08 0a10 	vmov	s16, r0
 8006514:	4b9f      	ldr	r3, [pc, #636]	; (8006794 <_printf_float+0x2dc>)
 8006516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	f7fa fb05 	bl	8000b2c <__aeabi_dcmpun>
 8006522:	bb88      	cbnz	r0, 8006588 <_printf_float+0xd0>
 8006524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006528:	4b9a      	ldr	r3, [pc, #616]	; (8006794 <_printf_float+0x2dc>)
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	f7fa fadf 	bl	8000af0 <__aeabi_dcmple>
 8006532:	bb48      	cbnz	r0, 8006588 <_printf_float+0xd0>
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	4640      	mov	r0, r8
 800653a:	4649      	mov	r1, r9
 800653c:	f7fa face 	bl	8000adc <__aeabi_dcmplt>
 8006540:	b110      	cbz	r0, 8006548 <_printf_float+0x90>
 8006542:	232d      	movs	r3, #45	; 0x2d
 8006544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006548:	4b93      	ldr	r3, [pc, #588]	; (8006798 <_printf_float+0x2e0>)
 800654a:	4894      	ldr	r0, [pc, #592]	; (800679c <_printf_float+0x2e4>)
 800654c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006550:	bf94      	ite	ls
 8006552:	4698      	movls	r8, r3
 8006554:	4680      	movhi	r8, r0
 8006556:	2303      	movs	r3, #3
 8006558:	6123      	str	r3, [r4, #16]
 800655a:	9b05      	ldr	r3, [sp, #20]
 800655c:	f023 0204 	bic.w	r2, r3, #4
 8006560:	6022      	str	r2, [r4, #0]
 8006562:	f04f 0900 	mov.w	r9, #0
 8006566:	9700      	str	r7, [sp, #0]
 8006568:	4633      	mov	r3, r6
 800656a:	aa0b      	add	r2, sp, #44	; 0x2c
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f000 f9d8 	bl	8006924 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	f040 8090 	bne.w	800669a <_printf_float+0x1e2>
 800657a:	f04f 30ff 	mov.w	r0, #4294967295
 800657e:	b00d      	add	sp, #52	; 0x34
 8006580:	ecbd 8b02 	vpop	{d8}
 8006584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006588:	4642      	mov	r2, r8
 800658a:	464b      	mov	r3, r9
 800658c:	4640      	mov	r0, r8
 800658e:	4649      	mov	r1, r9
 8006590:	f7fa facc 	bl	8000b2c <__aeabi_dcmpun>
 8006594:	b140      	cbz	r0, 80065a8 <_printf_float+0xf0>
 8006596:	464b      	mov	r3, r9
 8006598:	2b00      	cmp	r3, #0
 800659a:	bfbc      	itt	lt
 800659c:	232d      	movlt	r3, #45	; 0x2d
 800659e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065a2:	487f      	ldr	r0, [pc, #508]	; (80067a0 <_printf_float+0x2e8>)
 80065a4:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <_printf_float+0x2ec>)
 80065a6:	e7d1      	b.n	800654c <_printf_float+0x94>
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065ae:	9206      	str	r2, [sp, #24]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	d13f      	bne.n	8006634 <_printf_float+0x17c>
 80065b4:	2306      	movs	r3, #6
 80065b6:	6063      	str	r3, [r4, #4]
 80065b8:	9b05      	ldr	r3, [sp, #20]
 80065ba:	6861      	ldr	r1, [r4, #4]
 80065bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065c0:	2300      	movs	r3, #0
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	ab0a      	add	r3, sp, #40	; 0x28
 80065c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065ca:	ab09      	add	r3, sp, #36	; 0x24
 80065cc:	ec49 8b10 	vmov	d0, r8, r9
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	6022      	str	r2, [r4, #0]
 80065d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065d8:	4628      	mov	r0, r5
 80065da:	f7ff fecd 	bl	8006378 <__cvt>
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065e2:	2b47      	cmp	r3, #71	; 0x47
 80065e4:	4680      	mov	r8, r0
 80065e6:	d108      	bne.n	80065fa <_printf_float+0x142>
 80065e8:	1cc8      	adds	r0, r1, #3
 80065ea:	db02      	blt.n	80065f2 <_printf_float+0x13a>
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	4299      	cmp	r1, r3
 80065f0:	dd41      	ble.n	8006676 <_printf_float+0x1be>
 80065f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80065f6:	fa5f fb8b 	uxtb.w	fp, fp
 80065fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065fe:	d820      	bhi.n	8006642 <_printf_float+0x18a>
 8006600:	3901      	subs	r1, #1
 8006602:	465a      	mov	r2, fp
 8006604:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006608:	9109      	str	r1, [sp, #36]	; 0x24
 800660a:	f7ff ff17 	bl	800643c <__exponent>
 800660e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006610:	1813      	adds	r3, r2, r0
 8006612:	2a01      	cmp	r2, #1
 8006614:	4681      	mov	r9, r0
 8006616:	6123      	str	r3, [r4, #16]
 8006618:	dc02      	bgt.n	8006620 <_printf_float+0x168>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	07d2      	lsls	r2, r2, #31
 800661e:	d501      	bpl.n	8006624 <_printf_float+0x16c>
 8006620:	3301      	adds	r3, #1
 8006622:	6123      	str	r3, [r4, #16]
 8006624:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006628:	2b00      	cmp	r3, #0
 800662a:	d09c      	beq.n	8006566 <_printf_float+0xae>
 800662c:	232d      	movs	r3, #45	; 0x2d
 800662e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006632:	e798      	b.n	8006566 <_printf_float+0xae>
 8006634:	9a06      	ldr	r2, [sp, #24]
 8006636:	2a47      	cmp	r2, #71	; 0x47
 8006638:	d1be      	bne.n	80065b8 <_printf_float+0x100>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1bc      	bne.n	80065b8 <_printf_float+0x100>
 800663e:	2301      	movs	r3, #1
 8006640:	e7b9      	b.n	80065b6 <_printf_float+0xfe>
 8006642:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006646:	d118      	bne.n	800667a <_printf_float+0x1c2>
 8006648:	2900      	cmp	r1, #0
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	dd0b      	ble.n	8006666 <_printf_float+0x1ae>
 800664e:	6121      	str	r1, [r4, #16]
 8006650:	b913      	cbnz	r3, 8006658 <_printf_float+0x1a0>
 8006652:	6822      	ldr	r2, [r4, #0]
 8006654:	07d0      	lsls	r0, r2, #31
 8006656:	d502      	bpl.n	800665e <_printf_float+0x1a6>
 8006658:	3301      	adds	r3, #1
 800665a:	440b      	add	r3, r1
 800665c:	6123      	str	r3, [r4, #16]
 800665e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006660:	f04f 0900 	mov.w	r9, #0
 8006664:	e7de      	b.n	8006624 <_printf_float+0x16c>
 8006666:	b913      	cbnz	r3, 800666e <_printf_float+0x1b6>
 8006668:	6822      	ldr	r2, [r4, #0]
 800666a:	07d2      	lsls	r2, r2, #31
 800666c:	d501      	bpl.n	8006672 <_printf_float+0x1ba>
 800666e:	3302      	adds	r3, #2
 8006670:	e7f4      	b.n	800665c <_printf_float+0x1a4>
 8006672:	2301      	movs	r3, #1
 8006674:	e7f2      	b.n	800665c <_printf_float+0x1a4>
 8006676:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800667a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667c:	4299      	cmp	r1, r3
 800667e:	db05      	blt.n	800668c <_printf_float+0x1d4>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6121      	str	r1, [r4, #16]
 8006684:	07d8      	lsls	r0, r3, #31
 8006686:	d5ea      	bpl.n	800665e <_printf_float+0x1a6>
 8006688:	1c4b      	adds	r3, r1, #1
 800668a:	e7e7      	b.n	800665c <_printf_float+0x1a4>
 800668c:	2900      	cmp	r1, #0
 800668e:	bfd4      	ite	le
 8006690:	f1c1 0202 	rsble	r2, r1, #2
 8006694:	2201      	movgt	r2, #1
 8006696:	4413      	add	r3, r2
 8006698:	e7e0      	b.n	800665c <_printf_float+0x1a4>
 800669a:	6823      	ldr	r3, [r4, #0]
 800669c:	055a      	lsls	r2, r3, #21
 800669e:	d407      	bmi.n	80066b0 <_printf_float+0x1f8>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	4642      	mov	r2, r8
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	d12c      	bne.n	8006708 <_printf_float+0x250>
 80066ae:	e764      	b.n	800657a <_printf_float+0xc2>
 80066b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066b4:	f240 80e0 	bls.w	8006878 <_printf_float+0x3c0>
 80066b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066bc:	2200      	movs	r2, #0
 80066be:	2300      	movs	r3, #0
 80066c0:	f7fa fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d034      	beq.n	8006732 <_printf_float+0x27a>
 80066c8:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <_printf_float+0x2f0>)
 80066ca:	2301      	movs	r3, #1
 80066cc:	4631      	mov	r1, r6
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b8      	blx	r7
 80066d2:	3001      	adds	r0, #1
 80066d4:	f43f af51 	beq.w	800657a <_printf_float+0xc2>
 80066d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066dc:	429a      	cmp	r2, r3
 80066de:	db02      	blt.n	80066e6 <_printf_float+0x22e>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	07d8      	lsls	r0, r3, #31
 80066e4:	d510      	bpl.n	8006708 <_printf_float+0x250>
 80066e6:	ee18 3a10 	vmov	r3, s16
 80066ea:	4652      	mov	r2, sl
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	f43f af41 	beq.w	800657a <_printf_float+0xc2>
 80066f8:	f04f 0800 	mov.w	r8, #0
 80066fc:	f104 091a 	add.w	r9, r4, #26
 8006700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006702:	3b01      	subs	r3, #1
 8006704:	4543      	cmp	r3, r8
 8006706:	dc09      	bgt.n	800671c <_printf_float+0x264>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	079b      	lsls	r3, r3, #30
 800670c:	f100 8105 	bmi.w	800691a <_printf_float+0x462>
 8006710:	68e0      	ldr	r0, [r4, #12]
 8006712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006714:	4298      	cmp	r0, r3
 8006716:	bfb8      	it	lt
 8006718:	4618      	movlt	r0, r3
 800671a:	e730      	b.n	800657e <_printf_float+0xc6>
 800671c:	2301      	movs	r3, #1
 800671e:	464a      	mov	r2, r9
 8006720:	4631      	mov	r1, r6
 8006722:	4628      	mov	r0, r5
 8006724:	47b8      	blx	r7
 8006726:	3001      	adds	r0, #1
 8006728:	f43f af27 	beq.w	800657a <_printf_float+0xc2>
 800672c:	f108 0801 	add.w	r8, r8, #1
 8006730:	e7e6      	b.n	8006700 <_printf_float+0x248>
 8006732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	dc39      	bgt.n	80067ac <_printf_float+0x2f4>
 8006738:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <_printf_float+0x2f0>)
 800673a:	2301      	movs	r3, #1
 800673c:	4631      	mov	r1, r6
 800673e:	4628      	mov	r0, r5
 8006740:	47b8      	blx	r7
 8006742:	3001      	adds	r0, #1
 8006744:	f43f af19 	beq.w	800657a <_printf_float+0xc2>
 8006748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674c:	4313      	orrs	r3, r2
 800674e:	d102      	bne.n	8006756 <_printf_float+0x29e>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07d9      	lsls	r1, r3, #31
 8006754:	d5d8      	bpl.n	8006708 <_printf_float+0x250>
 8006756:	ee18 3a10 	vmov	r3, s16
 800675a:	4652      	mov	r2, sl
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af09 	beq.w	800657a <_printf_float+0xc2>
 8006768:	f04f 0900 	mov.w	r9, #0
 800676c:	f104 0a1a 	add.w	sl, r4, #26
 8006770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006772:	425b      	negs	r3, r3
 8006774:	454b      	cmp	r3, r9
 8006776:	dc01      	bgt.n	800677c <_printf_float+0x2c4>
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	e792      	b.n	80066a2 <_printf_float+0x1ea>
 800677c:	2301      	movs	r3, #1
 800677e:	4652      	mov	r2, sl
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f aef7 	beq.w	800657a <_printf_float+0xc2>
 800678c:	f109 0901 	add.w	r9, r9, #1
 8006790:	e7ee      	b.n	8006770 <_printf_float+0x2b8>
 8006792:	bf00      	nop
 8006794:	7fefffff 	.word	0x7fefffff
 8006798:	08008fb4 	.word	0x08008fb4
 800679c:	08008fb8 	.word	0x08008fb8
 80067a0:	08008fc0 	.word	0x08008fc0
 80067a4:	08008fbc 	.word	0x08008fbc
 80067a8:	08008fc4 	.word	0x08008fc4
 80067ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b0:	429a      	cmp	r2, r3
 80067b2:	bfa8      	it	ge
 80067b4:	461a      	movge	r2, r3
 80067b6:	2a00      	cmp	r2, #0
 80067b8:	4691      	mov	r9, r2
 80067ba:	dc37      	bgt.n	800682c <_printf_float+0x374>
 80067bc:	f04f 0b00 	mov.w	fp, #0
 80067c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c4:	f104 021a 	add.w	r2, r4, #26
 80067c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	eba3 0309 	sub.w	r3, r3, r9
 80067d0:	455b      	cmp	r3, fp
 80067d2:	dc33      	bgt.n	800683c <_printf_float+0x384>
 80067d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067d8:	429a      	cmp	r2, r3
 80067da:	db3b      	blt.n	8006854 <_printf_float+0x39c>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	07da      	lsls	r2, r3, #31
 80067e0:	d438      	bmi.n	8006854 <_printf_float+0x39c>
 80067e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067e8:	1a9a      	subs	r2, r3, r2
 80067ea:	eba3 0901 	sub.w	r9, r3, r1
 80067ee:	4591      	cmp	r9, r2
 80067f0:	bfa8      	it	ge
 80067f2:	4691      	movge	r9, r2
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	dc35      	bgt.n	8006866 <_printf_float+0x3ae>
 80067fa:	f04f 0800 	mov.w	r8, #0
 80067fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006802:	f104 0a1a 	add.w	sl, r4, #26
 8006806:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	eba3 0309 	sub.w	r3, r3, r9
 8006810:	4543      	cmp	r3, r8
 8006812:	f77f af79 	ble.w	8006708 <_printf_float+0x250>
 8006816:	2301      	movs	r3, #1
 8006818:	4652      	mov	r2, sl
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	f43f aeaa 	beq.w	800657a <_printf_float+0xc2>
 8006826:	f108 0801 	add.w	r8, r8, #1
 800682a:	e7ec      	b.n	8006806 <_printf_float+0x34e>
 800682c:	4613      	mov	r3, r2
 800682e:	4631      	mov	r1, r6
 8006830:	4642      	mov	r2, r8
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	d1c0      	bne.n	80067bc <_printf_float+0x304>
 800683a:	e69e      	b.n	800657a <_printf_float+0xc2>
 800683c:	2301      	movs	r3, #1
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	9205      	str	r2, [sp, #20]
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	f43f ae97 	beq.w	800657a <_printf_float+0xc2>
 800684c:	9a05      	ldr	r2, [sp, #20]
 800684e:	f10b 0b01 	add.w	fp, fp, #1
 8006852:	e7b9      	b.n	80067c8 <_printf_float+0x310>
 8006854:	ee18 3a10 	vmov	r3, s16
 8006858:	4652      	mov	r2, sl
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	d1be      	bne.n	80067e2 <_printf_float+0x32a>
 8006864:	e689      	b.n	800657a <_printf_float+0xc2>
 8006866:	9a05      	ldr	r2, [sp, #20]
 8006868:	464b      	mov	r3, r9
 800686a:	4442      	add	r2, r8
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	d1c1      	bne.n	80067fa <_printf_float+0x342>
 8006876:	e680      	b.n	800657a <_printf_float+0xc2>
 8006878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800687a:	2a01      	cmp	r2, #1
 800687c:	dc01      	bgt.n	8006882 <_printf_float+0x3ca>
 800687e:	07db      	lsls	r3, r3, #31
 8006880:	d538      	bpl.n	80068f4 <_printf_float+0x43c>
 8006882:	2301      	movs	r3, #1
 8006884:	4642      	mov	r2, r8
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f ae74 	beq.w	800657a <_printf_float+0xc2>
 8006892:	ee18 3a10 	vmov	r3, s16
 8006896:	4652      	mov	r2, sl
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f ae6b 	beq.w	800657a <_printf_float+0xc2>
 80068a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068a8:	2200      	movs	r2, #0
 80068aa:	2300      	movs	r3, #0
 80068ac:	f7fa f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 80068b0:	b9d8      	cbnz	r0, 80068ea <_printf_float+0x432>
 80068b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b4:	f108 0201 	add.w	r2, r8, #1
 80068b8:	3b01      	subs	r3, #1
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	d10e      	bne.n	80068e2 <_printf_float+0x42a>
 80068c4:	e659      	b.n	800657a <_printf_float+0xc2>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f ae52 	beq.w	800657a <_printf_float+0xc2>
 80068d6:	f108 0801 	add.w	r8, r8, #1
 80068da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	4543      	cmp	r3, r8
 80068e0:	dcf1      	bgt.n	80068c6 <_printf_float+0x40e>
 80068e2:	464b      	mov	r3, r9
 80068e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068e8:	e6dc      	b.n	80066a4 <_printf_float+0x1ec>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	f104 0a1a 	add.w	sl, r4, #26
 80068f2:	e7f2      	b.n	80068da <_printf_float+0x422>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4642      	mov	r2, r8
 80068f8:	e7df      	b.n	80068ba <_printf_float+0x402>
 80068fa:	2301      	movs	r3, #1
 80068fc:	464a      	mov	r2, r9
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f ae38 	beq.w	800657a <_printf_float+0xc2>
 800690a:	f108 0801 	add.w	r8, r8, #1
 800690e:	68e3      	ldr	r3, [r4, #12]
 8006910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006912:	1a5b      	subs	r3, r3, r1
 8006914:	4543      	cmp	r3, r8
 8006916:	dcf0      	bgt.n	80068fa <_printf_float+0x442>
 8006918:	e6fa      	b.n	8006710 <_printf_float+0x258>
 800691a:	f04f 0800 	mov.w	r8, #0
 800691e:	f104 0919 	add.w	r9, r4, #25
 8006922:	e7f4      	b.n	800690e <_printf_float+0x456>

08006924 <_printf_common>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	4616      	mov	r6, r2
 800692a:	4699      	mov	r9, r3
 800692c:	688a      	ldr	r2, [r1, #8]
 800692e:	690b      	ldr	r3, [r1, #16]
 8006930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006934:	4293      	cmp	r3, r2
 8006936:	bfb8      	it	lt
 8006938:	4613      	movlt	r3, r2
 800693a:	6033      	str	r3, [r6, #0]
 800693c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006940:	4607      	mov	r7, r0
 8006942:	460c      	mov	r4, r1
 8006944:	b10a      	cbz	r2, 800694a <_printf_common+0x26>
 8006946:	3301      	adds	r3, #1
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	0699      	lsls	r1, r3, #26
 800694e:	bf42      	ittt	mi
 8006950:	6833      	ldrmi	r3, [r6, #0]
 8006952:	3302      	addmi	r3, #2
 8006954:	6033      	strmi	r3, [r6, #0]
 8006956:	6825      	ldr	r5, [r4, #0]
 8006958:	f015 0506 	ands.w	r5, r5, #6
 800695c:	d106      	bne.n	800696c <_printf_common+0x48>
 800695e:	f104 0a19 	add.w	sl, r4, #25
 8006962:	68e3      	ldr	r3, [r4, #12]
 8006964:	6832      	ldr	r2, [r6, #0]
 8006966:	1a9b      	subs	r3, r3, r2
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc26      	bgt.n	80069ba <_printf_common+0x96>
 800696c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006970:	1e13      	subs	r3, r2, #0
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	bf18      	it	ne
 8006976:	2301      	movne	r3, #1
 8006978:	0692      	lsls	r2, r2, #26
 800697a:	d42b      	bmi.n	80069d4 <_printf_common+0xb0>
 800697c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006980:	4649      	mov	r1, r9
 8006982:	4638      	mov	r0, r7
 8006984:	47c0      	blx	r8
 8006986:	3001      	adds	r0, #1
 8006988:	d01e      	beq.n	80069c8 <_printf_common+0xa4>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	68e5      	ldr	r5, [r4, #12]
 800698e:	6832      	ldr	r2, [r6, #0]
 8006990:	f003 0306 	and.w	r3, r3, #6
 8006994:	2b04      	cmp	r3, #4
 8006996:	bf08      	it	eq
 8006998:	1aad      	subeq	r5, r5, r2
 800699a:	68a3      	ldr	r3, [r4, #8]
 800699c:	6922      	ldr	r2, [r4, #16]
 800699e:	bf0c      	ite	eq
 80069a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069a4:	2500      	movne	r5, #0
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bfc4      	itt	gt
 80069aa:	1a9b      	subgt	r3, r3, r2
 80069ac:	18ed      	addgt	r5, r5, r3
 80069ae:	2600      	movs	r6, #0
 80069b0:	341a      	adds	r4, #26
 80069b2:	42b5      	cmp	r5, r6
 80069b4:	d11a      	bne.n	80069ec <_printf_common+0xc8>
 80069b6:	2000      	movs	r0, #0
 80069b8:	e008      	b.n	80069cc <_printf_common+0xa8>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4652      	mov	r2, sl
 80069be:	4649      	mov	r1, r9
 80069c0:	4638      	mov	r0, r7
 80069c2:	47c0      	blx	r8
 80069c4:	3001      	adds	r0, #1
 80069c6:	d103      	bne.n	80069d0 <_printf_common+0xac>
 80069c8:	f04f 30ff 	mov.w	r0, #4294967295
 80069cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d0:	3501      	adds	r5, #1
 80069d2:	e7c6      	b.n	8006962 <_printf_common+0x3e>
 80069d4:	18e1      	adds	r1, r4, r3
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	2030      	movs	r0, #48	; 0x30
 80069da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069de:	4422      	add	r2, r4
 80069e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069e8:	3302      	adds	r3, #2
 80069ea:	e7c7      	b.n	800697c <_printf_common+0x58>
 80069ec:	2301      	movs	r3, #1
 80069ee:	4622      	mov	r2, r4
 80069f0:	4649      	mov	r1, r9
 80069f2:	4638      	mov	r0, r7
 80069f4:	47c0      	blx	r8
 80069f6:	3001      	adds	r0, #1
 80069f8:	d0e6      	beq.n	80069c8 <_printf_common+0xa4>
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7d9      	b.n	80069b2 <_printf_common+0x8e>
	...

08006a00 <_printf_i>:
 8006a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	7e0f      	ldrb	r7, [r1, #24]
 8006a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a08:	2f78      	cmp	r7, #120	; 0x78
 8006a0a:	4691      	mov	r9, r2
 8006a0c:	4680      	mov	r8, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	469a      	mov	sl, r3
 8006a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a16:	d807      	bhi.n	8006a28 <_printf_i+0x28>
 8006a18:	2f62      	cmp	r7, #98	; 0x62
 8006a1a:	d80a      	bhi.n	8006a32 <_printf_i+0x32>
 8006a1c:	2f00      	cmp	r7, #0
 8006a1e:	f000 80d8 	beq.w	8006bd2 <_printf_i+0x1d2>
 8006a22:	2f58      	cmp	r7, #88	; 0x58
 8006a24:	f000 80a3 	beq.w	8006b6e <_printf_i+0x16e>
 8006a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a30:	e03a      	b.n	8006aa8 <_printf_i+0xa8>
 8006a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a36:	2b15      	cmp	r3, #21
 8006a38:	d8f6      	bhi.n	8006a28 <_printf_i+0x28>
 8006a3a:	a101      	add	r1, pc, #4	; (adr r1, 8006a40 <_printf_i+0x40>)
 8006a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aad 	.word	0x08006aad
 8006a48:	08006a29 	.word	0x08006a29
 8006a4c:	08006a29 	.word	0x08006a29
 8006a50:	08006a29 	.word	0x08006a29
 8006a54:	08006a29 	.word	0x08006a29
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006a29 	.word	0x08006a29
 8006a60:	08006a29 	.word	0x08006a29
 8006a64:	08006a29 	.word	0x08006a29
 8006a68:	08006a29 	.word	0x08006a29
 8006a6c:	08006bb9 	.word	0x08006bb9
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006b9b 	.word	0x08006b9b
 8006a78:	08006a29 	.word	0x08006a29
 8006a7c:	08006a29 	.word	0x08006a29
 8006a80:	08006bdb 	.word	0x08006bdb
 8006a84:	08006a29 	.word	0x08006a29
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006a29 	.word	0x08006a29
 8006a90:	08006a29 	.word	0x08006a29
 8006a94:	08006ba3 	.word	0x08006ba3
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	1d1a      	adds	r2, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	602a      	str	r2, [r5, #0]
 8006aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0a3      	b.n	8006bf4 <_printf_i+0x1f4>
 8006aac:	6820      	ldr	r0, [r4, #0]
 8006aae:	6829      	ldr	r1, [r5, #0]
 8006ab0:	0606      	lsls	r6, r0, #24
 8006ab2:	f101 0304 	add.w	r3, r1, #4
 8006ab6:	d50a      	bpl.n	8006ace <_printf_i+0xce>
 8006ab8:	680e      	ldr	r6, [r1, #0]
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	da03      	bge.n	8006ac8 <_printf_i+0xc8>
 8006ac0:	232d      	movs	r3, #45	; 0x2d
 8006ac2:	4276      	negs	r6, r6
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac8:	485e      	ldr	r0, [pc, #376]	; (8006c44 <_printf_i+0x244>)
 8006aca:	230a      	movs	r3, #10
 8006acc:	e019      	b.n	8006b02 <_printf_i+0x102>
 8006ace:	680e      	ldr	r6, [r1, #0]
 8006ad0:	602b      	str	r3, [r5, #0]
 8006ad2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ad6:	bf18      	it	ne
 8006ad8:	b236      	sxthne	r6, r6
 8006ada:	e7ef      	b.n	8006abc <_printf_i+0xbc>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	1d19      	adds	r1, r3, #4
 8006ae2:	6029      	str	r1, [r5, #0]
 8006ae4:	0601      	lsls	r1, r0, #24
 8006ae6:	d501      	bpl.n	8006aec <_printf_i+0xec>
 8006ae8:	681e      	ldr	r6, [r3, #0]
 8006aea:	e002      	b.n	8006af2 <_printf_i+0xf2>
 8006aec:	0646      	lsls	r6, r0, #25
 8006aee:	d5fb      	bpl.n	8006ae8 <_printf_i+0xe8>
 8006af0:	881e      	ldrh	r6, [r3, #0]
 8006af2:	4854      	ldr	r0, [pc, #336]	; (8006c44 <_printf_i+0x244>)
 8006af4:	2f6f      	cmp	r7, #111	; 0x6f
 8006af6:	bf0c      	ite	eq
 8006af8:	2308      	moveq	r3, #8
 8006afa:	230a      	movne	r3, #10
 8006afc:	2100      	movs	r1, #0
 8006afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b02:	6865      	ldr	r5, [r4, #4]
 8006b04:	60a5      	str	r5, [r4, #8]
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	bfa2      	ittt	ge
 8006b0a:	6821      	ldrge	r1, [r4, #0]
 8006b0c:	f021 0104 	bicge.w	r1, r1, #4
 8006b10:	6021      	strge	r1, [r4, #0]
 8006b12:	b90e      	cbnz	r6, 8006b18 <_printf_i+0x118>
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	d04d      	beq.n	8006bb4 <_printf_i+0x1b4>
 8006b18:	4615      	mov	r5, r2
 8006b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b22:	5dc7      	ldrb	r7, [r0, r7]
 8006b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b28:	4637      	mov	r7, r6
 8006b2a:	42bb      	cmp	r3, r7
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	d9f4      	bls.n	8006b1a <_printf_i+0x11a>
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d10b      	bne.n	8006b4c <_printf_i+0x14c>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07de      	lsls	r6, r3, #31
 8006b38:	d508      	bpl.n	8006b4c <_printf_i+0x14c>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	6861      	ldr	r1, [r4, #4]
 8006b3e:	4299      	cmp	r1, r3
 8006b40:	bfde      	ittt	le
 8006b42:	2330      	movle	r3, #48	; 0x30
 8006b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b4c:	1b52      	subs	r2, r2, r5
 8006b4e:	6122      	str	r2, [r4, #16]
 8006b50:	f8cd a000 	str.w	sl, [sp]
 8006b54:	464b      	mov	r3, r9
 8006b56:	aa03      	add	r2, sp, #12
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4640      	mov	r0, r8
 8006b5c:	f7ff fee2 	bl	8006924 <_printf_common>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d14c      	bne.n	8006bfe <_printf_i+0x1fe>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b004      	add	sp, #16
 8006b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6e:	4835      	ldr	r0, [pc, #212]	; (8006c44 <_printf_i+0x244>)
 8006b70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b74:	6829      	ldr	r1, [r5, #0]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b7c:	6029      	str	r1, [r5, #0]
 8006b7e:	061d      	lsls	r5, r3, #24
 8006b80:	d514      	bpl.n	8006bac <_printf_i+0x1ac>
 8006b82:	07df      	lsls	r7, r3, #31
 8006b84:	bf44      	itt	mi
 8006b86:	f043 0320 	orrmi.w	r3, r3, #32
 8006b8a:	6023      	strmi	r3, [r4, #0]
 8006b8c:	b91e      	cbnz	r6, 8006b96 <_printf_i+0x196>
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f023 0320 	bic.w	r3, r3, #32
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	2310      	movs	r3, #16
 8006b98:	e7b0      	b.n	8006afc <_printf_i+0xfc>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	f043 0320 	orr.w	r3, r3, #32
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	2378      	movs	r3, #120	; 0x78
 8006ba4:	4828      	ldr	r0, [pc, #160]	; (8006c48 <_printf_i+0x248>)
 8006ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006baa:	e7e3      	b.n	8006b74 <_printf_i+0x174>
 8006bac:	0659      	lsls	r1, r3, #25
 8006bae:	bf48      	it	mi
 8006bb0:	b2b6      	uxthmi	r6, r6
 8006bb2:	e7e6      	b.n	8006b82 <_printf_i+0x182>
 8006bb4:	4615      	mov	r5, r2
 8006bb6:	e7bb      	b.n	8006b30 <_printf_i+0x130>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	6826      	ldr	r6, [r4, #0]
 8006bbc:	6961      	ldr	r1, [r4, #20]
 8006bbe:	1d18      	adds	r0, r3, #4
 8006bc0:	6028      	str	r0, [r5, #0]
 8006bc2:	0635      	lsls	r5, r6, #24
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	d501      	bpl.n	8006bcc <_printf_i+0x1cc>
 8006bc8:	6019      	str	r1, [r3, #0]
 8006bca:	e002      	b.n	8006bd2 <_printf_i+0x1d2>
 8006bcc:	0670      	lsls	r0, r6, #25
 8006bce:	d5fb      	bpl.n	8006bc8 <_printf_i+0x1c8>
 8006bd0:	8019      	strh	r1, [r3, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	4615      	mov	r5, r2
 8006bd8:	e7ba      	b.n	8006b50 <_printf_i+0x150>
 8006bda:	682b      	ldr	r3, [r5, #0]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	602a      	str	r2, [r5, #0]
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	2100      	movs	r1, #0
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7f9 fafa 	bl	80001e0 <memchr>
 8006bec:	b108      	cbz	r0, 8006bf2 <_printf_i+0x1f2>
 8006bee:	1b40      	subs	r0, r0, r5
 8006bf0:	6060      	str	r0, [r4, #4]
 8006bf2:	6863      	ldr	r3, [r4, #4]
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfc:	e7a8      	b.n	8006b50 <_printf_i+0x150>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	462a      	mov	r2, r5
 8006c02:	4649      	mov	r1, r9
 8006c04:	4640      	mov	r0, r8
 8006c06:	47d0      	blx	sl
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d0ab      	beq.n	8006b64 <_printf_i+0x164>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	079b      	lsls	r3, r3, #30
 8006c10:	d413      	bmi.n	8006c3a <_printf_i+0x23a>
 8006c12:	68e0      	ldr	r0, [r4, #12]
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	4298      	cmp	r0, r3
 8006c18:	bfb8      	it	lt
 8006c1a:	4618      	movlt	r0, r3
 8006c1c:	e7a4      	b.n	8006b68 <_printf_i+0x168>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4632      	mov	r2, r6
 8006c22:	4649      	mov	r1, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	47d0      	blx	sl
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d09b      	beq.n	8006b64 <_printf_i+0x164>
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	68e3      	ldr	r3, [r4, #12]
 8006c30:	9903      	ldr	r1, [sp, #12]
 8006c32:	1a5b      	subs	r3, r3, r1
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dcf2      	bgt.n	8006c1e <_printf_i+0x21e>
 8006c38:	e7eb      	b.n	8006c12 <_printf_i+0x212>
 8006c3a:	2500      	movs	r5, #0
 8006c3c:	f104 0619 	add.w	r6, r4, #25
 8006c40:	e7f5      	b.n	8006c2e <_printf_i+0x22e>
 8006c42:	bf00      	nop
 8006c44:	08008fc6 	.word	0x08008fc6
 8006c48:	08008fd7 	.word	0x08008fd7

08006c4c <iprintf>:
 8006c4c:	b40f      	push	{r0, r1, r2, r3}
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <iprintf+0x2c>)
 8006c50:	b513      	push	{r0, r1, r4, lr}
 8006c52:	681c      	ldr	r4, [r3, #0]
 8006c54:	b124      	cbz	r4, 8006c60 <iprintf+0x14>
 8006c56:	69a3      	ldr	r3, [r4, #24]
 8006c58:	b913      	cbnz	r3, 8006c60 <iprintf+0x14>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f001 f8d8 	bl	8007e10 <__sinit>
 8006c60:	ab05      	add	r3, sp, #20
 8006c62:	9a04      	ldr	r2, [sp, #16]
 8006c64:	68a1      	ldr	r1, [r4, #8]
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f001 fe95 	bl	8008998 <_vfiprintf_r>
 8006c6e:	b002      	add	sp, #8
 8006c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr
 8006c78:	20000040 	.word	0x20000040

08006c7c <_puts_r>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	460e      	mov	r6, r1
 8006c80:	4605      	mov	r5, r0
 8006c82:	b118      	cbz	r0, 8006c8c <_puts_r+0x10>
 8006c84:	6983      	ldr	r3, [r0, #24]
 8006c86:	b90b      	cbnz	r3, 8006c8c <_puts_r+0x10>
 8006c88:	f001 f8c2 	bl	8007e10 <__sinit>
 8006c8c:	69ab      	ldr	r3, [r5, #24]
 8006c8e:	68ac      	ldr	r4, [r5, #8]
 8006c90:	b913      	cbnz	r3, 8006c98 <_puts_r+0x1c>
 8006c92:	4628      	mov	r0, r5
 8006c94:	f001 f8bc 	bl	8007e10 <__sinit>
 8006c98:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <_puts_r+0xd0>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	d120      	bne.n	8006ce0 <_puts_r+0x64>
 8006c9e:	686c      	ldr	r4, [r5, #4]
 8006ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ca2:	07db      	lsls	r3, r3, #31
 8006ca4:	d405      	bmi.n	8006cb2 <_puts_r+0x36>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	0598      	lsls	r0, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_puts_r+0x36>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f001 f952 	bl	8007f56 <__retarget_lock_acquire_recursive>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	0719      	lsls	r1, r3, #28
 8006cb6:	d51d      	bpl.n	8006cf4 <_puts_r+0x78>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	b1db      	cbz	r3, 8006cf4 <_puts_r+0x78>
 8006cbc:	3e01      	subs	r6, #1
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	60a3      	str	r3, [r4, #8]
 8006cc8:	bb39      	cbnz	r1, 8006d1a <_puts_r+0x9e>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da38      	bge.n	8006d40 <_puts_r+0xc4>
 8006cce:	4622      	mov	r2, r4
 8006cd0:	210a      	movs	r1, #10
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	f000 f848 	bl	8006d68 <__swbuf_r>
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d011      	beq.n	8006d00 <_puts_r+0x84>
 8006cdc:	250a      	movs	r5, #10
 8006cde:	e011      	b.n	8006d04 <_puts_r+0x88>
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <_puts_r+0xd4>)
 8006ce2:	429c      	cmp	r4, r3
 8006ce4:	d101      	bne.n	8006cea <_puts_r+0x6e>
 8006ce6:	68ac      	ldr	r4, [r5, #8]
 8006ce8:	e7da      	b.n	8006ca0 <_puts_r+0x24>
 8006cea:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <_puts_r+0xd8>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	bf08      	it	eq
 8006cf0:	68ec      	ldreq	r4, [r5, #12]
 8006cf2:	e7d5      	b.n	8006ca0 <_puts_r+0x24>
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 f888 	bl	8006e0c <__swsetup_r>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d0dd      	beq.n	8006cbc <_puts_r+0x40>
 8006d00:	f04f 35ff 	mov.w	r5, #4294967295
 8006d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d06:	07da      	lsls	r2, r3, #31
 8006d08:	d405      	bmi.n	8006d16 <_puts_r+0x9a>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	059b      	lsls	r3, r3, #22
 8006d0e:	d402      	bmi.n	8006d16 <_puts_r+0x9a>
 8006d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d12:	f001 f921 	bl	8007f58 <__retarget_lock_release_recursive>
 8006d16:	4628      	mov	r0, r5
 8006d18:	bd70      	pop	{r4, r5, r6, pc}
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	da04      	bge.n	8006d28 <_puts_r+0xac>
 8006d1e:	69a2      	ldr	r2, [r4, #24]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	dc06      	bgt.n	8006d32 <_puts_r+0xb6>
 8006d24:	290a      	cmp	r1, #10
 8006d26:	d004      	beq.n	8006d32 <_puts_r+0xb6>
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	6022      	str	r2, [r4, #0]
 8006d2e:	7019      	strb	r1, [r3, #0]
 8006d30:	e7c5      	b.n	8006cbe <_puts_r+0x42>
 8006d32:	4622      	mov	r2, r4
 8006d34:	4628      	mov	r0, r5
 8006d36:	f000 f817 	bl	8006d68 <__swbuf_r>
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d1bf      	bne.n	8006cbe <_puts_r+0x42>
 8006d3e:	e7df      	b.n	8006d00 <_puts_r+0x84>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	250a      	movs	r5, #10
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	6022      	str	r2, [r4, #0]
 8006d48:	701d      	strb	r5, [r3, #0]
 8006d4a:	e7db      	b.n	8006d04 <_puts_r+0x88>
 8006d4c:	08009098 	.word	0x08009098
 8006d50:	080090b8 	.word	0x080090b8
 8006d54:	08009078 	.word	0x08009078

08006d58 <puts>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <puts+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f7ff bf8d 	b.w	8006c7c <_puts_r>
 8006d62:	bf00      	nop
 8006d64:	20000040 	.word	0x20000040

08006d68 <__swbuf_r>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	460e      	mov	r6, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b118      	cbz	r0, 8006d7a <__swbuf_r+0x12>
 8006d72:	6983      	ldr	r3, [r0, #24]
 8006d74:	b90b      	cbnz	r3, 8006d7a <__swbuf_r+0x12>
 8006d76:	f001 f84b 	bl	8007e10 <__sinit>
 8006d7a:	4b21      	ldr	r3, [pc, #132]	; (8006e00 <__swbuf_r+0x98>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d12b      	bne.n	8006dd8 <__swbuf_r+0x70>
 8006d80:	686c      	ldr	r4, [r5, #4]
 8006d82:	69a3      	ldr	r3, [r4, #24]
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	071a      	lsls	r2, r3, #28
 8006d8a:	d52f      	bpl.n	8006dec <__swbuf_r+0x84>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b36b      	cbz	r3, 8006dec <__swbuf_r+0x84>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	6820      	ldr	r0, [r4, #0]
 8006d94:	1ac0      	subs	r0, r0, r3
 8006d96:	6963      	ldr	r3, [r4, #20]
 8006d98:	b2f6      	uxtb	r6, r6
 8006d9a:	4283      	cmp	r3, r0
 8006d9c:	4637      	mov	r7, r6
 8006d9e:	dc04      	bgt.n	8006daa <__swbuf_r+0x42>
 8006da0:	4621      	mov	r1, r4
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 ffa0 	bl	8007ce8 <_fflush_r>
 8006da8:	bb30      	cbnz	r0, 8006df8 <__swbuf_r+0x90>
 8006daa:	68a3      	ldr	r3, [r4, #8]
 8006dac:	3b01      	subs	r3, #1
 8006dae:	60a3      	str	r3, [r4, #8]
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	6022      	str	r2, [r4, #0]
 8006db6:	701e      	strb	r6, [r3, #0]
 8006db8:	6963      	ldr	r3, [r4, #20]
 8006dba:	3001      	adds	r0, #1
 8006dbc:	4283      	cmp	r3, r0
 8006dbe:	d004      	beq.n	8006dca <__swbuf_r+0x62>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	07db      	lsls	r3, r3, #31
 8006dc4:	d506      	bpl.n	8006dd4 <__swbuf_r+0x6c>
 8006dc6:	2e0a      	cmp	r6, #10
 8006dc8:	d104      	bne.n	8006dd4 <__swbuf_r+0x6c>
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 ff8b 	bl	8007ce8 <_fflush_r>
 8006dd2:	b988      	cbnz	r0, 8006df8 <__swbuf_r+0x90>
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <__swbuf_r+0x9c>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <__swbuf_r+0x7a>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7cf      	b.n	8006d82 <__swbuf_r+0x1a>
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <__swbuf_r+0xa0>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7ca      	b.n	8006d82 <__swbuf_r+0x1a>
 8006dec:	4621      	mov	r1, r4
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 f80c 	bl	8006e0c <__swsetup_r>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d0cb      	beq.n	8006d90 <__swbuf_r+0x28>
 8006df8:	f04f 37ff 	mov.w	r7, #4294967295
 8006dfc:	e7ea      	b.n	8006dd4 <__swbuf_r+0x6c>
 8006dfe:	bf00      	nop
 8006e00:	08009098 	.word	0x08009098
 8006e04:	080090b8 	.word	0x080090b8
 8006e08:	08009078 	.word	0x08009078

08006e0c <__swsetup_r>:
 8006e0c:	4b32      	ldr	r3, [pc, #200]	; (8006ed8 <__swsetup_r+0xcc>)
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	4606      	mov	r6, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	b125      	cbz	r5, 8006e22 <__swsetup_r+0x16>
 8006e18:	69ab      	ldr	r3, [r5, #24]
 8006e1a:	b913      	cbnz	r3, 8006e22 <__swsetup_r+0x16>
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fff7 	bl	8007e10 <__sinit>
 8006e22:	4b2e      	ldr	r3, [pc, #184]	; (8006edc <__swsetup_r+0xd0>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	d10f      	bne.n	8006e48 <__swsetup_r+0x3c>
 8006e28:	686c      	ldr	r4, [r5, #4]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e30:	0719      	lsls	r1, r3, #28
 8006e32:	d42c      	bmi.n	8006e8e <__swsetup_r+0x82>
 8006e34:	06dd      	lsls	r5, r3, #27
 8006e36:	d411      	bmi.n	8006e5c <__swsetup_r+0x50>
 8006e38:	2309      	movs	r3, #9
 8006e3a:	6033      	str	r3, [r6, #0]
 8006e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	e03e      	b.n	8006ec6 <__swsetup_r+0xba>
 8006e48:	4b25      	ldr	r3, [pc, #148]	; (8006ee0 <__swsetup_r+0xd4>)
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	d101      	bne.n	8006e52 <__swsetup_r+0x46>
 8006e4e:	68ac      	ldr	r4, [r5, #8]
 8006e50:	e7eb      	b.n	8006e2a <__swsetup_r+0x1e>
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <__swsetup_r+0xd8>)
 8006e54:	429c      	cmp	r4, r3
 8006e56:	bf08      	it	eq
 8006e58:	68ec      	ldreq	r4, [r5, #12]
 8006e5a:	e7e6      	b.n	8006e2a <__swsetup_r+0x1e>
 8006e5c:	0758      	lsls	r0, r3, #29
 8006e5e:	d512      	bpl.n	8006e86 <__swsetup_r+0x7a>
 8006e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e62:	b141      	cbz	r1, 8006e76 <__swsetup_r+0x6a>
 8006e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	d002      	beq.n	8006e72 <__swsetup_r+0x66>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	f001 fc89 	bl	8008784 <_free_r>
 8006e72:	2300      	movs	r3, #0
 8006e74:	6363      	str	r3, [r4, #52]	; 0x34
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	f043 0308 	orr.w	r3, r3, #8
 8006e8c:	81a3      	strh	r3, [r4, #12]
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	b94b      	cbnz	r3, 8006ea6 <__swsetup_r+0x9a>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9c:	d003      	beq.n	8006ea6 <__swsetup_r+0x9a>
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	f001 f87f 	bl	8007fa4 <__smakebuf_r>
 8006ea6:	89a0      	ldrh	r0, [r4, #12]
 8006ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eac:	f010 0301 	ands.w	r3, r0, #1
 8006eb0:	d00a      	beq.n	8006ec8 <__swsetup_r+0xbc>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60a3      	str	r3, [r4, #8]
 8006eb6:	6963      	ldr	r3, [r4, #20]
 8006eb8:	425b      	negs	r3, r3
 8006eba:	61a3      	str	r3, [r4, #24]
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	b943      	cbnz	r3, 8006ed2 <__swsetup_r+0xc6>
 8006ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ec4:	d1ba      	bne.n	8006e3c <__swsetup_r+0x30>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	0781      	lsls	r1, r0, #30
 8006eca:	bf58      	it	pl
 8006ecc:	6963      	ldrpl	r3, [r4, #20]
 8006ece:	60a3      	str	r3, [r4, #8]
 8006ed0:	e7f4      	b.n	8006ebc <__swsetup_r+0xb0>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e7f7      	b.n	8006ec6 <__swsetup_r+0xba>
 8006ed6:	bf00      	nop
 8006ed8:	20000040 	.word	0x20000040
 8006edc:	08009098 	.word	0x08009098
 8006ee0:	080090b8 	.word	0x080090b8
 8006ee4:	08009078 	.word	0x08009078

08006ee8 <quorem>:
 8006ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	6903      	ldr	r3, [r0, #16]
 8006eee:	690c      	ldr	r4, [r1, #16]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f2c0 8081 	blt.w	8006ffa <quorem+0x112>
 8006ef8:	3c01      	subs	r4, #1
 8006efa:	f101 0814 	add.w	r8, r1, #20
 8006efe:	f100 0514 	add.w	r5, r0, #20
 8006f02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f06:	9301      	str	r3, [sp, #4]
 8006f08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f10:	3301      	adds	r3, #1
 8006f12:	429a      	cmp	r2, r3
 8006f14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f20:	d331      	bcc.n	8006f86 <quorem+0x9e>
 8006f22:	f04f 0e00 	mov.w	lr, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	46ac      	mov	ip, r5
 8006f2a:	46f2      	mov	sl, lr
 8006f2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f30:	b293      	uxth	r3, r2
 8006f32:	fb06 e303 	mla	r3, r6, r3, lr
 8006f36:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f40:	f8dc a000 	ldr.w	sl, [ip]
 8006f44:	0c12      	lsrs	r2, r2, #16
 8006f46:	fa13 f38a 	uxtah	r3, r3, sl
 8006f4a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f56:	b292      	uxth	r2, r2
 8006f58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f60:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f64:	4581      	cmp	r9, r0
 8006f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f6a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f72:	d2db      	bcs.n	8006f2c <quorem+0x44>
 8006f74:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f78:	b92b      	cbnz	r3, 8006f86 <quorem+0x9e>
 8006f7a:	9b01      	ldr	r3, [sp, #4]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	d32e      	bcc.n	8006fe2 <quorem+0xfa>
 8006f84:	613c      	str	r4, [r7, #16]
 8006f86:	4638      	mov	r0, r7
 8006f88:	f001 fae4 	bl	8008554 <__mcmp>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	db24      	blt.n	8006fda <quorem+0xf2>
 8006f90:	3601      	adds	r6, #1
 8006f92:	4628      	mov	r0, r5
 8006f94:	f04f 0c00 	mov.w	ip, #0
 8006f98:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f9c:	f8d0 e000 	ldr.w	lr, [r0]
 8006fa0:	b293      	uxth	r3, r2
 8006fa2:	ebac 0303 	sub.w	r3, ip, r3
 8006fa6:	0c12      	lsrs	r2, r2, #16
 8006fa8:	fa13 f38e 	uxtah	r3, r3, lr
 8006fac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fba:	45c1      	cmp	r9, r8
 8006fbc:	f840 3b04 	str.w	r3, [r0], #4
 8006fc0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fc4:	d2e8      	bcs.n	8006f98 <quorem+0xb0>
 8006fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fce:	b922      	cbnz	r2, 8006fda <quorem+0xf2>
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	429d      	cmp	r5, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	d30a      	bcc.n	8006fee <quorem+0x106>
 8006fd8:	613c      	str	r4, [r7, #16]
 8006fda:	4630      	mov	r0, r6
 8006fdc:	b003      	add	sp, #12
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	6812      	ldr	r2, [r2, #0]
 8006fe4:	3b04      	subs	r3, #4
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d1cc      	bne.n	8006f84 <quorem+0x9c>
 8006fea:	3c01      	subs	r4, #1
 8006fec:	e7c7      	b.n	8006f7e <quorem+0x96>
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	3b04      	subs	r3, #4
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <quorem+0xf0>
 8006ff6:	3c01      	subs	r4, #1
 8006ff8:	e7eb      	b.n	8006fd2 <quorem+0xea>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	e7ee      	b.n	8006fdc <quorem+0xf4>
	...

08007000 <_dtoa_r>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b04 	vpush	{d8-d9}
 8007008:	ec57 6b10 	vmov	r6, r7, d0
 800700c:	b093      	sub	sp, #76	; 0x4c
 800700e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007010:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007014:	9106      	str	r1, [sp, #24]
 8007016:	ee10 aa10 	vmov	sl, s0
 800701a:	4604      	mov	r4, r0
 800701c:	9209      	str	r2, [sp, #36]	; 0x24
 800701e:	930c      	str	r3, [sp, #48]	; 0x30
 8007020:	46bb      	mov	fp, r7
 8007022:	b975      	cbnz	r5, 8007042 <_dtoa_r+0x42>
 8007024:	2010      	movs	r0, #16
 8007026:	f000 fffd 	bl	8008024 <malloc>
 800702a:	4602      	mov	r2, r0
 800702c:	6260      	str	r0, [r4, #36]	; 0x24
 800702e:	b920      	cbnz	r0, 800703a <_dtoa_r+0x3a>
 8007030:	4ba7      	ldr	r3, [pc, #668]	; (80072d0 <_dtoa_r+0x2d0>)
 8007032:	21ea      	movs	r1, #234	; 0xea
 8007034:	48a7      	ldr	r0, [pc, #668]	; (80072d4 <_dtoa_r+0x2d4>)
 8007036:	f001 fe45 	bl	8008cc4 <__assert_func>
 800703a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800703e:	6005      	str	r5, [r0, #0]
 8007040:	60c5      	str	r5, [r0, #12]
 8007042:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	b151      	cbz	r1, 800705e <_dtoa_r+0x5e>
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	604a      	str	r2, [r1, #4]
 800704c:	2301      	movs	r3, #1
 800704e:	4093      	lsls	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
 8007052:	4620      	mov	r0, r4
 8007054:	f001 f83c 	bl	80080d0 <_Bfree>
 8007058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	1e3b      	subs	r3, r7, #0
 8007060:	bfaa      	itet	ge
 8007062:	2300      	movge	r3, #0
 8007064:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007068:	f8c8 3000 	strge.w	r3, [r8]
 800706c:	4b9a      	ldr	r3, [pc, #616]	; (80072d8 <_dtoa_r+0x2d8>)
 800706e:	bfbc      	itt	lt
 8007070:	2201      	movlt	r2, #1
 8007072:	f8c8 2000 	strlt.w	r2, [r8]
 8007076:	ea33 030b 	bics.w	r3, r3, fp
 800707a:	d11b      	bne.n	80070b4 <_dtoa_r+0xb4>
 800707c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800707e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007088:	4333      	orrs	r3, r6
 800708a:	f000 8592 	beq.w	8007bb2 <_dtoa_r+0xbb2>
 800708e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007090:	b963      	cbnz	r3, 80070ac <_dtoa_r+0xac>
 8007092:	4b92      	ldr	r3, [pc, #584]	; (80072dc <_dtoa_r+0x2dc>)
 8007094:	e022      	b.n	80070dc <_dtoa_r+0xdc>
 8007096:	4b92      	ldr	r3, [pc, #584]	; (80072e0 <_dtoa_r+0x2e0>)
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	3308      	adds	r3, #8
 800709c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	9801      	ldr	r0, [sp, #4]
 80070a2:	b013      	add	sp, #76	; 0x4c
 80070a4:	ecbd 8b04 	vpop	{d8-d9}
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	4b8b      	ldr	r3, [pc, #556]	; (80072dc <_dtoa_r+0x2dc>)
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	3303      	adds	r3, #3
 80070b2:	e7f3      	b.n	800709c <_dtoa_r+0x9c>
 80070b4:	2200      	movs	r2, #0
 80070b6:	2300      	movs	r3, #0
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	f7f9 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c0:	ec4b ab19 	vmov	d9, sl, fp
 80070c4:	4680      	mov	r8, r0
 80070c6:	b158      	cbz	r0, 80070e0 <_dtoa_r+0xe0>
 80070c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ca:	2301      	movs	r3, #1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 856b 	beq.w	8007bac <_dtoa_r+0xbac>
 80070d6:	4883      	ldr	r0, [pc, #524]	; (80072e4 <_dtoa_r+0x2e4>)
 80070d8:	6018      	str	r0, [r3, #0]
 80070da:	1e43      	subs	r3, r0, #1
 80070dc:	9301      	str	r3, [sp, #4]
 80070de:	e7df      	b.n	80070a0 <_dtoa_r+0xa0>
 80070e0:	ec4b ab10 	vmov	d0, sl, fp
 80070e4:	aa10      	add	r2, sp, #64	; 0x40
 80070e6:	a911      	add	r1, sp, #68	; 0x44
 80070e8:	4620      	mov	r0, r4
 80070ea:	f001 fad9 	bl	80086a0 <__d2b>
 80070ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80070f2:	ee08 0a10 	vmov	s16, r0
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	f000 8084 	beq.w	8007204 <_dtoa_r+0x204>
 80070fc:	ee19 3a90 	vmov	r3, s19
 8007100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007104:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007108:	4656      	mov	r6, sl
 800710a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800710e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007112:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007116:	4b74      	ldr	r3, [pc, #464]	; (80072e8 <_dtoa_r+0x2e8>)
 8007118:	2200      	movs	r2, #0
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f8b3 	bl	8000288 <__aeabi_dsub>
 8007122:	a365      	add	r3, pc, #404	; (adr r3, 80072b8 <_dtoa_r+0x2b8>)
 8007124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007128:	f7f9 fa66 	bl	80005f8 <__aeabi_dmul>
 800712c:	a364      	add	r3, pc, #400	; (adr r3, 80072c0 <_dtoa_r+0x2c0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 f8ab 	bl	800028c <__adddf3>
 8007136:	4606      	mov	r6, r0
 8007138:	4628      	mov	r0, r5
 800713a:	460f      	mov	r7, r1
 800713c:	f7f9 f9f2 	bl	8000524 <__aeabi_i2d>
 8007140:	a361      	add	r3, pc, #388	; (adr r3, 80072c8 <_dtoa_r+0x2c8>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 fa57 	bl	80005f8 <__aeabi_dmul>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	4630      	mov	r0, r6
 8007150:	4639      	mov	r1, r7
 8007152:	f7f9 f89b 	bl	800028c <__adddf3>
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	f7f9 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800715e:	2200      	movs	r2, #0
 8007160:	9000      	str	r0, [sp, #0]
 8007162:	2300      	movs	r3, #0
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800716c:	b150      	cbz	r0, 8007184 <_dtoa_r+0x184>
 800716e:	9800      	ldr	r0, [sp, #0]
 8007170:	f7f9 f9d8 	bl	8000524 <__aeabi_i2d>
 8007174:	4632      	mov	r2, r6
 8007176:	463b      	mov	r3, r7
 8007178:	f7f9 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800717c:	b910      	cbnz	r0, 8007184 <_dtoa_r+0x184>
 800717e:	9b00      	ldr	r3, [sp, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	2b16      	cmp	r3, #22
 8007188:	d85a      	bhi.n	8007240 <_dtoa_r+0x240>
 800718a:	9a00      	ldr	r2, [sp, #0]
 800718c:	4b57      	ldr	r3, [pc, #348]	; (80072ec <_dtoa_r+0x2ec>)
 800718e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	ec51 0b19 	vmov	r0, r1, d9
 800719a:	f7f9 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d050      	beq.n	8007244 <_dtoa_r+0x244>
 80071a2:	9b00      	ldr	r3, [sp, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80071ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ae:	1b5d      	subs	r5, r3, r5
 80071b0:	1e6b      	subs	r3, r5, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	bf45      	ittet	mi
 80071b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80071ba:	9304      	strmi	r3, [sp, #16]
 80071bc:	2300      	movpl	r3, #0
 80071be:	2300      	movmi	r3, #0
 80071c0:	bf4c      	ite	mi
 80071c2:	9305      	strmi	r3, [sp, #20]
 80071c4:	9304      	strpl	r3, [sp, #16]
 80071c6:	9b00      	ldr	r3, [sp, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db3d      	blt.n	8007248 <_dtoa_r+0x248>
 80071cc:	9b05      	ldr	r3, [sp, #20]
 80071ce:	9a00      	ldr	r2, [sp, #0]
 80071d0:	920a      	str	r2, [sp, #40]	; 0x28
 80071d2:	4413      	add	r3, r2
 80071d4:	9305      	str	r3, [sp, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	2b09      	cmp	r3, #9
 80071de:	f200 8089 	bhi.w	80072f4 <_dtoa_r+0x2f4>
 80071e2:	2b05      	cmp	r3, #5
 80071e4:	bfc4      	itt	gt
 80071e6:	3b04      	subgt	r3, #4
 80071e8:	9306      	strgt	r3, [sp, #24]
 80071ea:	9b06      	ldr	r3, [sp, #24]
 80071ec:	f1a3 0302 	sub.w	r3, r3, #2
 80071f0:	bfcc      	ite	gt
 80071f2:	2500      	movgt	r5, #0
 80071f4:	2501      	movle	r5, #1
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	f200 8087 	bhi.w	800730a <_dtoa_r+0x30a>
 80071fc:	e8df f003 	tbb	[pc, r3]
 8007200:	59383a2d 	.word	0x59383a2d
 8007204:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007208:	441d      	add	r5, r3
 800720a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800720e:	2b20      	cmp	r3, #32
 8007210:	bfc1      	itttt	gt
 8007212:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007216:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800721a:	fa0b f303 	lslgt.w	r3, fp, r3
 800721e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007222:	bfda      	itte	le
 8007224:	f1c3 0320 	rsble	r3, r3, #32
 8007228:	fa06 f003 	lslle.w	r0, r6, r3
 800722c:	4318      	orrgt	r0, r3
 800722e:	f7f9 f969 	bl	8000504 <__aeabi_ui2d>
 8007232:	2301      	movs	r3, #1
 8007234:	4606      	mov	r6, r0
 8007236:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800723a:	3d01      	subs	r5, #1
 800723c:	930e      	str	r3, [sp, #56]	; 0x38
 800723e:	e76a      	b.n	8007116 <_dtoa_r+0x116>
 8007240:	2301      	movs	r3, #1
 8007242:	e7b2      	b.n	80071aa <_dtoa_r+0x1aa>
 8007244:	900b      	str	r0, [sp, #44]	; 0x2c
 8007246:	e7b1      	b.n	80071ac <_dtoa_r+0x1ac>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	9a00      	ldr	r2, [sp, #0]
 800724c:	1a9b      	subs	r3, r3, r2
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	4253      	negs	r3, r2
 8007252:	9307      	str	r3, [sp, #28]
 8007254:	2300      	movs	r3, #0
 8007256:	930a      	str	r3, [sp, #40]	; 0x28
 8007258:	e7bf      	b.n	80071da <_dtoa_r+0x1da>
 800725a:	2300      	movs	r3, #0
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	2b00      	cmp	r3, #0
 8007262:	dc55      	bgt.n	8007310 <_dtoa_r+0x310>
 8007264:	2301      	movs	r3, #1
 8007266:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800726a:	461a      	mov	r2, r3
 800726c:	9209      	str	r2, [sp, #36]	; 0x24
 800726e:	e00c      	b.n	800728a <_dtoa_r+0x28a>
 8007270:	2301      	movs	r3, #1
 8007272:	e7f3      	b.n	800725c <_dtoa_r+0x25c>
 8007274:	2300      	movs	r3, #0
 8007276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007278:	9308      	str	r3, [sp, #32]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	4413      	add	r3, r2
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	3301      	adds	r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	bfb8      	it	lt
 8007288:	2301      	movlt	r3, #1
 800728a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800728c:	2200      	movs	r2, #0
 800728e:	6042      	str	r2, [r0, #4]
 8007290:	2204      	movs	r2, #4
 8007292:	f102 0614 	add.w	r6, r2, #20
 8007296:	429e      	cmp	r6, r3
 8007298:	6841      	ldr	r1, [r0, #4]
 800729a:	d93d      	bls.n	8007318 <_dtoa_r+0x318>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 fed7 	bl	8008050 <_Balloc>
 80072a2:	9001      	str	r0, [sp, #4]
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d13b      	bne.n	8007320 <_dtoa_r+0x320>
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <_dtoa_r+0x2f0>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80072b0:	e6c0      	b.n	8007034 <_dtoa_r+0x34>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7df      	b.n	8007276 <_dtoa_r+0x276>
 80072b6:	bf00      	nop
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	08008ff5 	.word	0x08008ff5
 80072d4:	0800900c 	.word	0x0800900c
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	08008ff1 	.word	0x08008ff1
 80072e0:	08008fe8 	.word	0x08008fe8
 80072e4:	08008fc5 	.word	0x08008fc5
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	08009160 	.word	0x08009160
 80072f0:	08009067 	.word	0x08009067
 80072f4:	2501      	movs	r5, #1
 80072f6:	2300      	movs	r3, #0
 80072f8:	9306      	str	r3, [sp, #24]
 80072fa:	9508      	str	r5, [sp, #32]
 80072fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007300:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	2312      	movs	r3, #18
 8007308:	e7b0      	b.n	800726c <_dtoa_r+0x26c>
 800730a:	2301      	movs	r3, #1
 800730c:	9308      	str	r3, [sp, #32]
 800730e:	e7f5      	b.n	80072fc <_dtoa_r+0x2fc>
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007316:	e7b8      	b.n	800728a <_dtoa_r+0x28a>
 8007318:	3101      	adds	r1, #1
 800731a:	6041      	str	r1, [r0, #4]
 800731c:	0052      	lsls	r2, r2, #1
 800731e:	e7b8      	b.n	8007292 <_dtoa_r+0x292>
 8007320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	2b0e      	cmp	r3, #14
 800732a:	f200 809d 	bhi.w	8007468 <_dtoa_r+0x468>
 800732e:	2d00      	cmp	r5, #0
 8007330:	f000 809a 	beq.w	8007468 <_dtoa_r+0x468>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd32      	ble.n	80073a0 <_dtoa_r+0x3a0>
 800733a:	4ab7      	ldr	r2, [pc, #732]	; (8007618 <_dtoa_r+0x618>)
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007344:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	05d8      	lsls	r0, r3, #23
 800734c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007350:	d516      	bpl.n	8007380 <_dtoa_r+0x380>
 8007352:	4bb2      	ldr	r3, [pc, #712]	; (800761c <_dtoa_r+0x61c>)
 8007354:	ec51 0b19 	vmov	r0, r1, d9
 8007358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800735c:	f7f9 fa76 	bl	800084c <__aeabi_ddiv>
 8007360:	f007 070f 	and.w	r7, r7, #15
 8007364:	4682      	mov	sl, r0
 8007366:	468b      	mov	fp, r1
 8007368:	2503      	movs	r5, #3
 800736a:	4eac      	ldr	r6, [pc, #688]	; (800761c <_dtoa_r+0x61c>)
 800736c:	b957      	cbnz	r7, 8007384 <_dtoa_r+0x384>
 800736e:	4642      	mov	r2, r8
 8007370:	464b      	mov	r3, r9
 8007372:	4650      	mov	r0, sl
 8007374:	4659      	mov	r1, fp
 8007376:	f7f9 fa69 	bl	800084c <__aeabi_ddiv>
 800737a:	4682      	mov	sl, r0
 800737c:	468b      	mov	fp, r1
 800737e:	e028      	b.n	80073d2 <_dtoa_r+0x3d2>
 8007380:	2502      	movs	r5, #2
 8007382:	e7f2      	b.n	800736a <_dtoa_r+0x36a>
 8007384:	07f9      	lsls	r1, r7, #31
 8007386:	d508      	bpl.n	800739a <_dtoa_r+0x39a>
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007390:	f7f9 f932 	bl	80005f8 <__aeabi_dmul>
 8007394:	3501      	adds	r5, #1
 8007396:	4680      	mov	r8, r0
 8007398:	4689      	mov	r9, r1
 800739a:	107f      	asrs	r7, r7, #1
 800739c:	3608      	adds	r6, #8
 800739e:	e7e5      	b.n	800736c <_dtoa_r+0x36c>
 80073a0:	f000 809b 	beq.w	80074da <_dtoa_r+0x4da>
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	4f9d      	ldr	r7, [pc, #628]	; (800761c <_dtoa_r+0x61c>)
 80073a8:	425e      	negs	r6, r3
 80073aa:	4b9b      	ldr	r3, [pc, #620]	; (8007618 <_dtoa_r+0x618>)
 80073ac:	f006 020f 	and.w	r2, r6, #15
 80073b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	ec51 0b19 	vmov	r0, r1, d9
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	1136      	asrs	r6, r6, #4
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	2300      	movs	r3, #0
 80073c8:	2502      	movs	r5, #2
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d17a      	bne.n	80074c4 <_dtoa_r+0x4c4>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1d3      	bne.n	800737a <_dtoa_r+0x37a>
 80073d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 8082 	beq.w	80074de <_dtoa_r+0x4de>
 80073da:	4b91      	ldr	r3, [pc, #580]	; (8007620 <_dtoa_r+0x620>)
 80073dc:	2200      	movs	r2, #0
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	f7f9 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d079      	beq.n	80074de <_dtoa_r+0x4de>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d076      	beq.n	80074de <_dtoa_r+0x4de>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd36      	ble.n	8007464 <_dtoa_r+0x464>
 80073f6:	9b00      	ldr	r3, [sp, #0]
 80073f8:	4650      	mov	r0, sl
 80073fa:	4659      	mov	r1, fp
 80073fc:	1e5f      	subs	r7, r3, #1
 80073fe:	2200      	movs	r2, #0
 8007400:	4b88      	ldr	r3, [pc, #544]	; (8007624 <_dtoa_r+0x624>)
 8007402:	f7f9 f8f9 	bl	80005f8 <__aeabi_dmul>
 8007406:	9e02      	ldr	r6, [sp, #8]
 8007408:	4682      	mov	sl, r0
 800740a:	468b      	mov	fp, r1
 800740c:	3501      	adds	r5, #1
 800740e:	4628      	mov	r0, r5
 8007410:	f7f9 f888 	bl	8000524 <__aeabi_i2d>
 8007414:	4652      	mov	r2, sl
 8007416:	465b      	mov	r3, fp
 8007418:	f7f9 f8ee 	bl	80005f8 <__aeabi_dmul>
 800741c:	4b82      	ldr	r3, [pc, #520]	; (8007628 <_dtoa_r+0x628>)
 800741e:	2200      	movs	r2, #0
 8007420:	f7f8 ff34 	bl	800028c <__adddf3>
 8007424:	46d0      	mov	r8, sl
 8007426:	46d9      	mov	r9, fp
 8007428:	4682      	mov	sl, r0
 800742a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800742e:	2e00      	cmp	r6, #0
 8007430:	d158      	bne.n	80074e4 <_dtoa_r+0x4e4>
 8007432:	4b7e      	ldr	r3, [pc, #504]	; (800762c <_dtoa_r+0x62c>)
 8007434:	2200      	movs	r2, #0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f8 ff25 	bl	8000288 <__aeabi_dsub>
 800743e:	4652      	mov	r2, sl
 8007440:	465b      	mov	r3, fp
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	f7f9 fb67 	bl	8000b18 <__aeabi_dcmpgt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 8295 	bne.w	800797a <_dtoa_r+0x97a>
 8007450:	4652      	mov	r2, sl
 8007452:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f9 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 8289 	bne.w	8007976 <_dtoa_r+0x976>
 8007464:	ec5b ab19 	vmov	sl, fp, d9
 8007468:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746a:	2b00      	cmp	r3, #0
 800746c:	f2c0 8148 	blt.w	8007700 <_dtoa_r+0x700>
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	2a0e      	cmp	r2, #14
 8007474:	f300 8144 	bgt.w	8007700 <_dtoa_r+0x700>
 8007478:	4b67      	ldr	r3, [pc, #412]	; (8007618 <_dtoa_r+0x618>)
 800747a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800747e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007484:	2b00      	cmp	r3, #0
 8007486:	f280 80d5 	bge.w	8007634 <_dtoa_r+0x634>
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f300 80d1 	bgt.w	8007634 <_dtoa_r+0x634>
 8007492:	f040 826f 	bne.w	8007974 <_dtoa_r+0x974>
 8007496:	4b65      	ldr	r3, [pc, #404]	; (800762c <_dtoa_r+0x62c>)
 8007498:	2200      	movs	r2, #0
 800749a:	4640      	mov	r0, r8
 800749c:	4649      	mov	r1, r9
 800749e:	f7f9 f8ab 	bl	80005f8 <__aeabi_dmul>
 80074a2:	4652      	mov	r2, sl
 80074a4:	465b      	mov	r3, fp
 80074a6:	f7f9 fb2d 	bl	8000b04 <__aeabi_dcmpge>
 80074aa:	9e03      	ldr	r6, [sp, #12]
 80074ac:	4637      	mov	r7, r6
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f040 8245 	bne.w	800793e <_dtoa_r+0x93e>
 80074b4:	9d01      	ldr	r5, [sp, #4]
 80074b6:	2331      	movs	r3, #49	; 0x31
 80074b8:	f805 3b01 	strb.w	r3, [r5], #1
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	3301      	adds	r3, #1
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	e240      	b.n	8007946 <_dtoa_r+0x946>
 80074c4:	07f2      	lsls	r2, r6, #31
 80074c6:	d505      	bpl.n	80074d4 <_dtoa_r+0x4d4>
 80074c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074cc:	f7f9 f894 	bl	80005f8 <__aeabi_dmul>
 80074d0:	3501      	adds	r5, #1
 80074d2:	2301      	movs	r3, #1
 80074d4:	1076      	asrs	r6, r6, #1
 80074d6:	3708      	adds	r7, #8
 80074d8:	e777      	b.n	80073ca <_dtoa_r+0x3ca>
 80074da:	2502      	movs	r5, #2
 80074dc:	e779      	b.n	80073d2 <_dtoa_r+0x3d2>
 80074de:	9f00      	ldr	r7, [sp, #0]
 80074e0:	9e03      	ldr	r6, [sp, #12]
 80074e2:	e794      	b.n	800740e <_dtoa_r+0x40e>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	4b4c      	ldr	r3, [pc, #304]	; (8007618 <_dtoa_r+0x618>)
 80074e8:	4431      	add	r1, r6
 80074ea:	910d      	str	r1, [sp, #52]	; 0x34
 80074ec:	9908      	ldr	r1, [sp, #32]
 80074ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d043      	beq.n	8007582 <_dtoa_r+0x582>
 80074fa:	494d      	ldr	r1, [pc, #308]	; (8007630 <_dtoa_r+0x630>)
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7f9 f9a5 	bl	800084c <__aeabi_ddiv>
 8007502:	4652      	mov	r2, sl
 8007504:	465b      	mov	r3, fp
 8007506:	f7f8 febf 	bl	8000288 <__aeabi_dsub>
 800750a:	9d01      	ldr	r5, [sp, #4]
 800750c:	4682      	mov	sl, r0
 800750e:	468b      	mov	fp, r1
 8007510:	4649      	mov	r1, r9
 8007512:	4640      	mov	r0, r8
 8007514:	f7f9 fb20 	bl	8000b58 <__aeabi_d2iz>
 8007518:	4606      	mov	r6, r0
 800751a:	f7f9 f803 	bl	8000524 <__aeabi_i2d>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 feaf 	bl	8000288 <__aeabi_dsub>
 800752a:	3630      	adds	r6, #48	; 0x30
 800752c:	f805 6b01 	strb.w	r6, [r5], #1
 8007530:	4652      	mov	r2, sl
 8007532:	465b      	mov	r3, fp
 8007534:	4680      	mov	r8, r0
 8007536:	4689      	mov	r9, r1
 8007538:	f7f9 fad0 	bl	8000adc <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	d163      	bne.n	8007608 <_dtoa_r+0x608>
 8007540:	4642      	mov	r2, r8
 8007542:	464b      	mov	r3, r9
 8007544:	4936      	ldr	r1, [pc, #216]	; (8007620 <_dtoa_r+0x620>)
 8007546:	2000      	movs	r0, #0
 8007548:	f7f8 fe9e 	bl	8000288 <__aeabi_dsub>
 800754c:	4652      	mov	r2, sl
 800754e:	465b      	mov	r3, fp
 8007550:	f7f9 fac4 	bl	8000adc <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f040 80b5 	bne.w	80076c4 <_dtoa_r+0x6c4>
 800755a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800755c:	429d      	cmp	r5, r3
 800755e:	d081      	beq.n	8007464 <_dtoa_r+0x464>
 8007560:	4b30      	ldr	r3, [pc, #192]	; (8007624 <_dtoa_r+0x624>)
 8007562:	2200      	movs	r2, #0
 8007564:	4650      	mov	r0, sl
 8007566:	4659      	mov	r1, fp
 8007568:	f7f9 f846 	bl	80005f8 <__aeabi_dmul>
 800756c:	4b2d      	ldr	r3, [pc, #180]	; (8007624 <_dtoa_r+0x624>)
 800756e:	4682      	mov	sl, r0
 8007570:	468b      	mov	fp, r1
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	2200      	movs	r2, #0
 8007578:	f7f9 f83e 	bl	80005f8 <__aeabi_dmul>
 800757c:	4680      	mov	r8, r0
 800757e:	4689      	mov	r9, r1
 8007580:	e7c6      	b.n	8007510 <_dtoa_r+0x510>
 8007582:	4650      	mov	r0, sl
 8007584:	4659      	mov	r1, fp
 8007586:	f7f9 f837 	bl	80005f8 <__aeabi_dmul>
 800758a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	4649      	mov	r1, r9
 8007596:	4640      	mov	r0, r8
 8007598:	f7f9 fade 	bl	8000b58 <__aeabi_d2iz>
 800759c:	4606      	mov	r6, r0
 800759e:	f7f8 ffc1 	bl	8000524 <__aeabi_i2d>
 80075a2:	3630      	adds	r6, #48	; 0x30
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f8 fe6c 	bl	8000288 <__aeabi_dsub>
 80075b0:	f805 6b01 	strb.w	r6, [r5], #1
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	429d      	cmp	r5, r3
 80075b8:	4680      	mov	r8, r0
 80075ba:	4689      	mov	r9, r1
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	d124      	bne.n	800760c <_dtoa_r+0x60c>
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <_dtoa_r+0x630>)
 80075c4:	4650      	mov	r0, sl
 80075c6:	4659      	mov	r1, fp
 80075c8:	f7f8 fe60 	bl	800028c <__adddf3>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4640      	mov	r0, r8
 80075d2:	4649      	mov	r1, r9
 80075d4:	f7f9 faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d173      	bne.n	80076c4 <_dtoa_r+0x6c4>
 80075dc:	4652      	mov	r2, sl
 80075de:	465b      	mov	r3, fp
 80075e0:	4913      	ldr	r1, [pc, #76]	; (8007630 <_dtoa_r+0x630>)
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 fa74 	bl	8000adc <__aeabi_dcmplt>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f43f af35 	beq.w	8007464 <_dtoa_r+0x464>
 80075fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075fc:	1e6b      	subs	r3, r5, #1
 80075fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007600:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007604:	2b30      	cmp	r3, #48	; 0x30
 8007606:	d0f8      	beq.n	80075fa <_dtoa_r+0x5fa>
 8007608:	9700      	str	r7, [sp, #0]
 800760a:	e049      	b.n	80076a0 <_dtoa_r+0x6a0>
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <_dtoa_r+0x624>)
 800760e:	f7f8 fff3 	bl	80005f8 <__aeabi_dmul>
 8007612:	4680      	mov	r8, r0
 8007614:	4689      	mov	r9, r1
 8007616:	e7bd      	b.n	8007594 <_dtoa_r+0x594>
 8007618:	08009160 	.word	0x08009160
 800761c:	08009138 	.word	0x08009138
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	40240000 	.word	0x40240000
 8007628:	401c0000 	.word	0x401c0000
 800762c:	40140000 	.word	0x40140000
 8007630:	3fe00000 	.word	0x3fe00000
 8007634:	9d01      	ldr	r5, [sp, #4]
 8007636:	4656      	mov	r6, sl
 8007638:	465f      	mov	r7, fp
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 f903 	bl	800084c <__aeabi_ddiv>
 8007646:	f7f9 fa87 	bl	8000b58 <__aeabi_d2iz>
 800764a:	4682      	mov	sl, r0
 800764c:	f7f8 ff6a 	bl	8000524 <__aeabi_i2d>
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	f7f8 ffd0 	bl	80005f8 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	f805 6b01 	strb.w	r6, [r5], #1
 800766c:	9e01      	ldr	r6, [sp, #4]
 800766e:	9f03      	ldr	r7, [sp, #12]
 8007670:	1bae      	subs	r6, r5, r6
 8007672:	42b7      	cmp	r7, r6
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	d135      	bne.n	80076e6 <_dtoa_r+0x6e6>
 800767a:	f7f8 fe07 	bl	800028c <__adddf3>
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7f9 fa47 	bl	8000b18 <__aeabi_dcmpgt>
 800768a:	b9d0      	cbnz	r0, 80076c2 <_dtoa_r+0x6c2>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007698:	b110      	cbz	r0, 80076a0 <_dtoa_r+0x6a0>
 800769a:	f01a 0f01 	tst.w	sl, #1
 800769e:	d110      	bne.n	80076c2 <_dtoa_r+0x6c2>
 80076a0:	4620      	mov	r0, r4
 80076a2:	ee18 1a10 	vmov	r1, s16
 80076a6:	f000 fd13 	bl	80080d0 <_Bfree>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9800      	ldr	r0, [sp, #0]
 80076ae:	702b      	strb	r3, [r5, #0]
 80076b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b2:	3001      	adds	r0, #1
 80076b4:	6018      	str	r0, [r3, #0]
 80076b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f43f acf1 	beq.w	80070a0 <_dtoa_r+0xa0>
 80076be:	601d      	str	r5, [r3, #0]
 80076c0:	e4ee      	b.n	80070a0 <_dtoa_r+0xa0>
 80076c2:	9f00      	ldr	r7, [sp, #0]
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a39      	cmp	r2, #57	; 0x39
 80076ce:	d106      	bne.n	80076de <_dtoa_r+0x6de>
 80076d0:	9a01      	ldr	r2, [sp, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1f7      	bne.n	80076c6 <_dtoa_r+0x6c6>
 80076d6:	9901      	ldr	r1, [sp, #4]
 80076d8:	2230      	movs	r2, #48	; 0x30
 80076da:	3701      	adds	r7, #1
 80076dc:	700a      	strb	r2, [r1, #0]
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	3201      	adds	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
 80076e4:	e790      	b.n	8007608 <_dtoa_r+0x608>
 80076e6:	4ba6      	ldr	r3, [pc, #664]	; (8007980 <_dtoa_r+0x980>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f7f8 ff85 	bl	80005f8 <__aeabi_dmul>
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	4606      	mov	r6, r0
 80076f4:	460f      	mov	r7, r1
 80076f6:	f7f9 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d09d      	beq.n	800763a <_dtoa_r+0x63a>
 80076fe:	e7cf      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007700:	9a08      	ldr	r2, [sp, #32]
 8007702:	2a00      	cmp	r2, #0
 8007704:	f000 80d7 	beq.w	80078b6 <_dtoa_r+0x8b6>
 8007708:	9a06      	ldr	r2, [sp, #24]
 800770a:	2a01      	cmp	r2, #1
 800770c:	f300 80ba 	bgt.w	8007884 <_dtoa_r+0x884>
 8007710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80b2 	beq.w	800787c <_dtoa_r+0x87c>
 8007718:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800771c:	9e07      	ldr	r6, [sp, #28]
 800771e:	9d04      	ldr	r5, [sp, #16]
 8007720:	9a04      	ldr	r2, [sp, #16]
 8007722:	441a      	add	r2, r3
 8007724:	9204      	str	r2, [sp, #16]
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	2101      	movs	r1, #1
 800772a:	441a      	add	r2, r3
 800772c:	4620      	mov	r0, r4
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	f000 fd86 	bl	8008240 <__i2b>
 8007734:	4607      	mov	r7, r0
 8007736:	2d00      	cmp	r5, #0
 8007738:	dd0c      	ble.n	8007754 <_dtoa_r+0x754>
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd09      	ble.n	8007754 <_dtoa_r+0x754>
 8007740:	42ab      	cmp	r3, r5
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	bfa8      	it	ge
 8007746:	462b      	movge	r3, r5
 8007748:	1ad2      	subs	r2, r2, r3
 800774a:	9204      	str	r2, [sp, #16]
 800774c:	9a05      	ldr	r2, [sp, #20]
 800774e:	1aed      	subs	r5, r5, r3
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	b31b      	cbz	r3, 80077a0 <_dtoa_r+0x7a0>
 8007758:	9b08      	ldr	r3, [sp, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80af 	beq.w	80078be <_dtoa_r+0x8be>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd13      	ble.n	800778c <_dtoa_r+0x78c>
 8007764:	4639      	mov	r1, r7
 8007766:	4632      	mov	r2, r6
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fe29 	bl	80083c0 <__pow5mult>
 800776e:	ee18 2a10 	vmov	r2, s16
 8007772:	4601      	mov	r1, r0
 8007774:	4607      	mov	r7, r0
 8007776:	4620      	mov	r0, r4
 8007778:	f000 fd78 	bl	800826c <__multiply>
 800777c:	ee18 1a10 	vmov	r1, s16
 8007780:	4680      	mov	r8, r0
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fca4 	bl	80080d0 <_Bfree>
 8007788:	ee08 8a10 	vmov	s16, r8
 800778c:	9b07      	ldr	r3, [sp, #28]
 800778e:	1b9a      	subs	r2, r3, r6
 8007790:	d006      	beq.n	80077a0 <_dtoa_r+0x7a0>
 8007792:	ee18 1a10 	vmov	r1, s16
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fe12 	bl	80083c0 <__pow5mult>
 800779c:	ee08 0a10 	vmov	s16, r0
 80077a0:	2101      	movs	r1, #1
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fd4c 	bl	8008240 <__i2b>
 80077a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	4606      	mov	r6, r0
 80077ae:	f340 8088 	ble.w	80078c2 <_dtoa_r+0x8c2>
 80077b2:	461a      	mov	r2, r3
 80077b4:	4601      	mov	r1, r0
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 fe02 	bl	80083c0 <__pow5mult>
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	4606      	mov	r6, r0
 80077c2:	f340 8081 	ble.w	80078c8 <_dtoa_r+0x8c8>
 80077c6:	f04f 0800 	mov.w	r8, #0
 80077ca:	6933      	ldr	r3, [r6, #16]
 80077cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077d0:	6918      	ldr	r0, [r3, #16]
 80077d2:	f000 fce5 	bl	80081a0 <__hi0bits>
 80077d6:	f1c0 0020 	rsb	r0, r0, #32
 80077da:	9b05      	ldr	r3, [sp, #20]
 80077dc:	4418      	add	r0, r3
 80077de:	f010 001f 	ands.w	r0, r0, #31
 80077e2:	f000 8092 	beq.w	800790a <_dtoa_r+0x90a>
 80077e6:	f1c0 0320 	rsb	r3, r0, #32
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	f340 808a 	ble.w	8007904 <_dtoa_r+0x904>
 80077f0:	f1c0 001c 	rsb	r0, r0, #28
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4403      	add	r3, r0
 80077f8:	9304      	str	r3, [sp, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	4403      	add	r3, r0
 80077fe:	4405      	add	r5, r0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	dd07      	ble.n	8007818 <_dtoa_r+0x818>
 8007808:	ee18 1a10 	vmov	r1, s16
 800780c:	461a      	mov	r2, r3
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fe30 	bl	8008474 <__lshift>
 8007814:	ee08 0a10 	vmov	s16, r0
 8007818:	9b05      	ldr	r3, [sp, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dd05      	ble.n	800782a <_dtoa_r+0x82a>
 800781e:	4631      	mov	r1, r6
 8007820:	461a      	mov	r2, r3
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fe26 	bl	8008474 <__lshift>
 8007828:	4606      	mov	r6, r0
 800782a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d06e      	beq.n	800790e <_dtoa_r+0x90e>
 8007830:	ee18 0a10 	vmov	r0, s16
 8007834:	4631      	mov	r1, r6
 8007836:	f000 fe8d 	bl	8008554 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	da67      	bge.n	800790e <_dtoa_r+0x90e>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	3b01      	subs	r3, #1
 8007842:	ee18 1a10 	vmov	r1, s16
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	220a      	movs	r2, #10
 800784a:	2300      	movs	r3, #0
 800784c:	4620      	mov	r0, r4
 800784e:	f000 fc61 	bl	8008114 <__multadd>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	ee08 0a10 	vmov	s16, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 81b1 	beq.w	8007bc0 <_dtoa_r+0xbc0>
 800785e:	2300      	movs	r3, #0
 8007860:	4639      	mov	r1, r7
 8007862:	220a      	movs	r2, #10
 8007864:	4620      	mov	r0, r4
 8007866:	f000 fc55 	bl	8008114 <__multadd>
 800786a:	9b02      	ldr	r3, [sp, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	4607      	mov	r7, r0
 8007870:	f300 808e 	bgt.w	8007990 <_dtoa_r+0x990>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	2b02      	cmp	r3, #2
 8007878:	dc51      	bgt.n	800791e <_dtoa_r+0x91e>
 800787a:	e089      	b.n	8007990 <_dtoa_r+0x990>
 800787c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800787e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007882:	e74b      	b.n	800771c <_dtoa_r+0x71c>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1e5e      	subs	r6, r3, #1
 8007888:	9b07      	ldr	r3, [sp, #28]
 800788a:	42b3      	cmp	r3, r6
 800788c:	bfbf      	itttt	lt
 800788e:	9b07      	ldrlt	r3, [sp, #28]
 8007890:	9607      	strlt	r6, [sp, #28]
 8007892:	1af2      	sublt	r2, r6, r3
 8007894:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007896:	bfb6      	itet	lt
 8007898:	189b      	addlt	r3, r3, r2
 800789a:	1b9e      	subge	r6, r3, r6
 800789c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	bfb8      	it	lt
 80078a2:	2600      	movlt	r6, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bfb7      	itett	lt
 80078a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80078ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80078b0:	1a9d      	sublt	r5, r3, r2
 80078b2:	2300      	movlt	r3, #0
 80078b4:	e734      	b.n	8007720 <_dtoa_r+0x720>
 80078b6:	9e07      	ldr	r6, [sp, #28]
 80078b8:	9d04      	ldr	r5, [sp, #16]
 80078ba:	9f08      	ldr	r7, [sp, #32]
 80078bc:	e73b      	b.n	8007736 <_dtoa_r+0x736>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	e767      	b.n	8007792 <_dtoa_r+0x792>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	dc18      	bgt.n	80078fa <_dtoa_r+0x8fa>
 80078c8:	f1ba 0f00 	cmp.w	sl, #0
 80078cc:	d115      	bne.n	80078fa <_dtoa_r+0x8fa>
 80078ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d2:	b993      	cbnz	r3, 80078fa <_dtoa_r+0x8fa>
 80078d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078d8:	0d1b      	lsrs	r3, r3, #20
 80078da:	051b      	lsls	r3, r3, #20
 80078dc:	b183      	cbz	r3, 8007900 <_dtoa_r+0x900>
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	9b05      	ldr	r3, [sp, #20]
 80078e6:	3301      	adds	r3, #1
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	f04f 0801 	mov.w	r8, #1
 80078ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f af6a 	bne.w	80077ca <_dtoa_r+0x7ca>
 80078f6:	2001      	movs	r0, #1
 80078f8:	e76f      	b.n	80077da <_dtoa_r+0x7da>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	e7f6      	b.n	80078ee <_dtoa_r+0x8ee>
 8007900:	4698      	mov	r8, r3
 8007902:	e7f4      	b.n	80078ee <_dtoa_r+0x8ee>
 8007904:	f43f af7d 	beq.w	8007802 <_dtoa_r+0x802>
 8007908:	4618      	mov	r0, r3
 800790a:	301c      	adds	r0, #28
 800790c:	e772      	b.n	80077f4 <_dtoa_r+0x7f4>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc37      	bgt.n	8007984 <_dtoa_r+0x984>
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	2b02      	cmp	r3, #2
 8007918:	dd34      	ble.n	8007984 <_dtoa_r+0x984>
 800791a:	9b03      	ldr	r3, [sp, #12]
 800791c:	9302      	str	r3, [sp, #8]
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	b96b      	cbnz	r3, 800793e <_dtoa_r+0x93e>
 8007922:	4631      	mov	r1, r6
 8007924:	2205      	movs	r2, #5
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fbf4 	bl	8008114 <__multadd>
 800792c:	4601      	mov	r1, r0
 800792e:	4606      	mov	r6, r0
 8007930:	ee18 0a10 	vmov	r0, s16
 8007934:	f000 fe0e 	bl	8008554 <__mcmp>
 8007938:	2800      	cmp	r0, #0
 800793a:	f73f adbb 	bgt.w	80074b4 <_dtoa_r+0x4b4>
 800793e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007940:	9d01      	ldr	r5, [sp, #4]
 8007942:	43db      	mvns	r3, r3
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	4631      	mov	r1, r6
 800794c:	4620      	mov	r0, r4
 800794e:	f000 fbbf 	bl	80080d0 <_Bfree>
 8007952:	2f00      	cmp	r7, #0
 8007954:	f43f aea4 	beq.w	80076a0 <_dtoa_r+0x6a0>
 8007958:	f1b8 0f00 	cmp.w	r8, #0
 800795c:	d005      	beq.n	800796a <_dtoa_r+0x96a>
 800795e:	45b8      	cmp	r8, r7
 8007960:	d003      	beq.n	800796a <_dtoa_r+0x96a>
 8007962:	4641      	mov	r1, r8
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fbb3 	bl	80080d0 <_Bfree>
 800796a:	4639      	mov	r1, r7
 800796c:	4620      	mov	r0, r4
 800796e:	f000 fbaf 	bl	80080d0 <_Bfree>
 8007972:	e695      	b.n	80076a0 <_dtoa_r+0x6a0>
 8007974:	2600      	movs	r6, #0
 8007976:	4637      	mov	r7, r6
 8007978:	e7e1      	b.n	800793e <_dtoa_r+0x93e>
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	4637      	mov	r7, r6
 800797e:	e599      	b.n	80074b4 <_dtoa_r+0x4b4>
 8007980:	40240000 	.word	0x40240000
 8007984:	9b08      	ldr	r3, [sp, #32]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 80ca 	beq.w	8007b20 <_dtoa_r+0xb20>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	9302      	str	r3, [sp, #8]
 8007990:	2d00      	cmp	r5, #0
 8007992:	dd05      	ble.n	80079a0 <_dtoa_r+0x9a0>
 8007994:	4639      	mov	r1, r7
 8007996:	462a      	mov	r2, r5
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fd6b 	bl	8008474 <__lshift>
 800799e:	4607      	mov	r7, r0
 80079a0:	f1b8 0f00 	cmp.w	r8, #0
 80079a4:	d05b      	beq.n	8007a5e <_dtoa_r+0xa5e>
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 fb51 	bl	8008050 <_Balloc>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b928      	cbnz	r0, 80079be <_dtoa_r+0x9be>
 80079b2:	4b87      	ldr	r3, [pc, #540]	; (8007bd0 <_dtoa_r+0xbd0>)
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80079ba:	f7ff bb3b 	b.w	8007034 <_dtoa_r+0x34>
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	f107 010c 	add.w	r1, r7, #12
 80079c8:	300c      	adds	r0, #12
 80079ca:	f000 fb33 	bl	8008034 <memcpy>
 80079ce:	2201      	movs	r2, #1
 80079d0:	4629      	mov	r1, r5
 80079d2:	4620      	mov	r0, r4
 80079d4:	f000 fd4e 	bl	8008474 <__lshift>
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	f103 0901 	add.w	r9, r3, #1
 80079de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80079e2:	4413      	add	r3, r2
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	f00a 0301 	and.w	r3, sl, #1
 80079ea:	46b8      	mov	r8, r7
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	4607      	mov	r7, r0
 80079f0:	4631      	mov	r1, r6
 80079f2:	ee18 0a10 	vmov	r0, s16
 80079f6:	f7ff fa77 	bl	8006ee8 <quorem>
 80079fa:	4641      	mov	r1, r8
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a02:	ee18 0a10 	vmov	r0, s16
 8007a06:	f000 fda5 	bl	8008554 <__mcmp>
 8007a0a:	463a      	mov	r2, r7
 8007a0c:	9003      	str	r0, [sp, #12]
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4620      	mov	r0, r4
 8007a12:	f000 fdbb 	bl	800858c <__mdiff>
 8007a16:	68c2      	ldr	r2, [r0, #12]
 8007a18:	f109 3bff 	add.w	fp, r9, #4294967295
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	bb02      	cbnz	r2, 8007a62 <_dtoa_r+0xa62>
 8007a20:	4601      	mov	r1, r0
 8007a22:	ee18 0a10 	vmov	r0, s16
 8007a26:	f000 fd95 	bl	8008554 <__mcmp>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4620      	mov	r0, r4
 8007a30:	9207      	str	r2, [sp, #28]
 8007a32:	f000 fb4d 	bl	80080d0 <_Bfree>
 8007a36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007a3a:	ea43 0102 	orr.w	r1, r3, r2
 8007a3e:	9b04      	ldr	r3, [sp, #16]
 8007a40:	430b      	orrs	r3, r1
 8007a42:	464d      	mov	r5, r9
 8007a44:	d10f      	bne.n	8007a66 <_dtoa_r+0xa66>
 8007a46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a4a:	d02a      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd02      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a52:	9b02      	ldr	r3, [sp, #8]
 8007a54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007a58:	f88b a000 	strb.w	sl, [fp]
 8007a5c:	e775      	b.n	800794a <_dtoa_r+0x94a>
 8007a5e:	4638      	mov	r0, r7
 8007a60:	e7ba      	b.n	80079d8 <_dtoa_r+0x9d8>
 8007a62:	2201      	movs	r2, #1
 8007a64:	e7e2      	b.n	8007a2c <_dtoa_r+0xa2c>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db04      	blt.n	8007a76 <_dtoa_r+0xa76>
 8007a6c:	9906      	ldr	r1, [sp, #24]
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	9904      	ldr	r1, [sp, #16]
 8007a72:	430b      	orrs	r3, r1
 8007a74:	d122      	bne.n	8007abc <_dtoa_r+0xabc>
 8007a76:	2a00      	cmp	r2, #0
 8007a78:	ddee      	ble.n	8007a58 <_dtoa_r+0xa58>
 8007a7a:	ee18 1a10 	vmov	r1, s16
 8007a7e:	2201      	movs	r2, #1
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fcf7 	bl	8008474 <__lshift>
 8007a86:	4631      	mov	r1, r6
 8007a88:	ee08 0a10 	vmov	s16, r0
 8007a8c:	f000 fd62 	bl	8008554 <__mcmp>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	dc03      	bgt.n	8007a9c <_dtoa_r+0xa9c>
 8007a94:	d1e0      	bne.n	8007a58 <_dtoa_r+0xa58>
 8007a96:	f01a 0f01 	tst.w	sl, #1
 8007a9a:	d0dd      	beq.n	8007a58 <_dtoa_r+0xa58>
 8007a9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007aa0:	d1d7      	bne.n	8007a52 <_dtoa_r+0xa52>
 8007aa2:	2339      	movs	r3, #57	; 0x39
 8007aa4:	f88b 3000 	strb.w	r3, [fp]
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	461d      	mov	r5, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ab2:	2a39      	cmp	r2, #57	; 0x39
 8007ab4:	d071      	beq.n	8007b9a <_dtoa_r+0xb9a>
 8007ab6:	3201      	adds	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	e746      	b.n	800794a <_dtoa_r+0x94a>
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	dd07      	ble.n	8007ad0 <_dtoa_r+0xad0>
 8007ac0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ac4:	d0ed      	beq.n	8007aa2 <_dtoa_r+0xaa2>
 8007ac6:	f10a 0301 	add.w	r3, sl, #1
 8007aca:	f88b 3000 	strb.w	r3, [fp]
 8007ace:	e73c      	b.n	800794a <_dtoa_r+0x94a>
 8007ad0:	9b05      	ldr	r3, [sp, #20]
 8007ad2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007ad6:	4599      	cmp	r9, r3
 8007ad8:	d047      	beq.n	8007b6a <_dtoa_r+0xb6a>
 8007ada:	ee18 1a10 	vmov	r1, s16
 8007ade:	2300      	movs	r3, #0
 8007ae0:	220a      	movs	r2, #10
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 fb16 	bl	8008114 <__multadd>
 8007ae8:	45b8      	cmp	r8, r7
 8007aea:	ee08 0a10 	vmov	s16, r0
 8007aee:	f04f 0300 	mov.w	r3, #0
 8007af2:	f04f 020a 	mov.w	r2, #10
 8007af6:	4641      	mov	r1, r8
 8007af8:	4620      	mov	r0, r4
 8007afa:	d106      	bne.n	8007b0a <_dtoa_r+0xb0a>
 8007afc:	f000 fb0a 	bl	8008114 <__multadd>
 8007b00:	4680      	mov	r8, r0
 8007b02:	4607      	mov	r7, r0
 8007b04:	f109 0901 	add.w	r9, r9, #1
 8007b08:	e772      	b.n	80079f0 <_dtoa_r+0x9f0>
 8007b0a:	f000 fb03 	bl	8008114 <__multadd>
 8007b0e:	4639      	mov	r1, r7
 8007b10:	4680      	mov	r8, r0
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fafc 	bl	8008114 <__multadd>
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	e7f1      	b.n	8007b04 <_dtoa_r+0xb04>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	9302      	str	r3, [sp, #8]
 8007b24:	9d01      	ldr	r5, [sp, #4]
 8007b26:	ee18 0a10 	vmov	r0, s16
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	f7ff f9dc 	bl	8006ee8 <quorem>
 8007b30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	f805 ab01 	strb.w	sl, [r5], #1
 8007b3a:	1aea      	subs	r2, r5, r3
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	dd09      	ble.n	8007b56 <_dtoa_r+0xb56>
 8007b42:	ee18 1a10 	vmov	r1, s16
 8007b46:	2300      	movs	r3, #0
 8007b48:	220a      	movs	r2, #10
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 fae2 	bl	8008114 <__multadd>
 8007b50:	ee08 0a10 	vmov	s16, r0
 8007b54:	e7e7      	b.n	8007b26 <_dtoa_r+0xb26>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bfc8      	it	gt
 8007b5c:	461d      	movgt	r5, r3
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	bfd8      	it	le
 8007b62:	2501      	movle	r5, #1
 8007b64:	441d      	add	r5, r3
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	ee18 1a10 	vmov	r1, s16
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fc7f 	bl	8008474 <__lshift>
 8007b76:	4631      	mov	r1, r6
 8007b78:	ee08 0a10 	vmov	s16, r0
 8007b7c:	f000 fcea 	bl	8008554 <__mcmp>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	dc91      	bgt.n	8007aa8 <_dtoa_r+0xaa8>
 8007b84:	d102      	bne.n	8007b8c <_dtoa_r+0xb8c>
 8007b86:	f01a 0f01 	tst.w	sl, #1
 8007b8a:	d18d      	bne.n	8007aa8 <_dtoa_r+0xaa8>
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	461d      	mov	r5, r3
 8007b90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b94:	2a30      	cmp	r2, #48	; 0x30
 8007b96:	d0fa      	beq.n	8007b8e <_dtoa_r+0xb8e>
 8007b98:	e6d7      	b.n	800794a <_dtoa_r+0x94a>
 8007b9a:	9a01      	ldr	r2, [sp, #4]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d184      	bne.n	8007aaa <_dtoa_r+0xaaa>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	2331      	movs	r3, #49	; 0x31
 8007ba8:	7013      	strb	r3, [r2, #0]
 8007baa:	e6ce      	b.n	800794a <_dtoa_r+0x94a>
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <_dtoa_r+0xbd4>)
 8007bae:	f7ff ba95 	b.w	80070dc <_dtoa_r+0xdc>
 8007bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f47f aa6e 	bne.w	8007096 <_dtoa_r+0x96>
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_dtoa_r+0xbd8>)
 8007bbc:	f7ff ba8e 	b.w	80070dc <_dtoa_r+0xdc>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	dcae      	bgt.n	8007b24 <_dtoa_r+0xb24>
 8007bc6:	9b06      	ldr	r3, [sp, #24]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	f73f aea8 	bgt.w	800791e <_dtoa_r+0x91e>
 8007bce:	e7a9      	b.n	8007b24 <_dtoa_r+0xb24>
 8007bd0:	08009067 	.word	0x08009067
 8007bd4:	08008fc4 	.word	0x08008fc4
 8007bd8:	08008fe8 	.word	0x08008fe8

08007bdc <__sflush_r>:
 8007bdc:	898a      	ldrh	r2, [r1, #12]
 8007bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	4605      	mov	r5, r0
 8007be4:	0710      	lsls	r0, r2, #28
 8007be6:	460c      	mov	r4, r1
 8007be8:	d458      	bmi.n	8007c9c <__sflush_r+0xc0>
 8007bea:	684b      	ldr	r3, [r1, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	dc05      	bgt.n	8007bfc <__sflush_r+0x20>
 8007bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dc02      	bgt.n	8007bfc <__sflush_r+0x20>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	d0f9      	beq.n	8007bf6 <__sflush_r+0x1a>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c08:	682f      	ldr	r7, [r5, #0]
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	d032      	beq.n	8007c74 <__sflush_r+0x98>
 8007c0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	075a      	lsls	r2, r3, #29
 8007c14:	d505      	bpl.n	8007c22 <__sflush_r+0x46>
 8007c16:	6863      	ldr	r3, [r4, #4]
 8007c18:	1ac0      	subs	r0, r0, r3
 8007c1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c1c:	b10b      	cbz	r3, 8007c22 <__sflush_r+0x46>
 8007c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c20:	1ac0      	subs	r0, r0, r3
 8007c22:	2300      	movs	r3, #0
 8007c24:	4602      	mov	r2, r0
 8007c26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c28:	6a21      	ldr	r1, [r4, #32]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	47b0      	blx	r6
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	d106      	bne.n	8007c42 <__sflush_r+0x66>
 8007c34:	6829      	ldr	r1, [r5, #0]
 8007c36:	291d      	cmp	r1, #29
 8007c38:	d82c      	bhi.n	8007c94 <__sflush_r+0xb8>
 8007c3a:	4a2a      	ldr	r2, [pc, #168]	; (8007ce4 <__sflush_r+0x108>)
 8007c3c:	40ca      	lsrs	r2, r1
 8007c3e:	07d6      	lsls	r6, r2, #31
 8007c40:	d528      	bpl.n	8007c94 <__sflush_r+0xb8>
 8007c42:	2200      	movs	r2, #0
 8007c44:	6062      	str	r2, [r4, #4]
 8007c46:	04d9      	lsls	r1, r3, #19
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	6022      	str	r2, [r4, #0]
 8007c4c:	d504      	bpl.n	8007c58 <__sflush_r+0x7c>
 8007c4e:	1c42      	adds	r2, r0, #1
 8007c50:	d101      	bne.n	8007c56 <__sflush_r+0x7a>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b903      	cbnz	r3, 8007c58 <__sflush_r+0x7c>
 8007c56:	6560      	str	r0, [r4, #84]	; 0x54
 8007c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c5a:	602f      	str	r7, [r5, #0]
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d0ca      	beq.n	8007bf6 <__sflush_r+0x1a>
 8007c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c64:	4299      	cmp	r1, r3
 8007c66:	d002      	beq.n	8007c6e <__sflush_r+0x92>
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fd8b 	bl	8008784 <_free_r>
 8007c6e:	2000      	movs	r0, #0
 8007c70:	6360      	str	r0, [r4, #52]	; 0x34
 8007c72:	e7c1      	b.n	8007bf8 <__sflush_r+0x1c>
 8007c74:	6a21      	ldr	r1, [r4, #32]
 8007c76:	2301      	movs	r3, #1
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b0      	blx	r6
 8007c7c:	1c41      	adds	r1, r0, #1
 8007c7e:	d1c7      	bne.n	8007c10 <__sflush_r+0x34>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0c4      	beq.n	8007c10 <__sflush_r+0x34>
 8007c86:	2b1d      	cmp	r3, #29
 8007c88:	d001      	beq.n	8007c8e <__sflush_r+0xb2>
 8007c8a:	2b16      	cmp	r3, #22
 8007c8c:	d101      	bne.n	8007c92 <__sflush_r+0xb6>
 8007c8e:	602f      	str	r7, [r5, #0]
 8007c90:	e7b1      	b.n	8007bf6 <__sflush_r+0x1a>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	e7ad      	b.n	8007bf8 <__sflush_r+0x1c>
 8007c9c:	690f      	ldr	r7, [r1, #16]
 8007c9e:	2f00      	cmp	r7, #0
 8007ca0:	d0a9      	beq.n	8007bf6 <__sflush_r+0x1a>
 8007ca2:	0793      	lsls	r3, r2, #30
 8007ca4:	680e      	ldr	r6, [r1, #0]
 8007ca6:	bf08      	it	eq
 8007ca8:	694b      	ldreq	r3, [r1, #20]
 8007caa:	600f      	str	r7, [r1, #0]
 8007cac:	bf18      	it	ne
 8007cae:	2300      	movne	r3, #0
 8007cb0:	eba6 0807 	sub.w	r8, r6, r7
 8007cb4:	608b      	str	r3, [r1, #8]
 8007cb6:	f1b8 0f00 	cmp.w	r8, #0
 8007cba:	dd9c      	ble.n	8007bf6 <__sflush_r+0x1a>
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cc0:	4643      	mov	r3, r8
 8007cc2:	463a      	mov	r2, r7
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b0      	blx	r6
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	dc06      	bgt.n	8007cda <__sflush_r+0xfe>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd2:	81a3      	strh	r3, [r4, #12]
 8007cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd8:	e78e      	b.n	8007bf8 <__sflush_r+0x1c>
 8007cda:	4407      	add	r7, r0
 8007cdc:	eba8 0800 	sub.w	r8, r8, r0
 8007ce0:	e7e9      	b.n	8007cb6 <__sflush_r+0xda>
 8007ce2:	bf00      	nop
 8007ce4:	20400001 	.word	0x20400001

08007ce8 <_fflush_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	690b      	ldr	r3, [r1, #16]
 8007cec:	4605      	mov	r5, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	b913      	cbnz	r3, 8007cf8 <_fflush_r+0x10>
 8007cf2:	2500      	movs	r5, #0
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	b118      	cbz	r0, 8007d02 <_fflush_r+0x1a>
 8007cfa:	6983      	ldr	r3, [r0, #24]
 8007cfc:	b90b      	cbnz	r3, 8007d02 <_fflush_r+0x1a>
 8007cfe:	f000 f887 	bl	8007e10 <__sinit>
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <_fflush_r+0x6c>)
 8007d04:	429c      	cmp	r4, r3
 8007d06:	d11b      	bne.n	8007d40 <_fflush_r+0x58>
 8007d08:	686c      	ldr	r4, [r5, #4]
 8007d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0ef      	beq.n	8007cf2 <_fflush_r+0xa>
 8007d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d14:	07d0      	lsls	r0, r2, #31
 8007d16:	d404      	bmi.n	8007d22 <_fflush_r+0x3a>
 8007d18:	0599      	lsls	r1, r3, #22
 8007d1a:	d402      	bmi.n	8007d22 <_fflush_r+0x3a>
 8007d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1e:	f000 f91a 	bl	8007f56 <__retarget_lock_acquire_recursive>
 8007d22:	4628      	mov	r0, r5
 8007d24:	4621      	mov	r1, r4
 8007d26:	f7ff ff59 	bl	8007bdc <__sflush_r>
 8007d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d2c:	07da      	lsls	r2, r3, #31
 8007d2e:	4605      	mov	r5, r0
 8007d30:	d4e0      	bmi.n	8007cf4 <_fflush_r+0xc>
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	059b      	lsls	r3, r3, #22
 8007d36:	d4dd      	bmi.n	8007cf4 <_fflush_r+0xc>
 8007d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3a:	f000 f90d 	bl	8007f58 <__retarget_lock_release_recursive>
 8007d3e:	e7d9      	b.n	8007cf4 <_fflush_r+0xc>
 8007d40:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <_fflush_r+0x70>)
 8007d42:	429c      	cmp	r4, r3
 8007d44:	d101      	bne.n	8007d4a <_fflush_r+0x62>
 8007d46:	68ac      	ldr	r4, [r5, #8]
 8007d48:	e7df      	b.n	8007d0a <_fflush_r+0x22>
 8007d4a:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <_fflush_r+0x74>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	bf08      	it	eq
 8007d50:	68ec      	ldreq	r4, [r5, #12]
 8007d52:	e7da      	b.n	8007d0a <_fflush_r+0x22>
 8007d54:	08009098 	.word	0x08009098
 8007d58:	080090b8 	.word	0x080090b8
 8007d5c:	08009078 	.word	0x08009078

08007d60 <std>:
 8007d60:	2300      	movs	r3, #0
 8007d62:	b510      	push	{r4, lr}
 8007d64:	4604      	mov	r4, r0
 8007d66:	e9c0 3300 	strd	r3, r3, [r0]
 8007d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d6e:	6083      	str	r3, [r0, #8]
 8007d70:	8181      	strh	r1, [r0, #12]
 8007d72:	6643      	str	r3, [r0, #100]	; 0x64
 8007d74:	81c2      	strh	r2, [r0, #14]
 8007d76:	6183      	str	r3, [r0, #24]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	305c      	adds	r0, #92	; 0x5c
 8007d7e:	f7fe faf3 	bl	8006368 <memset>
 8007d82:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <std+0x38>)
 8007d84:	6263      	str	r3, [r4, #36]	; 0x24
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <std+0x3c>)
 8007d88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <std+0x40>)
 8007d8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x44>)
 8007d90:	6224      	str	r4, [r4, #32]
 8007d92:	6323      	str	r3, [r4, #48]	; 0x30
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	08008c19 	.word	0x08008c19
 8007d9c:	08008c3b 	.word	0x08008c3b
 8007da0:	08008c73 	.word	0x08008c73
 8007da4:	08008c97 	.word	0x08008c97

08007da8 <_cleanup_r>:
 8007da8:	4901      	ldr	r1, [pc, #4]	; (8007db0 <_cleanup_r+0x8>)
 8007daa:	f000 b8af 	b.w	8007f0c <_fwalk_reent>
 8007dae:	bf00      	nop
 8007db0:	08007ce9 	.word	0x08007ce9

08007db4 <__sfmoreglue>:
 8007db4:	b570      	push	{r4, r5, r6, lr}
 8007db6:	2268      	movs	r2, #104	; 0x68
 8007db8:	1e4d      	subs	r5, r1, #1
 8007dba:	4355      	muls	r5, r2
 8007dbc:	460e      	mov	r6, r1
 8007dbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dc2:	f000 fd4b 	bl	800885c <_malloc_r>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	b140      	cbz	r0, 8007ddc <__sfmoreglue+0x28>
 8007dca:	2100      	movs	r1, #0
 8007dcc:	e9c0 1600 	strd	r1, r6, [r0]
 8007dd0:	300c      	adds	r0, #12
 8007dd2:	60a0      	str	r0, [r4, #8]
 8007dd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dd8:	f7fe fac6 	bl	8006368 <memset>
 8007ddc:	4620      	mov	r0, r4
 8007dde:	bd70      	pop	{r4, r5, r6, pc}

08007de0 <__sfp_lock_acquire>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__sfp_lock_acquire+0x8>)
 8007de2:	f000 b8b8 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000419 	.word	0x20000419

08007dec <__sfp_lock_release>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sfp_lock_release+0x8>)
 8007dee:	f000 b8b3 	b.w	8007f58 <__retarget_lock_release_recursive>
 8007df2:	bf00      	nop
 8007df4:	20000419 	.word	0x20000419

08007df8 <__sinit_lock_acquire>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sinit_lock_acquire+0x8>)
 8007dfa:	f000 b8ac 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8007dfe:	bf00      	nop
 8007e00:	2000041a 	.word	0x2000041a

08007e04 <__sinit_lock_release>:
 8007e04:	4801      	ldr	r0, [pc, #4]	; (8007e0c <__sinit_lock_release+0x8>)
 8007e06:	f000 b8a7 	b.w	8007f58 <__retarget_lock_release_recursive>
 8007e0a:	bf00      	nop
 8007e0c:	2000041a 	.word	0x2000041a

08007e10 <__sinit>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4604      	mov	r4, r0
 8007e14:	f7ff fff0 	bl	8007df8 <__sinit_lock_acquire>
 8007e18:	69a3      	ldr	r3, [r4, #24]
 8007e1a:	b11b      	cbz	r3, 8007e24 <__sinit+0x14>
 8007e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e20:	f7ff bff0 	b.w	8007e04 <__sinit_lock_release>
 8007e24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e28:	6523      	str	r3, [r4, #80]	; 0x50
 8007e2a:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <__sinit+0x68>)
 8007e2c:	4a13      	ldr	r2, [pc, #76]	; (8007e7c <__sinit+0x6c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e32:	42a3      	cmp	r3, r4
 8007e34:	bf04      	itt	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	61a3      	streq	r3, [r4, #24]
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 f820 	bl	8007e80 <__sfp>
 8007e40:	6060      	str	r0, [r4, #4]
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 f81c 	bl	8007e80 <__sfp>
 8007e48:	60a0      	str	r0, [r4, #8]
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f818 	bl	8007e80 <__sfp>
 8007e50:	2200      	movs	r2, #0
 8007e52:	60e0      	str	r0, [r4, #12]
 8007e54:	2104      	movs	r1, #4
 8007e56:	6860      	ldr	r0, [r4, #4]
 8007e58:	f7ff ff82 	bl	8007d60 <std>
 8007e5c:	68a0      	ldr	r0, [r4, #8]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	2109      	movs	r1, #9
 8007e62:	f7ff ff7d 	bl	8007d60 <std>
 8007e66:	68e0      	ldr	r0, [r4, #12]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	2112      	movs	r1, #18
 8007e6c:	f7ff ff78 	bl	8007d60 <std>
 8007e70:	2301      	movs	r3, #1
 8007e72:	61a3      	str	r3, [r4, #24]
 8007e74:	e7d2      	b.n	8007e1c <__sinit+0xc>
 8007e76:	bf00      	nop
 8007e78:	08008fb0 	.word	0x08008fb0
 8007e7c:	08007da9 	.word	0x08007da9

08007e80 <__sfp>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	4607      	mov	r7, r0
 8007e84:	f7ff ffac 	bl	8007de0 <__sfp_lock_acquire>
 8007e88:	4b1e      	ldr	r3, [pc, #120]	; (8007f04 <__sfp+0x84>)
 8007e8a:	681e      	ldr	r6, [r3, #0]
 8007e8c:	69b3      	ldr	r3, [r6, #24]
 8007e8e:	b913      	cbnz	r3, 8007e96 <__sfp+0x16>
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff ffbd 	bl	8007e10 <__sinit>
 8007e96:	3648      	adds	r6, #72	; 0x48
 8007e98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	d503      	bpl.n	8007ea8 <__sfp+0x28>
 8007ea0:	6833      	ldr	r3, [r6, #0]
 8007ea2:	b30b      	cbz	r3, 8007ee8 <__sfp+0x68>
 8007ea4:	6836      	ldr	r6, [r6, #0]
 8007ea6:	e7f7      	b.n	8007e98 <__sfp+0x18>
 8007ea8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007eac:	b9d5      	cbnz	r5, 8007ee4 <__sfp+0x64>
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <__sfp+0x88>)
 8007eb0:	60e3      	str	r3, [r4, #12]
 8007eb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007eb6:	6665      	str	r5, [r4, #100]	; 0x64
 8007eb8:	f000 f84c 	bl	8007f54 <__retarget_lock_init_recursive>
 8007ebc:	f7ff ff96 	bl	8007dec <__sfp_lock_release>
 8007ec0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ec4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ec8:	6025      	str	r5, [r4, #0]
 8007eca:	61a5      	str	r5, [r4, #24]
 8007ecc:	2208      	movs	r2, #8
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ed4:	f7fe fa48 	bl	8006368 <memset>
 8007ed8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007edc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee4:	3468      	adds	r4, #104	; 0x68
 8007ee6:	e7d9      	b.n	8007e9c <__sfp+0x1c>
 8007ee8:	2104      	movs	r1, #4
 8007eea:	4638      	mov	r0, r7
 8007eec:	f7ff ff62 	bl	8007db4 <__sfmoreglue>
 8007ef0:	4604      	mov	r4, r0
 8007ef2:	6030      	str	r0, [r6, #0]
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d1d5      	bne.n	8007ea4 <__sfp+0x24>
 8007ef8:	f7ff ff78 	bl	8007dec <__sfp_lock_release>
 8007efc:	230c      	movs	r3, #12
 8007efe:	603b      	str	r3, [r7, #0]
 8007f00:	e7ee      	b.n	8007ee0 <__sfp+0x60>
 8007f02:	bf00      	nop
 8007f04:	08008fb0 	.word	0x08008fb0
 8007f08:	ffff0001 	.word	0xffff0001

08007f0c <_fwalk_reent>:
 8007f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f10:	4606      	mov	r6, r0
 8007f12:	4688      	mov	r8, r1
 8007f14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f18:	2700      	movs	r7, #0
 8007f1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007f22:	d505      	bpl.n	8007f30 <_fwalk_reent+0x24>
 8007f24:	6824      	ldr	r4, [r4, #0]
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	d1f7      	bne.n	8007f1a <_fwalk_reent+0xe>
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d907      	bls.n	8007f46 <_fwalk_reent+0x3a>
 8007f36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	d003      	beq.n	8007f46 <_fwalk_reent+0x3a>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4630      	mov	r0, r6
 8007f42:	47c0      	blx	r8
 8007f44:	4307      	orrs	r7, r0
 8007f46:	3568      	adds	r5, #104	; 0x68
 8007f48:	e7e9      	b.n	8007f1e <_fwalk_reent+0x12>
	...

08007f4c <_localeconv_r>:
 8007f4c:	4800      	ldr	r0, [pc, #0]	; (8007f50 <_localeconv_r+0x4>)
 8007f4e:	4770      	bx	lr
 8007f50:	20000194 	.word	0x20000194

08007f54 <__retarget_lock_init_recursive>:
 8007f54:	4770      	bx	lr

08007f56 <__retarget_lock_acquire_recursive>:
 8007f56:	4770      	bx	lr

08007f58 <__retarget_lock_release_recursive>:
 8007f58:	4770      	bx	lr

08007f5a <__swhatbuf_r>:
 8007f5a:	b570      	push	{r4, r5, r6, lr}
 8007f5c:	460e      	mov	r6, r1
 8007f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f62:	2900      	cmp	r1, #0
 8007f64:	b096      	sub	sp, #88	; 0x58
 8007f66:	4614      	mov	r4, r2
 8007f68:	461d      	mov	r5, r3
 8007f6a:	da08      	bge.n	8007f7e <__swhatbuf_r+0x24>
 8007f6c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	602a      	str	r2, [r5, #0]
 8007f74:	061a      	lsls	r2, r3, #24
 8007f76:	d410      	bmi.n	8007f9a <__swhatbuf_r+0x40>
 8007f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7c:	e00e      	b.n	8007f9c <__swhatbuf_r+0x42>
 8007f7e:	466a      	mov	r2, sp
 8007f80:	f000 fee0 	bl	8008d44 <_fstat_r>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	dbf1      	blt.n	8007f6c <__swhatbuf_r+0x12>
 8007f88:	9a01      	ldr	r2, [sp, #4]
 8007f8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f92:	425a      	negs	r2, r3
 8007f94:	415a      	adcs	r2, r3
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	e7ee      	b.n	8007f78 <__swhatbuf_r+0x1e>
 8007f9a:	2340      	movs	r3, #64	; 0x40
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	b016      	add	sp, #88	; 0x58
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}

08007fa4 <__smakebuf_r>:
 8007fa4:	898b      	ldrh	r3, [r1, #12]
 8007fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa8:	079d      	lsls	r5, r3, #30
 8007faa:	4606      	mov	r6, r0
 8007fac:	460c      	mov	r4, r1
 8007fae:	d507      	bpl.n	8007fc0 <__smakebuf_r+0x1c>
 8007fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	6123      	str	r3, [r4, #16]
 8007fb8:	2301      	movs	r3, #1
 8007fba:	6163      	str	r3, [r4, #20]
 8007fbc:	b002      	add	sp, #8
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	ab01      	add	r3, sp, #4
 8007fc2:	466a      	mov	r2, sp
 8007fc4:	f7ff ffc9 	bl	8007f5a <__swhatbuf_r>
 8007fc8:	9900      	ldr	r1, [sp, #0]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f000 fc45 	bl	800885c <_malloc_r>
 8007fd2:	b948      	cbnz	r0, 8007fe8 <__smakebuf_r+0x44>
 8007fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d4ef      	bmi.n	8007fbc <__smakebuf_r+0x18>
 8007fdc:	f023 0303 	bic.w	r3, r3, #3
 8007fe0:	f043 0302 	orr.w	r3, r3, #2
 8007fe4:	81a3      	strh	r3, [r4, #12]
 8007fe6:	e7e3      	b.n	8007fb0 <__smakebuf_r+0xc>
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <__smakebuf_r+0x7c>)
 8007fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	6163      	str	r3, [r4, #20]
 8007ffa:	9b01      	ldr	r3, [sp, #4]
 8007ffc:	6120      	str	r0, [r4, #16]
 8007ffe:	b15b      	cbz	r3, 8008018 <__smakebuf_r+0x74>
 8008000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008004:	4630      	mov	r0, r6
 8008006:	f000 feaf 	bl	8008d68 <_isatty_r>
 800800a:	b128      	cbz	r0, 8008018 <__smakebuf_r+0x74>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f023 0303 	bic.w	r3, r3, #3
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	89a0      	ldrh	r0, [r4, #12]
 800801a:	4305      	orrs	r5, r0
 800801c:	81a5      	strh	r5, [r4, #12]
 800801e:	e7cd      	b.n	8007fbc <__smakebuf_r+0x18>
 8008020:	08007da9 	.word	0x08007da9

08008024 <malloc>:
 8008024:	4b02      	ldr	r3, [pc, #8]	; (8008030 <malloc+0xc>)
 8008026:	4601      	mov	r1, r0
 8008028:	6818      	ldr	r0, [r3, #0]
 800802a:	f000 bc17 	b.w	800885c <_malloc_r>
 800802e:	bf00      	nop
 8008030:	20000040 	.word	0x20000040

08008034 <memcpy>:
 8008034:	440a      	add	r2, r1
 8008036:	4291      	cmp	r1, r2
 8008038:	f100 33ff 	add.w	r3, r0, #4294967295
 800803c:	d100      	bne.n	8008040 <memcpy+0xc>
 800803e:	4770      	bx	lr
 8008040:	b510      	push	{r4, lr}
 8008042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804a:	4291      	cmp	r1, r2
 800804c:	d1f9      	bne.n	8008042 <memcpy+0xe>
 800804e:	bd10      	pop	{r4, pc}

08008050 <_Balloc>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008054:	4604      	mov	r4, r0
 8008056:	460d      	mov	r5, r1
 8008058:	b976      	cbnz	r6, 8008078 <_Balloc+0x28>
 800805a:	2010      	movs	r0, #16
 800805c:	f7ff ffe2 	bl	8008024 <malloc>
 8008060:	4602      	mov	r2, r0
 8008062:	6260      	str	r0, [r4, #36]	; 0x24
 8008064:	b920      	cbnz	r0, 8008070 <_Balloc+0x20>
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <_Balloc+0x78>)
 8008068:	4818      	ldr	r0, [pc, #96]	; (80080cc <_Balloc+0x7c>)
 800806a:	2166      	movs	r1, #102	; 0x66
 800806c:	f000 fe2a 	bl	8008cc4 <__assert_func>
 8008070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008074:	6006      	str	r6, [r0, #0]
 8008076:	60c6      	str	r6, [r0, #12]
 8008078:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800807a:	68f3      	ldr	r3, [r6, #12]
 800807c:	b183      	cbz	r3, 80080a0 <_Balloc+0x50>
 800807e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008086:	b9b8      	cbnz	r0, 80080b8 <_Balloc+0x68>
 8008088:	2101      	movs	r1, #1
 800808a:	fa01 f605 	lsl.w	r6, r1, r5
 800808e:	1d72      	adds	r2, r6, #5
 8008090:	0092      	lsls	r2, r2, #2
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fb60 	bl	8008758 <_calloc_r>
 8008098:	b160      	cbz	r0, 80080b4 <_Balloc+0x64>
 800809a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809e:	e00e      	b.n	80080be <_Balloc+0x6e>
 80080a0:	2221      	movs	r2, #33	; 0x21
 80080a2:	2104      	movs	r1, #4
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fb57 	bl	8008758 <_calloc_r>
 80080aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ac:	60f0      	str	r0, [r6, #12]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e4      	bne.n	800807e <_Balloc+0x2e>
 80080b4:	2000      	movs	r0, #0
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	6802      	ldr	r2, [r0, #0]
 80080ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080be:	2300      	movs	r3, #0
 80080c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c4:	e7f7      	b.n	80080b6 <_Balloc+0x66>
 80080c6:	bf00      	nop
 80080c8:	08008ff5 	.word	0x08008ff5
 80080cc:	080090d8 	.word	0x080090d8

080080d0 <_Bfree>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b976      	cbnz	r6, 80080f8 <_Bfree+0x28>
 80080da:	2010      	movs	r0, #16
 80080dc:	f7ff ffa2 	bl	8008024 <malloc>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6268      	str	r0, [r5, #36]	; 0x24
 80080e4:	b920      	cbnz	r0, 80080f0 <_Bfree+0x20>
 80080e6:	4b09      	ldr	r3, [pc, #36]	; (800810c <_Bfree+0x3c>)
 80080e8:	4809      	ldr	r0, [pc, #36]	; (8008110 <_Bfree+0x40>)
 80080ea:	218a      	movs	r1, #138	; 0x8a
 80080ec:	f000 fdea 	bl	8008cc4 <__assert_func>
 80080f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f4:	6006      	str	r6, [r0, #0]
 80080f6:	60c6      	str	r6, [r0, #12]
 80080f8:	b13c      	cbz	r4, 800810a <_Bfree+0x3a>
 80080fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080fc:	6862      	ldr	r2, [r4, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008104:	6021      	str	r1, [r4, #0]
 8008106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	08008ff5 	.word	0x08008ff5
 8008110:	080090d8 	.word	0x080090d8

08008114 <__multadd>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	690d      	ldr	r5, [r1, #16]
 800811a:	4607      	mov	r7, r0
 800811c:	460c      	mov	r4, r1
 800811e:	461e      	mov	r6, r3
 8008120:	f101 0c14 	add.w	ip, r1, #20
 8008124:	2000      	movs	r0, #0
 8008126:	f8dc 3000 	ldr.w	r3, [ip]
 800812a:	b299      	uxth	r1, r3
 800812c:	fb02 6101 	mla	r1, r2, r1, r6
 8008130:	0c1e      	lsrs	r6, r3, #16
 8008132:	0c0b      	lsrs	r3, r1, #16
 8008134:	fb02 3306 	mla	r3, r2, r6, r3
 8008138:	b289      	uxth	r1, r1
 800813a:	3001      	adds	r0, #1
 800813c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008140:	4285      	cmp	r5, r0
 8008142:	f84c 1b04 	str.w	r1, [ip], #4
 8008146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800814a:	dcec      	bgt.n	8008126 <__multadd+0x12>
 800814c:	b30e      	cbz	r6, 8008192 <__multadd+0x7e>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc19      	bgt.n	8008188 <__multadd+0x74>
 8008154:	6861      	ldr	r1, [r4, #4]
 8008156:	4638      	mov	r0, r7
 8008158:	3101      	adds	r1, #1
 800815a:	f7ff ff79 	bl	8008050 <_Balloc>
 800815e:	4680      	mov	r8, r0
 8008160:	b928      	cbnz	r0, 800816e <__multadd+0x5a>
 8008162:	4602      	mov	r2, r0
 8008164:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <__multadd+0x84>)
 8008166:	480d      	ldr	r0, [pc, #52]	; (800819c <__multadd+0x88>)
 8008168:	21b5      	movs	r1, #181	; 0xb5
 800816a:	f000 fdab 	bl	8008cc4 <__assert_func>
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	3202      	adds	r2, #2
 8008172:	f104 010c 	add.w	r1, r4, #12
 8008176:	0092      	lsls	r2, r2, #2
 8008178:	300c      	adds	r0, #12
 800817a:	f7ff ff5b 	bl	8008034 <memcpy>
 800817e:	4621      	mov	r1, r4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ffa5 	bl	80080d0 <_Bfree>
 8008186:	4644      	mov	r4, r8
 8008188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800818c:	3501      	adds	r5, #1
 800818e:	615e      	str	r6, [r3, #20]
 8008190:	6125      	str	r5, [r4, #16]
 8008192:	4620      	mov	r0, r4
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	08009067 	.word	0x08009067
 800819c:	080090d8 	.word	0x080090d8

080081a0 <__hi0bits>:
 80081a0:	0c03      	lsrs	r3, r0, #16
 80081a2:	041b      	lsls	r3, r3, #16
 80081a4:	b9d3      	cbnz	r3, 80081dc <__hi0bits+0x3c>
 80081a6:	0400      	lsls	r0, r0, #16
 80081a8:	2310      	movs	r3, #16
 80081aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081ae:	bf04      	itt	eq
 80081b0:	0200      	lsleq	r0, r0, #8
 80081b2:	3308      	addeq	r3, #8
 80081b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081b8:	bf04      	itt	eq
 80081ba:	0100      	lsleq	r0, r0, #4
 80081bc:	3304      	addeq	r3, #4
 80081be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081c2:	bf04      	itt	eq
 80081c4:	0080      	lsleq	r0, r0, #2
 80081c6:	3302      	addeq	r3, #2
 80081c8:	2800      	cmp	r0, #0
 80081ca:	db05      	blt.n	80081d8 <__hi0bits+0x38>
 80081cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081d0:	f103 0301 	add.w	r3, r3, #1
 80081d4:	bf08      	it	eq
 80081d6:	2320      	moveq	r3, #32
 80081d8:	4618      	mov	r0, r3
 80081da:	4770      	bx	lr
 80081dc:	2300      	movs	r3, #0
 80081de:	e7e4      	b.n	80081aa <__hi0bits+0xa>

080081e0 <__lo0bits>:
 80081e0:	6803      	ldr	r3, [r0, #0]
 80081e2:	f013 0207 	ands.w	r2, r3, #7
 80081e6:	4601      	mov	r1, r0
 80081e8:	d00b      	beq.n	8008202 <__lo0bits+0x22>
 80081ea:	07da      	lsls	r2, r3, #31
 80081ec:	d423      	bmi.n	8008236 <__lo0bits+0x56>
 80081ee:	0798      	lsls	r0, r3, #30
 80081f0:	bf49      	itett	mi
 80081f2:	085b      	lsrmi	r3, r3, #1
 80081f4:	089b      	lsrpl	r3, r3, #2
 80081f6:	2001      	movmi	r0, #1
 80081f8:	600b      	strmi	r3, [r1, #0]
 80081fa:	bf5c      	itt	pl
 80081fc:	600b      	strpl	r3, [r1, #0]
 80081fe:	2002      	movpl	r0, #2
 8008200:	4770      	bx	lr
 8008202:	b298      	uxth	r0, r3
 8008204:	b9a8      	cbnz	r0, 8008232 <__lo0bits+0x52>
 8008206:	0c1b      	lsrs	r3, r3, #16
 8008208:	2010      	movs	r0, #16
 800820a:	b2da      	uxtb	r2, r3
 800820c:	b90a      	cbnz	r2, 8008212 <__lo0bits+0x32>
 800820e:	3008      	adds	r0, #8
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	071a      	lsls	r2, r3, #28
 8008214:	bf04      	itt	eq
 8008216:	091b      	lsreq	r3, r3, #4
 8008218:	3004      	addeq	r0, #4
 800821a:	079a      	lsls	r2, r3, #30
 800821c:	bf04      	itt	eq
 800821e:	089b      	lsreq	r3, r3, #2
 8008220:	3002      	addeq	r0, #2
 8008222:	07da      	lsls	r2, r3, #31
 8008224:	d403      	bmi.n	800822e <__lo0bits+0x4e>
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	f100 0001 	add.w	r0, r0, #1
 800822c:	d005      	beq.n	800823a <__lo0bits+0x5a>
 800822e:	600b      	str	r3, [r1, #0]
 8008230:	4770      	bx	lr
 8008232:	4610      	mov	r0, r2
 8008234:	e7e9      	b.n	800820a <__lo0bits+0x2a>
 8008236:	2000      	movs	r0, #0
 8008238:	4770      	bx	lr
 800823a:	2020      	movs	r0, #32
 800823c:	4770      	bx	lr
	...

08008240 <__i2b>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	2101      	movs	r1, #1
 8008246:	f7ff ff03 	bl	8008050 <_Balloc>
 800824a:	4602      	mov	r2, r0
 800824c:	b928      	cbnz	r0, 800825a <__i2b+0x1a>
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <__i2b+0x24>)
 8008250:	4805      	ldr	r0, [pc, #20]	; (8008268 <__i2b+0x28>)
 8008252:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008256:	f000 fd35 	bl	8008cc4 <__assert_func>
 800825a:	2301      	movs	r3, #1
 800825c:	6144      	str	r4, [r0, #20]
 800825e:	6103      	str	r3, [r0, #16]
 8008260:	bd10      	pop	{r4, pc}
 8008262:	bf00      	nop
 8008264:	08009067 	.word	0x08009067
 8008268:	080090d8 	.word	0x080090d8

0800826c <__multiply>:
 800826c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008270:	4691      	mov	r9, r2
 8008272:	690a      	ldr	r2, [r1, #16]
 8008274:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008278:	429a      	cmp	r2, r3
 800827a:	bfb8      	it	lt
 800827c:	460b      	movlt	r3, r1
 800827e:	460c      	mov	r4, r1
 8008280:	bfbc      	itt	lt
 8008282:	464c      	movlt	r4, r9
 8008284:	4699      	movlt	r9, r3
 8008286:	6927      	ldr	r7, [r4, #16]
 8008288:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	6861      	ldr	r1, [r4, #4]
 8008290:	eb07 060a 	add.w	r6, r7, sl
 8008294:	42b3      	cmp	r3, r6
 8008296:	b085      	sub	sp, #20
 8008298:	bfb8      	it	lt
 800829a:	3101      	addlt	r1, #1
 800829c:	f7ff fed8 	bl	8008050 <_Balloc>
 80082a0:	b930      	cbnz	r0, 80082b0 <__multiply+0x44>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b44      	ldr	r3, [pc, #272]	; (80083b8 <__multiply+0x14c>)
 80082a6:	4845      	ldr	r0, [pc, #276]	; (80083bc <__multiply+0x150>)
 80082a8:	f240 115d 	movw	r1, #349	; 0x15d
 80082ac:	f000 fd0a 	bl	8008cc4 <__assert_func>
 80082b0:	f100 0514 	add.w	r5, r0, #20
 80082b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082b8:	462b      	mov	r3, r5
 80082ba:	2200      	movs	r2, #0
 80082bc:	4543      	cmp	r3, r8
 80082be:	d321      	bcc.n	8008304 <__multiply+0x98>
 80082c0:	f104 0314 	add.w	r3, r4, #20
 80082c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082c8:	f109 0314 	add.w	r3, r9, #20
 80082cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082d0:	9202      	str	r2, [sp, #8]
 80082d2:	1b3a      	subs	r2, r7, r4
 80082d4:	3a15      	subs	r2, #21
 80082d6:	f022 0203 	bic.w	r2, r2, #3
 80082da:	3204      	adds	r2, #4
 80082dc:	f104 0115 	add.w	r1, r4, #21
 80082e0:	428f      	cmp	r7, r1
 80082e2:	bf38      	it	cc
 80082e4:	2204      	movcc	r2, #4
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9a02      	ldr	r2, [sp, #8]
 80082ea:	9303      	str	r3, [sp, #12]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d80c      	bhi.n	800830a <__multiply+0x9e>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	dd03      	ble.n	80082fc <__multiply+0x90>
 80082f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d05a      	beq.n	80083b2 <__multiply+0x146>
 80082fc:	6106      	str	r6, [r0, #16]
 80082fe:	b005      	add	sp, #20
 8008300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008304:	f843 2b04 	str.w	r2, [r3], #4
 8008308:	e7d8      	b.n	80082bc <__multiply+0x50>
 800830a:	f8b3 a000 	ldrh.w	sl, [r3]
 800830e:	f1ba 0f00 	cmp.w	sl, #0
 8008312:	d024      	beq.n	800835e <__multiply+0xf2>
 8008314:	f104 0e14 	add.w	lr, r4, #20
 8008318:	46a9      	mov	r9, r5
 800831a:	f04f 0c00 	mov.w	ip, #0
 800831e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008322:	f8d9 1000 	ldr.w	r1, [r9]
 8008326:	fa1f fb82 	uxth.w	fp, r2
 800832a:	b289      	uxth	r1, r1
 800832c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008330:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008334:	f8d9 2000 	ldr.w	r2, [r9]
 8008338:	4461      	add	r1, ip
 800833a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800833e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008342:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008346:	b289      	uxth	r1, r1
 8008348:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800834c:	4577      	cmp	r7, lr
 800834e:	f849 1b04 	str.w	r1, [r9], #4
 8008352:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008356:	d8e2      	bhi.n	800831e <__multiply+0xb2>
 8008358:	9a01      	ldr	r2, [sp, #4]
 800835a:	f845 c002 	str.w	ip, [r5, r2]
 800835e:	9a03      	ldr	r2, [sp, #12]
 8008360:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008364:	3304      	adds	r3, #4
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	d020      	beq.n	80083ae <__multiply+0x142>
 800836c:	6829      	ldr	r1, [r5, #0]
 800836e:	f104 0c14 	add.w	ip, r4, #20
 8008372:	46ae      	mov	lr, r5
 8008374:	f04f 0a00 	mov.w	sl, #0
 8008378:	f8bc b000 	ldrh.w	fp, [ip]
 800837c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008380:	fb09 220b 	mla	r2, r9, fp, r2
 8008384:	4492      	add	sl, r2
 8008386:	b289      	uxth	r1, r1
 8008388:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800838c:	f84e 1b04 	str.w	r1, [lr], #4
 8008390:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008394:	f8be 1000 	ldrh.w	r1, [lr]
 8008398:	0c12      	lsrs	r2, r2, #16
 800839a:	fb09 1102 	mla	r1, r9, r2, r1
 800839e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083a2:	4567      	cmp	r7, ip
 80083a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083a8:	d8e6      	bhi.n	8008378 <__multiply+0x10c>
 80083aa:	9a01      	ldr	r2, [sp, #4]
 80083ac:	50a9      	str	r1, [r5, r2]
 80083ae:	3504      	adds	r5, #4
 80083b0:	e79a      	b.n	80082e8 <__multiply+0x7c>
 80083b2:	3e01      	subs	r6, #1
 80083b4:	e79c      	b.n	80082f0 <__multiply+0x84>
 80083b6:	bf00      	nop
 80083b8:	08009067 	.word	0x08009067
 80083bc:	080090d8 	.word	0x080090d8

080083c0 <__pow5mult>:
 80083c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	4615      	mov	r5, r2
 80083c6:	f012 0203 	ands.w	r2, r2, #3
 80083ca:	4606      	mov	r6, r0
 80083cc:	460f      	mov	r7, r1
 80083ce:	d007      	beq.n	80083e0 <__pow5mult+0x20>
 80083d0:	4c25      	ldr	r4, [pc, #148]	; (8008468 <__pow5mult+0xa8>)
 80083d2:	3a01      	subs	r2, #1
 80083d4:	2300      	movs	r3, #0
 80083d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083da:	f7ff fe9b 	bl	8008114 <__multadd>
 80083de:	4607      	mov	r7, r0
 80083e0:	10ad      	asrs	r5, r5, #2
 80083e2:	d03d      	beq.n	8008460 <__pow5mult+0xa0>
 80083e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083e6:	b97c      	cbnz	r4, 8008408 <__pow5mult+0x48>
 80083e8:	2010      	movs	r0, #16
 80083ea:	f7ff fe1b 	bl	8008024 <malloc>
 80083ee:	4602      	mov	r2, r0
 80083f0:	6270      	str	r0, [r6, #36]	; 0x24
 80083f2:	b928      	cbnz	r0, 8008400 <__pow5mult+0x40>
 80083f4:	4b1d      	ldr	r3, [pc, #116]	; (800846c <__pow5mult+0xac>)
 80083f6:	481e      	ldr	r0, [pc, #120]	; (8008470 <__pow5mult+0xb0>)
 80083f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083fc:	f000 fc62 	bl	8008cc4 <__assert_func>
 8008400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008404:	6004      	str	r4, [r0, #0]
 8008406:	60c4      	str	r4, [r0, #12]
 8008408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800840c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008410:	b94c      	cbnz	r4, 8008426 <__pow5mult+0x66>
 8008412:	f240 2171 	movw	r1, #625	; 0x271
 8008416:	4630      	mov	r0, r6
 8008418:	f7ff ff12 	bl	8008240 <__i2b>
 800841c:	2300      	movs	r3, #0
 800841e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008422:	4604      	mov	r4, r0
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	f04f 0900 	mov.w	r9, #0
 800842a:	07eb      	lsls	r3, r5, #31
 800842c:	d50a      	bpl.n	8008444 <__pow5mult+0x84>
 800842e:	4639      	mov	r1, r7
 8008430:	4622      	mov	r2, r4
 8008432:	4630      	mov	r0, r6
 8008434:	f7ff ff1a 	bl	800826c <__multiply>
 8008438:	4639      	mov	r1, r7
 800843a:	4680      	mov	r8, r0
 800843c:	4630      	mov	r0, r6
 800843e:	f7ff fe47 	bl	80080d0 <_Bfree>
 8008442:	4647      	mov	r7, r8
 8008444:	106d      	asrs	r5, r5, #1
 8008446:	d00b      	beq.n	8008460 <__pow5mult+0xa0>
 8008448:	6820      	ldr	r0, [r4, #0]
 800844a:	b938      	cbnz	r0, 800845c <__pow5mult+0x9c>
 800844c:	4622      	mov	r2, r4
 800844e:	4621      	mov	r1, r4
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff ff0b 	bl	800826c <__multiply>
 8008456:	6020      	str	r0, [r4, #0]
 8008458:	f8c0 9000 	str.w	r9, [r0]
 800845c:	4604      	mov	r4, r0
 800845e:	e7e4      	b.n	800842a <__pow5mult+0x6a>
 8008460:	4638      	mov	r0, r7
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	bf00      	nop
 8008468:	08009228 	.word	0x08009228
 800846c:	08008ff5 	.word	0x08008ff5
 8008470:	080090d8 	.word	0x080090d8

08008474 <__lshift>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	6849      	ldr	r1, [r1, #4]
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008482:	68a3      	ldr	r3, [r4, #8]
 8008484:	4607      	mov	r7, r0
 8008486:	4691      	mov	r9, r2
 8008488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800848c:	f108 0601 	add.w	r6, r8, #1
 8008490:	42b3      	cmp	r3, r6
 8008492:	db0b      	blt.n	80084ac <__lshift+0x38>
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff fddb 	bl	8008050 <_Balloc>
 800849a:	4605      	mov	r5, r0
 800849c:	b948      	cbnz	r0, 80084b2 <__lshift+0x3e>
 800849e:	4602      	mov	r2, r0
 80084a0:	4b2a      	ldr	r3, [pc, #168]	; (800854c <__lshift+0xd8>)
 80084a2:	482b      	ldr	r0, [pc, #172]	; (8008550 <__lshift+0xdc>)
 80084a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084a8:	f000 fc0c 	bl	8008cc4 <__assert_func>
 80084ac:	3101      	adds	r1, #1
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	e7ee      	b.n	8008490 <__lshift+0x1c>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f100 0114 	add.w	r1, r0, #20
 80084b8:	f100 0210 	add.w	r2, r0, #16
 80084bc:	4618      	mov	r0, r3
 80084be:	4553      	cmp	r3, sl
 80084c0:	db37      	blt.n	8008532 <__lshift+0xbe>
 80084c2:	6920      	ldr	r0, [r4, #16]
 80084c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c8:	f104 0314 	add.w	r3, r4, #20
 80084cc:	f019 091f 	ands.w	r9, r9, #31
 80084d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084d8:	d02f      	beq.n	800853a <__lshift+0xc6>
 80084da:	f1c9 0e20 	rsb	lr, r9, #32
 80084de:	468a      	mov	sl, r1
 80084e0:	f04f 0c00 	mov.w	ip, #0
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	fa02 f209 	lsl.w	r2, r2, r9
 80084ea:	ea42 020c 	orr.w	r2, r2, ip
 80084ee:	f84a 2b04 	str.w	r2, [sl], #4
 80084f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f6:	4298      	cmp	r0, r3
 80084f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084fc:	d8f2      	bhi.n	80084e4 <__lshift+0x70>
 80084fe:	1b03      	subs	r3, r0, r4
 8008500:	3b15      	subs	r3, #21
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	3304      	adds	r3, #4
 8008508:	f104 0215 	add.w	r2, r4, #21
 800850c:	4290      	cmp	r0, r2
 800850e:	bf38      	it	cc
 8008510:	2304      	movcc	r3, #4
 8008512:	f841 c003 	str.w	ip, [r1, r3]
 8008516:	f1bc 0f00 	cmp.w	ip, #0
 800851a:	d001      	beq.n	8008520 <__lshift+0xac>
 800851c:	f108 0602 	add.w	r6, r8, #2
 8008520:	3e01      	subs	r6, #1
 8008522:	4638      	mov	r0, r7
 8008524:	612e      	str	r6, [r5, #16]
 8008526:	4621      	mov	r1, r4
 8008528:	f7ff fdd2 	bl	80080d0 <_Bfree>
 800852c:	4628      	mov	r0, r5
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	f842 0f04 	str.w	r0, [r2, #4]!
 8008536:	3301      	adds	r3, #1
 8008538:	e7c1      	b.n	80084be <__lshift+0x4a>
 800853a:	3904      	subs	r1, #4
 800853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008540:	f841 2f04 	str.w	r2, [r1, #4]!
 8008544:	4298      	cmp	r0, r3
 8008546:	d8f9      	bhi.n	800853c <__lshift+0xc8>
 8008548:	e7ea      	b.n	8008520 <__lshift+0xac>
 800854a:	bf00      	nop
 800854c:	08009067 	.word	0x08009067
 8008550:	080090d8 	.word	0x080090d8

08008554 <__mcmp>:
 8008554:	b530      	push	{r4, r5, lr}
 8008556:	6902      	ldr	r2, [r0, #16]
 8008558:	690c      	ldr	r4, [r1, #16]
 800855a:	1b12      	subs	r2, r2, r4
 800855c:	d10e      	bne.n	800857c <__mcmp+0x28>
 800855e:	f100 0314 	add.w	r3, r0, #20
 8008562:	3114      	adds	r1, #20
 8008564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800856c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008574:	42a5      	cmp	r5, r4
 8008576:	d003      	beq.n	8008580 <__mcmp+0x2c>
 8008578:	d305      	bcc.n	8008586 <__mcmp+0x32>
 800857a:	2201      	movs	r2, #1
 800857c:	4610      	mov	r0, r2
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	4283      	cmp	r3, r0
 8008582:	d3f3      	bcc.n	800856c <__mcmp+0x18>
 8008584:	e7fa      	b.n	800857c <__mcmp+0x28>
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	e7f7      	b.n	800857c <__mcmp+0x28>

0800858c <__mdiff>:
 800858c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	460c      	mov	r4, r1
 8008592:	4606      	mov	r6, r0
 8008594:	4611      	mov	r1, r2
 8008596:	4620      	mov	r0, r4
 8008598:	4690      	mov	r8, r2
 800859a:	f7ff ffdb 	bl	8008554 <__mcmp>
 800859e:	1e05      	subs	r5, r0, #0
 80085a0:	d110      	bne.n	80085c4 <__mdiff+0x38>
 80085a2:	4629      	mov	r1, r5
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fd53 	bl	8008050 <_Balloc>
 80085aa:	b930      	cbnz	r0, 80085ba <__mdiff+0x2e>
 80085ac:	4b3a      	ldr	r3, [pc, #232]	; (8008698 <__mdiff+0x10c>)
 80085ae:	4602      	mov	r2, r0
 80085b0:	f240 2132 	movw	r1, #562	; 0x232
 80085b4:	4839      	ldr	r0, [pc, #228]	; (800869c <__mdiff+0x110>)
 80085b6:	f000 fb85 	bl	8008cc4 <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c4:	bfa4      	itt	ge
 80085c6:	4643      	movge	r3, r8
 80085c8:	46a0      	movge	r8, r4
 80085ca:	4630      	mov	r0, r6
 80085cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085d0:	bfa6      	itte	ge
 80085d2:	461c      	movge	r4, r3
 80085d4:	2500      	movge	r5, #0
 80085d6:	2501      	movlt	r5, #1
 80085d8:	f7ff fd3a 	bl	8008050 <_Balloc>
 80085dc:	b920      	cbnz	r0, 80085e8 <__mdiff+0x5c>
 80085de:	4b2e      	ldr	r3, [pc, #184]	; (8008698 <__mdiff+0x10c>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085e6:	e7e5      	b.n	80085b4 <__mdiff+0x28>
 80085e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085ec:	6926      	ldr	r6, [r4, #16]
 80085ee:	60c5      	str	r5, [r0, #12]
 80085f0:	f104 0914 	add.w	r9, r4, #20
 80085f4:	f108 0514 	add.w	r5, r8, #20
 80085f8:	f100 0e14 	add.w	lr, r0, #20
 80085fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008604:	f108 0210 	add.w	r2, r8, #16
 8008608:	46f2      	mov	sl, lr
 800860a:	2100      	movs	r1, #0
 800860c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008614:	fa1f f883 	uxth.w	r8, r3
 8008618:	fa11 f18b 	uxtah	r1, r1, fp
 800861c:	0c1b      	lsrs	r3, r3, #16
 800861e:	eba1 0808 	sub.w	r8, r1, r8
 8008622:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008626:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800862a:	fa1f f888 	uxth.w	r8, r8
 800862e:	1419      	asrs	r1, r3, #16
 8008630:	454e      	cmp	r6, r9
 8008632:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008636:	f84a 3b04 	str.w	r3, [sl], #4
 800863a:	d8e7      	bhi.n	800860c <__mdiff+0x80>
 800863c:	1b33      	subs	r3, r6, r4
 800863e:	3b15      	subs	r3, #21
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	3304      	adds	r3, #4
 8008646:	3415      	adds	r4, #21
 8008648:	42a6      	cmp	r6, r4
 800864a:	bf38      	it	cc
 800864c:	2304      	movcc	r3, #4
 800864e:	441d      	add	r5, r3
 8008650:	4473      	add	r3, lr
 8008652:	469e      	mov	lr, r3
 8008654:	462e      	mov	r6, r5
 8008656:	4566      	cmp	r6, ip
 8008658:	d30e      	bcc.n	8008678 <__mdiff+0xec>
 800865a:	f10c 0203 	add.w	r2, ip, #3
 800865e:	1b52      	subs	r2, r2, r5
 8008660:	f022 0203 	bic.w	r2, r2, #3
 8008664:	3d03      	subs	r5, #3
 8008666:	45ac      	cmp	ip, r5
 8008668:	bf38      	it	cc
 800866a:	2200      	movcc	r2, #0
 800866c:	441a      	add	r2, r3
 800866e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008672:	b17b      	cbz	r3, 8008694 <__mdiff+0x108>
 8008674:	6107      	str	r7, [r0, #16]
 8008676:	e7a3      	b.n	80085c0 <__mdiff+0x34>
 8008678:	f856 8b04 	ldr.w	r8, [r6], #4
 800867c:	fa11 f288 	uxtah	r2, r1, r8
 8008680:	1414      	asrs	r4, r2, #16
 8008682:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008686:	b292      	uxth	r2, r2
 8008688:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800868c:	f84e 2b04 	str.w	r2, [lr], #4
 8008690:	1421      	asrs	r1, r4, #16
 8008692:	e7e0      	b.n	8008656 <__mdiff+0xca>
 8008694:	3f01      	subs	r7, #1
 8008696:	e7ea      	b.n	800866e <__mdiff+0xe2>
 8008698:	08009067 	.word	0x08009067
 800869c:	080090d8 	.word	0x080090d8

080086a0 <__d2b>:
 80086a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086a4:	4689      	mov	r9, r1
 80086a6:	2101      	movs	r1, #1
 80086a8:	ec57 6b10 	vmov	r6, r7, d0
 80086ac:	4690      	mov	r8, r2
 80086ae:	f7ff fccf 	bl	8008050 <_Balloc>
 80086b2:	4604      	mov	r4, r0
 80086b4:	b930      	cbnz	r0, 80086c4 <__d2b+0x24>
 80086b6:	4602      	mov	r2, r0
 80086b8:	4b25      	ldr	r3, [pc, #148]	; (8008750 <__d2b+0xb0>)
 80086ba:	4826      	ldr	r0, [pc, #152]	; (8008754 <__d2b+0xb4>)
 80086bc:	f240 310a 	movw	r1, #778	; 0x30a
 80086c0:	f000 fb00 	bl	8008cc4 <__assert_func>
 80086c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086cc:	bb35      	cbnz	r5, 800871c <__d2b+0x7c>
 80086ce:	2e00      	cmp	r6, #0
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	d028      	beq.n	8008726 <__d2b+0x86>
 80086d4:	4668      	mov	r0, sp
 80086d6:	9600      	str	r6, [sp, #0]
 80086d8:	f7ff fd82 	bl	80081e0 <__lo0bits>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	b300      	cbz	r0, 8008722 <__d2b+0x82>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f1c0 0320 	rsb	r3, r0, #32
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	430b      	orrs	r3, r1
 80086ec:	40c2      	lsrs	r2, r0
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	9201      	str	r2, [sp, #4]
 80086f2:	9b01      	ldr	r3, [sp, #4]
 80086f4:	61a3      	str	r3, [r4, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2202      	movne	r2, #2
 80086fc:	2201      	moveq	r2, #1
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	b1d5      	cbz	r5, 8008738 <__d2b+0x98>
 8008702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008706:	4405      	add	r5, r0
 8008708:	f8c9 5000 	str.w	r5, [r9]
 800870c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008710:	f8c8 0000 	str.w	r0, [r8]
 8008714:	4620      	mov	r0, r4
 8008716:	b003      	add	sp, #12
 8008718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800871c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008720:	e7d5      	b.n	80086ce <__d2b+0x2e>
 8008722:	6161      	str	r1, [r4, #20]
 8008724:	e7e5      	b.n	80086f2 <__d2b+0x52>
 8008726:	a801      	add	r0, sp, #4
 8008728:	f7ff fd5a 	bl	80081e0 <__lo0bits>
 800872c:	9b01      	ldr	r3, [sp, #4]
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	2201      	movs	r2, #1
 8008732:	6122      	str	r2, [r4, #16]
 8008734:	3020      	adds	r0, #32
 8008736:	e7e3      	b.n	8008700 <__d2b+0x60>
 8008738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800873c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008740:	f8c9 0000 	str.w	r0, [r9]
 8008744:	6918      	ldr	r0, [r3, #16]
 8008746:	f7ff fd2b 	bl	80081a0 <__hi0bits>
 800874a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800874e:	e7df      	b.n	8008710 <__d2b+0x70>
 8008750:	08009067 	.word	0x08009067
 8008754:	080090d8 	.word	0x080090d8

08008758 <_calloc_r>:
 8008758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800875a:	fba1 2402 	umull	r2, r4, r1, r2
 800875e:	b94c      	cbnz	r4, 8008774 <_calloc_r+0x1c>
 8008760:	4611      	mov	r1, r2
 8008762:	9201      	str	r2, [sp, #4]
 8008764:	f000 f87a 	bl	800885c <_malloc_r>
 8008768:	9a01      	ldr	r2, [sp, #4]
 800876a:	4605      	mov	r5, r0
 800876c:	b930      	cbnz	r0, 800877c <_calloc_r+0x24>
 800876e:	4628      	mov	r0, r5
 8008770:	b003      	add	sp, #12
 8008772:	bd30      	pop	{r4, r5, pc}
 8008774:	220c      	movs	r2, #12
 8008776:	6002      	str	r2, [r0, #0]
 8008778:	2500      	movs	r5, #0
 800877a:	e7f8      	b.n	800876e <_calloc_r+0x16>
 800877c:	4621      	mov	r1, r4
 800877e:	f7fd fdf3 	bl	8006368 <memset>
 8008782:	e7f4      	b.n	800876e <_calloc_r+0x16>

08008784 <_free_r>:
 8008784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008786:	2900      	cmp	r1, #0
 8008788:	d044      	beq.n	8008814 <_free_r+0x90>
 800878a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800878e:	9001      	str	r0, [sp, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f1a1 0404 	sub.w	r4, r1, #4
 8008796:	bfb8      	it	lt
 8008798:	18e4      	addlt	r4, r4, r3
 800879a:	f000 fb19 	bl	8008dd0 <__malloc_lock>
 800879e:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <_free_r+0x94>)
 80087a0:	9801      	ldr	r0, [sp, #4]
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	b933      	cbnz	r3, 80087b4 <_free_r+0x30>
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	6014      	str	r4, [r2, #0]
 80087aa:	b003      	add	sp, #12
 80087ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087b0:	f000 bb14 	b.w	8008ddc <__malloc_unlock>
 80087b4:	42a3      	cmp	r3, r4
 80087b6:	d908      	bls.n	80087ca <_free_r+0x46>
 80087b8:	6825      	ldr	r5, [r4, #0]
 80087ba:	1961      	adds	r1, r4, r5
 80087bc:	428b      	cmp	r3, r1
 80087be:	bf01      	itttt	eq
 80087c0:	6819      	ldreq	r1, [r3, #0]
 80087c2:	685b      	ldreq	r3, [r3, #4]
 80087c4:	1949      	addeq	r1, r1, r5
 80087c6:	6021      	streq	r1, [r4, #0]
 80087c8:	e7ed      	b.n	80087a6 <_free_r+0x22>
 80087ca:	461a      	mov	r2, r3
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	b10b      	cbz	r3, 80087d4 <_free_r+0x50>
 80087d0:	42a3      	cmp	r3, r4
 80087d2:	d9fa      	bls.n	80087ca <_free_r+0x46>
 80087d4:	6811      	ldr	r1, [r2, #0]
 80087d6:	1855      	adds	r5, r2, r1
 80087d8:	42a5      	cmp	r5, r4
 80087da:	d10b      	bne.n	80087f4 <_free_r+0x70>
 80087dc:	6824      	ldr	r4, [r4, #0]
 80087de:	4421      	add	r1, r4
 80087e0:	1854      	adds	r4, r2, r1
 80087e2:	42a3      	cmp	r3, r4
 80087e4:	6011      	str	r1, [r2, #0]
 80087e6:	d1e0      	bne.n	80087aa <_free_r+0x26>
 80087e8:	681c      	ldr	r4, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	6053      	str	r3, [r2, #4]
 80087ee:	4421      	add	r1, r4
 80087f0:	6011      	str	r1, [r2, #0]
 80087f2:	e7da      	b.n	80087aa <_free_r+0x26>
 80087f4:	d902      	bls.n	80087fc <_free_r+0x78>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6003      	str	r3, [r0, #0]
 80087fa:	e7d6      	b.n	80087aa <_free_r+0x26>
 80087fc:	6825      	ldr	r5, [r4, #0]
 80087fe:	1961      	adds	r1, r4, r5
 8008800:	428b      	cmp	r3, r1
 8008802:	bf04      	itt	eq
 8008804:	6819      	ldreq	r1, [r3, #0]
 8008806:	685b      	ldreq	r3, [r3, #4]
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	bf04      	itt	eq
 800880c:	1949      	addeq	r1, r1, r5
 800880e:	6021      	streq	r1, [r4, #0]
 8008810:	6054      	str	r4, [r2, #4]
 8008812:	e7ca      	b.n	80087aa <_free_r+0x26>
 8008814:	b003      	add	sp, #12
 8008816:	bd30      	pop	{r4, r5, pc}
 8008818:	2000041c 	.word	0x2000041c

0800881c <sbrk_aligned>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4e0e      	ldr	r6, [pc, #56]	; (8008858 <sbrk_aligned+0x3c>)
 8008820:	460c      	mov	r4, r1
 8008822:	6831      	ldr	r1, [r6, #0]
 8008824:	4605      	mov	r5, r0
 8008826:	b911      	cbnz	r1, 800882e <sbrk_aligned+0x12>
 8008828:	f000 f9e6 	bl	8008bf8 <_sbrk_r>
 800882c:	6030      	str	r0, [r6, #0]
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f9e1 	bl	8008bf8 <_sbrk_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	d00a      	beq.n	8008850 <sbrk_aligned+0x34>
 800883a:	1cc4      	adds	r4, r0, #3
 800883c:	f024 0403 	bic.w	r4, r4, #3
 8008840:	42a0      	cmp	r0, r4
 8008842:	d007      	beq.n	8008854 <sbrk_aligned+0x38>
 8008844:	1a21      	subs	r1, r4, r0
 8008846:	4628      	mov	r0, r5
 8008848:	f000 f9d6 	bl	8008bf8 <_sbrk_r>
 800884c:	3001      	adds	r0, #1
 800884e:	d101      	bne.n	8008854 <sbrk_aligned+0x38>
 8008850:	f04f 34ff 	mov.w	r4, #4294967295
 8008854:	4620      	mov	r0, r4
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	20000420 	.word	0x20000420

0800885c <_malloc_r>:
 800885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008860:	1ccd      	adds	r5, r1, #3
 8008862:	f025 0503 	bic.w	r5, r5, #3
 8008866:	3508      	adds	r5, #8
 8008868:	2d0c      	cmp	r5, #12
 800886a:	bf38      	it	cc
 800886c:	250c      	movcc	r5, #12
 800886e:	2d00      	cmp	r5, #0
 8008870:	4607      	mov	r7, r0
 8008872:	db01      	blt.n	8008878 <_malloc_r+0x1c>
 8008874:	42a9      	cmp	r1, r5
 8008876:	d905      	bls.n	8008884 <_malloc_r+0x28>
 8008878:	230c      	movs	r3, #12
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	2600      	movs	r6, #0
 800887e:	4630      	mov	r0, r6
 8008880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008884:	4e2e      	ldr	r6, [pc, #184]	; (8008940 <_malloc_r+0xe4>)
 8008886:	f000 faa3 	bl	8008dd0 <__malloc_lock>
 800888a:	6833      	ldr	r3, [r6, #0]
 800888c:	461c      	mov	r4, r3
 800888e:	bb34      	cbnz	r4, 80088de <_malloc_r+0x82>
 8008890:	4629      	mov	r1, r5
 8008892:	4638      	mov	r0, r7
 8008894:	f7ff ffc2 	bl	800881c <sbrk_aligned>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	4604      	mov	r4, r0
 800889c:	d14d      	bne.n	800893a <_malloc_r+0xde>
 800889e:	6834      	ldr	r4, [r6, #0]
 80088a0:	4626      	mov	r6, r4
 80088a2:	2e00      	cmp	r6, #0
 80088a4:	d140      	bne.n	8008928 <_malloc_r+0xcc>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	4631      	mov	r1, r6
 80088aa:	4638      	mov	r0, r7
 80088ac:	eb04 0803 	add.w	r8, r4, r3
 80088b0:	f000 f9a2 	bl	8008bf8 <_sbrk_r>
 80088b4:	4580      	cmp	r8, r0
 80088b6:	d13a      	bne.n	800892e <_malloc_r+0xd2>
 80088b8:	6821      	ldr	r1, [r4, #0]
 80088ba:	3503      	adds	r5, #3
 80088bc:	1a6d      	subs	r5, r5, r1
 80088be:	f025 0503 	bic.w	r5, r5, #3
 80088c2:	3508      	adds	r5, #8
 80088c4:	2d0c      	cmp	r5, #12
 80088c6:	bf38      	it	cc
 80088c8:	250c      	movcc	r5, #12
 80088ca:	4629      	mov	r1, r5
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ffa5 	bl	800881c <sbrk_aligned>
 80088d2:	3001      	adds	r0, #1
 80088d4:	d02b      	beq.n	800892e <_malloc_r+0xd2>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	442b      	add	r3, r5
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	e00e      	b.n	80088fc <_malloc_r+0xa0>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	1b52      	subs	r2, r2, r5
 80088e2:	d41e      	bmi.n	8008922 <_malloc_r+0xc6>
 80088e4:	2a0b      	cmp	r2, #11
 80088e6:	d916      	bls.n	8008916 <_malloc_r+0xba>
 80088e8:	1961      	adds	r1, r4, r5
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	6025      	str	r5, [r4, #0]
 80088ee:	bf18      	it	ne
 80088f0:	6059      	strne	r1, [r3, #4]
 80088f2:	6863      	ldr	r3, [r4, #4]
 80088f4:	bf08      	it	eq
 80088f6:	6031      	streq	r1, [r6, #0]
 80088f8:	5162      	str	r2, [r4, r5]
 80088fa:	604b      	str	r3, [r1, #4]
 80088fc:	4638      	mov	r0, r7
 80088fe:	f104 060b 	add.w	r6, r4, #11
 8008902:	f000 fa6b 	bl	8008ddc <__malloc_unlock>
 8008906:	f026 0607 	bic.w	r6, r6, #7
 800890a:	1d23      	adds	r3, r4, #4
 800890c:	1af2      	subs	r2, r6, r3
 800890e:	d0b6      	beq.n	800887e <_malloc_r+0x22>
 8008910:	1b9b      	subs	r3, r3, r6
 8008912:	50a3      	str	r3, [r4, r2]
 8008914:	e7b3      	b.n	800887e <_malloc_r+0x22>
 8008916:	6862      	ldr	r2, [r4, #4]
 8008918:	42a3      	cmp	r3, r4
 800891a:	bf0c      	ite	eq
 800891c:	6032      	streq	r2, [r6, #0]
 800891e:	605a      	strne	r2, [r3, #4]
 8008920:	e7ec      	b.n	80088fc <_malloc_r+0xa0>
 8008922:	4623      	mov	r3, r4
 8008924:	6864      	ldr	r4, [r4, #4]
 8008926:	e7b2      	b.n	800888e <_malloc_r+0x32>
 8008928:	4634      	mov	r4, r6
 800892a:	6876      	ldr	r6, [r6, #4]
 800892c:	e7b9      	b.n	80088a2 <_malloc_r+0x46>
 800892e:	230c      	movs	r3, #12
 8008930:	603b      	str	r3, [r7, #0]
 8008932:	4638      	mov	r0, r7
 8008934:	f000 fa52 	bl	8008ddc <__malloc_unlock>
 8008938:	e7a1      	b.n	800887e <_malloc_r+0x22>
 800893a:	6025      	str	r5, [r4, #0]
 800893c:	e7de      	b.n	80088fc <_malloc_r+0xa0>
 800893e:	bf00      	nop
 8008940:	2000041c 	.word	0x2000041c

08008944 <__sfputc_r>:
 8008944:	6893      	ldr	r3, [r2, #8]
 8008946:	3b01      	subs	r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	b410      	push	{r4}
 800894c:	6093      	str	r3, [r2, #8]
 800894e:	da08      	bge.n	8008962 <__sfputc_r+0x1e>
 8008950:	6994      	ldr	r4, [r2, #24]
 8008952:	42a3      	cmp	r3, r4
 8008954:	db01      	blt.n	800895a <__sfputc_r+0x16>
 8008956:	290a      	cmp	r1, #10
 8008958:	d103      	bne.n	8008962 <__sfputc_r+0x1e>
 800895a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800895e:	f7fe ba03 	b.w	8006d68 <__swbuf_r>
 8008962:	6813      	ldr	r3, [r2, #0]
 8008964:	1c58      	adds	r0, r3, #1
 8008966:	6010      	str	r0, [r2, #0]
 8008968:	7019      	strb	r1, [r3, #0]
 800896a:	4608      	mov	r0, r1
 800896c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008970:	4770      	bx	lr

08008972 <__sfputs_r>:
 8008972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008974:	4606      	mov	r6, r0
 8008976:	460f      	mov	r7, r1
 8008978:	4614      	mov	r4, r2
 800897a:	18d5      	adds	r5, r2, r3
 800897c:	42ac      	cmp	r4, r5
 800897e:	d101      	bne.n	8008984 <__sfputs_r+0x12>
 8008980:	2000      	movs	r0, #0
 8008982:	e007      	b.n	8008994 <__sfputs_r+0x22>
 8008984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008988:	463a      	mov	r2, r7
 800898a:	4630      	mov	r0, r6
 800898c:	f7ff ffda 	bl	8008944 <__sfputc_r>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d1f3      	bne.n	800897c <__sfputs_r+0xa>
 8008994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008998 <_vfiprintf_r>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	460d      	mov	r5, r1
 800899e:	b09d      	sub	sp, #116	; 0x74
 80089a0:	4614      	mov	r4, r2
 80089a2:	4698      	mov	r8, r3
 80089a4:	4606      	mov	r6, r0
 80089a6:	b118      	cbz	r0, 80089b0 <_vfiprintf_r+0x18>
 80089a8:	6983      	ldr	r3, [r0, #24]
 80089aa:	b90b      	cbnz	r3, 80089b0 <_vfiprintf_r+0x18>
 80089ac:	f7ff fa30 	bl	8007e10 <__sinit>
 80089b0:	4b89      	ldr	r3, [pc, #548]	; (8008bd8 <_vfiprintf_r+0x240>)
 80089b2:	429d      	cmp	r5, r3
 80089b4:	d11b      	bne.n	80089ee <_vfiprintf_r+0x56>
 80089b6:	6875      	ldr	r5, [r6, #4]
 80089b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ba:	07d9      	lsls	r1, r3, #31
 80089bc:	d405      	bmi.n	80089ca <_vfiprintf_r+0x32>
 80089be:	89ab      	ldrh	r3, [r5, #12]
 80089c0:	059a      	lsls	r2, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_vfiprintf_r+0x32>
 80089c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c6:	f7ff fac6 	bl	8007f56 <__retarget_lock_acquire_recursive>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	071b      	lsls	r3, r3, #28
 80089ce:	d501      	bpl.n	80089d4 <_vfiprintf_r+0x3c>
 80089d0:	692b      	ldr	r3, [r5, #16]
 80089d2:	b9eb      	cbnz	r3, 8008a10 <_vfiprintf_r+0x78>
 80089d4:	4629      	mov	r1, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7fe fa18 	bl	8006e0c <__swsetup_r>
 80089dc:	b1c0      	cbz	r0, 8008a10 <_vfiprintf_r+0x78>
 80089de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089e0:	07dc      	lsls	r4, r3, #31
 80089e2:	d50e      	bpl.n	8008a02 <_vfiprintf_r+0x6a>
 80089e4:	f04f 30ff 	mov.w	r0, #4294967295
 80089e8:	b01d      	add	sp, #116	; 0x74
 80089ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ee:	4b7b      	ldr	r3, [pc, #492]	; (8008bdc <_vfiprintf_r+0x244>)
 80089f0:	429d      	cmp	r5, r3
 80089f2:	d101      	bne.n	80089f8 <_vfiprintf_r+0x60>
 80089f4:	68b5      	ldr	r5, [r6, #8]
 80089f6:	e7df      	b.n	80089b8 <_vfiprintf_r+0x20>
 80089f8:	4b79      	ldr	r3, [pc, #484]	; (8008be0 <_vfiprintf_r+0x248>)
 80089fa:	429d      	cmp	r5, r3
 80089fc:	bf08      	it	eq
 80089fe:	68f5      	ldreq	r5, [r6, #12]
 8008a00:	e7da      	b.n	80089b8 <_vfiprintf_r+0x20>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	0598      	lsls	r0, r3, #22
 8008a06:	d4ed      	bmi.n	80089e4 <_vfiprintf_r+0x4c>
 8008a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0a:	f7ff faa5 	bl	8007f58 <__retarget_lock_release_recursive>
 8008a0e:	e7e9      	b.n	80089e4 <_vfiprintf_r+0x4c>
 8008a10:	2300      	movs	r3, #0
 8008a12:	9309      	str	r3, [sp, #36]	; 0x24
 8008a14:	2320      	movs	r3, #32
 8008a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a1e:	2330      	movs	r3, #48	; 0x30
 8008a20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008be4 <_vfiprintf_r+0x24c>
 8008a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a28:	f04f 0901 	mov.w	r9, #1
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	469a      	mov	sl, r3
 8008a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a34:	b10a      	cbz	r2, 8008a3a <_vfiprintf_r+0xa2>
 8008a36:	2a25      	cmp	r2, #37	; 0x25
 8008a38:	d1f9      	bne.n	8008a2e <_vfiprintf_r+0x96>
 8008a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3e:	d00b      	beq.n	8008a58 <_vfiprintf_r+0xc0>
 8008a40:	465b      	mov	r3, fp
 8008a42:	4622      	mov	r2, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ff93 	bl	8008972 <__sfputs_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f000 80aa 	beq.w	8008ba6 <_vfiprintf_r+0x20e>
 8008a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a54:	445a      	add	r2, fp
 8008a56:	9209      	str	r2, [sp, #36]	; 0x24
 8008a58:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80a2 	beq.w	8008ba6 <_vfiprintf_r+0x20e>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295
 8008a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9307      	str	r3, [sp, #28]
 8008a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a78:	931a      	str	r3, [sp, #104]	; 0x68
 8008a7a:	4654      	mov	r4, sl
 8008a7c:	2205      	movs	r2, #5
 8008a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a82:	4858      	ldr	r0, [pc, #352]	; (8008be4 <_vfiprintf_r+0x24c>)
 8008a84:	f7f7 fbac 	bl	80001e0 <memchr>
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	b9d8      	cbnz	r0, 8008ac4 <_vfiprintf_r+0x12c>
 8008a8c:	06d1      	lsls	r1, r2, #27
 8008a8e:	bf44      	itt	mi
 8008a90:	2320      	movmi	r3, #32
 8008a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a96:	0713      	lsls	r3, r2, #28
 8008a98:	bf44      	itt	mi
 8008a9a:	232b      	movmi	r3, #43	; 0x2b
 8008a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa6:	d015      	beq.n	8008ad4 <_vfiprintf_r+0x13c>
 8008aa8:	9a07      	ldr	r2, [sp, #28]
 8008aaa:	4654      	mov	r4, sl
 8008aac:	2000      	movs	r0, #0
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab8:	3b30      	subs	r3, #48	; 0x30
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d94e      	bls.n	8008b5c <_vfiprintf_r+0x1c4>
 8008abe:	b1b0      	cbz	r0, 8008aee <_vfiprintf_r+0x156>
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	e014      	b.n	8008aee <_vfiprintf_r+0x156>
 8008ac4:	eba0 0308 	sub.w	r3, r0, r8
 8008ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	46a2      	mov	sl, r4
 8008ad2:	e7d2      	b.n	8008a7a <_vfiprintf_r+0xe2>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	1d19      	adds	r1, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	9103      	str	r1, [sp, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfbb      	ittet	lt
 8008ae0:	425b      	neglt	r3, r3
 8008ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae6:	9307      	strge	r3, [sp, #28]
 8008ae8:	9307      	strlt	r3, [sp, #28]
 8008aea:	bfb8      	it	lt
 8008aec:	9204      	strlt	r2, [sp, #16]
 8008aee:	7823      	ldrb	r3, [r4, #0]
 8008af0:	2b2e      	cmp	r3, #46	; 0x2e
 8008af2:	d10c      	bne.n	8008b0e <_vfiprintf_r+0x176>
 8008af4:	7863      	ldrb	r3, [r4, #1]
 8008af6:	2b2a      	cmp	r3, #42	; 0x2a
 8008af8:	d135      	bne.n	8008b66 <_vfiprintf_r+0x1ce>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	9203      	str	r2, [sp, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfb8      	it	lt
 8008b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b0a:	3402      	adds	r4, #2
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bf4 <_vfiprintf_r+0x25c>
 8008b12:	7821      	ldrb	r1, [r4, #0]
 8008b14:	2203      	movs	r2, #3
 8008b16:	4650      	mov	r0, sl
 8008b18:	f7f7 fb62 	bl	80001e0 <memchr>
 8008b1c:	b140      	cbz	r0, 8008b30 <_vfiprintf_r+0x198>
 8008b1e:	2340      	movs	r3, #64	; 0x40
 8008b20:	eba0 000a 	sub.w	r0, r0, sl
 8008b24:	fa03 f000 	lsl.w	r0, r3, r0
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	4303      	orrs	r3, r0
 8008b2c:	3401      	adds	r4, #1
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	482c      	ldr	r0, [pc, #176]	; (8008be8 <_vfiprintf_r+0x250>)
 8008b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b3a:	2206      	movs	r2, #6
 8008b3c:	f7f7 fb50 	bl	80001e0 <memchr>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d03f      	beq.n	8008bc4 <_vfiprintf_r+0x22c>
 8008b44:	4b29      	ldr	r3, [pc, #164]	; (8008bec <_vfiprintf_r+0x254>)
 8008b46:	bb1b      	cbnz	r3, 8008b90 <_vfiprintf_r+0x1f8>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	3307      	adds	r3, #7
 8008b4c:	f023 0307 	bic.w	r3, r3, #7
 8008b50:	3308      	adds	r3, #8
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	443b      	add	r3, r7
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	e767      	b.n	8008a2c <_vfiprintf_r+0x94>
 8008b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b60:	460c      	mov	r4, r1
 8008b62:	2001      	movs	r0, #1
 8008b64:	e7a5      	b.n	8008ab2 <_vfiprintf_r+0x11a>
 8008b66:	2300      	movs	r3, #0
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0c0a 	mov.w	ip, #10
 8008b72:	4620      	mov	r0, r4
 8008b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b78:	3a30      	subs	r2, #48	; 0x30
 8008b7a:	2a09      	cmp	r2, #9
 8008b7c:	d903      	bls.n	8008b86 <_vfiprintf_r+0x1ee>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c5      	beq.n	8008b0e <_vfiprintf_r+0x176>
 8008b82:	9105      	str	r1, [sp, #20]
 8008b84:	e7c3      	b.n	8008b0e <_vfiprintf_r+0x176>
 8008b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e7f0      	b.n	8008b72 <_vfiprintf_r+0x1da>
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4b16      	ldr	r3, [pc, #88]	; (8008bf0 <_vfiprintf_r+0x258>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7fd fc8c 	bl	80064b8 <_printf_float>
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	1c78      	adds	r0, r7, #1
 8008ba4:	d1d6      	bne.n	8008b54 <_vfiprintf_r+0x1bc>
 8008ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba8:	07d9      	lsls	r1, r3, #31
 8008baa:	d405      	bmi.n	8008bb8 <_vfiprintf_r+0x220>
 8008bac:	89ab      	ldrh	r3, [r5, #12]
 8008bae:	059a      	lsls	r2, r3, #22
 8008bb0:	d402      	bmi.n	8008bb8 <_vfiprintf_r+0x220>
 8008bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb4:	f7ff f9d0 	bl	8007f58 <__retarget_lock_release_recursive>
 8008bb8:	89ab      	ldrh	r3, [r5, #12]
 8008bba:	065b      	lsls	r3, r3, #25
 8008bbc:	f53f af12 	bmi.w	80089e4 <_vfiprintf_r+0x4c>
 8008bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bc2:	e711      	b.n	80089e8 <_vfiprintf_r+0x50>
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <_vfiprintf_r+0x258>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f7fd ff16 	bl	8006a00 <_printf_i>
 8008bd4:	e7e4      	b.n	8008ba0 <_vfiprintf_r+0x208>
 8008bd6:	bf00      	nop
 8008bd8:	08009098 	.word	0x08009098
 8008bdc:	080090b8 	.word	0x080090b8
 8008be0:	08009078 	.word	0x08009078
 8008be4:	08009234 	.word	0x08009234
 8008be8:	0800923e 	.word	0x0800923e
 8008bec:	080064b9 	.word	0x080064b9
 8008bf0:	08008973 	.word	0x08008973
 8008bf4:	0800923a 	.word	0x0800923a

08008bf8 <_sbrk_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d06      	ldr	r5, [pc, #24]	; (8008c14 <_sbrk_r+0x1c>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f8 fe54 	bl	80018b0 <_sbrk>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_sbrk_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_sbrk_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20000424 	.word	0x20000424

08008c18 <__sread>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c20:	f000 f8e2 	bl	8008de8 <_read_r>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	bfab      	itete	ge
 8008c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c2c:	181b      	addge	r3, r3, r0
 8008c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c32:	bfac      	ite	ge
 8008c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c36:	81a3      	strhlt	r3, [r4, #12]
 8008c38:	bd10      	pop	{r4, pc}

08008c3a <__swrite>:
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	461f      	mov	r7, r3
 8008c40:	898b      	ldrh	r3, [r1, #12]
 8008c42:	05db      	lsls	r3, r3, #23
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	4616      	mov	r6, r2
 8008c4a:	d505      	bpl.n	8008c58 <__swrite+0x1e>
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	2302      	movs	r3, #2
 8008c52:	2200      	movs	r2, #0
 8008c54:	f000 f898 	bl	8008d88 <_lseek_r>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	4628      	mov	r0, r5
 8008c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6e:	f000 b817 	b.w	8008ca0 <_write_r>

08008c72 <__sseek>:
 8008c72:	b510      	push	{r4, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7a:	f000 f885 	bl	8008d88 <_lseek_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	bf15      	itete	ne
 8008c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c8e:	81a3      	strheq	r3, [r4, #12]
 8008c90:	bf18      	it	ne
 8008c92:	81a3      	strhne	r3, [r4, #12]
 8008c94:	bd10      	pop	{r4, pc}

08008c96 <__sclose>:
 8008c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9a:	f000 b831 	b.w	8008d00 <_close_r>
	...

08008ca0 <_write_r>:
 8008ca0:	b538      	push	{r3, r4, r5, lr}
 8008ca2:	4d07      	ldr	r5, [pc, #28]	; (8008cc0 <_write_r+0x20>)
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	4608      	mov	r0, r1
 8008ca8:	4611      	mov	r1, r2
 8008caa:	2200      	movs	r2, #0
 8008cac:	602a      	str	r2, [r5, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f7f8 fdad 	bl	800180e <_write>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_write_r+0x1e>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_write_r+0x1e>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	20000424 	.word	0x20000424

08008cc4 <__assert_func>:
 8008cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <__assert_func+0x2c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4605      	mov	r5, r0
 8008cd0:	68d8      	ldr	r0, [r3, #12]
 8008cd2:	b14c      	cbz	r4, 8008ce8 <__assert_func+0x24>
 8008cd4:	4b07      	ldr	r3, [pc, #28]	; (8008cf4 <__assert_func+0x30>)
 8008cd6:	9100      	str	r1, [sp, #0]
 8008cd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cdc:	4906      	ldr	r1, [pc, #24]	; (8008cf8 <__assert_func+0x34>)
 8008cde:	462b      	mov	r3, r5
 8008ce0:	f000 f81e 	bl	8008d20 <fiprintf>
 8008ce4:	f000 f89f 	bl	8008e26 <abort>
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <__assert_func+0x38>)
 8008cea:	461c      	mov	r4, r3
 8008cec:	e7f3      	b.n	8008cd6 <__assert_func+0x12>
 8008cee:	bf00      	nop
 8008cf0:	20000040 	.word	0x20000040
 8008cf4:	08009245 	.word	0x08009245
 8008cf8:	08009252 	.word	0x08009252
 8008cfc:	08009280 	.word	0x08009280

08008d00 <_close_r>:
 8008d00:	b538      	push	{r3, r4, r5, lr}
 8008d02:	4d06      	ldr	r5, [pc, #24]	; (8008d1c <_close_r+0x1c>)
 8008d04:	2300      	movs	r3, #0
 8008d06:	4604      	mov	r4, r0
 8008d08:	4608      	mov	r0, r1
 8008d0a:	602b      	str	r3, [r5, #0]
 8008d0c:	f7f8 fd9b 	bl	8001846 <_close>
 8008d10:	1c43      	adds	r3, r0, #1
 8008d12:	d102      	bne.n	8008d1a <_close_r+0x1a>
 8008d14:	682b      	ldr	r3, [r5, #0]
 8008d16:	b103      	cbz	r3, 8008d1a <_close_r+0x1a>
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	20000424 	.word	0x20000424

08008d20 <fiprintf>:
 8008d20:	b40e      	push	{r1, r2, r3}
 8008d22:	b503      	push	{r0, r1, lr}
 8008d24:	4601      	mov	r1, r0
 8008d26:	ab03      	add	r3, sp, #12
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <fiprintf+0x20>)
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	6800      	ldr	r0, [r0, #0]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f7ff fe31 	bl	8008998 <_vfiprintf_r>
 8008d36:	b002      	add	sp, #8
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b003      	add	sp, #12
 8008d3e:	4770      	bx	lr
 8008d40:	20000040 	.word	0x20000040

08008d44 <_fstat_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	; (8008d64 <_fstat_r+0x20>)
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4608      	mov	r0, r1
 8008d4e:	4611      	mov	r1, r2
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	f7f8 fd84 	bl	800185e <_fstat>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	d102      	bne.n	8008d60 <_fstat_r+0x1c>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	b103      	cbz	r3, 8008d60 <_fstat_r+0x1c>
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	20000424 	.word	0x20000424

08008d68 <_isatty_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_isatty_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 fd83 	bl	800187e <_isatty>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_isatty_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_isatty_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	20000424 	.word	0x20000424

08008d88 <_lseek_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	; (8008da8 <_lseek_r+0x20>)
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4611      	mov	r1, r2
 8008d92:	2200      	movs	r2, #0
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f8 fd7c 	bl	8001894 <_lseek>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_lseek_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_lseek_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000424 	.word	0x20000424

08008dac <__ascii_mbtowc>:
 8008dac:	b082      	sub	sp, #8
 8008dae:	b901      	cbnz	r1, 8008db2 <__ascii_mbtowc+0x6>
 8008db0:	a901      	add	r1, sp, #4
 8008db2:	b142      	cbz	r2, 8008dc6 <__ascii_mbtowc+0x1a>
 8008db4:	b14b      	cbz	r3, 8008dca <__ascii_mbtowc+0x1e>
 8008db6:	7813      	ldrb	r3, [r2, #0]
 8008db8:	600b      	str	r3, [r1, #0]
 8008dba:	7812      	ldrb	r2, [r2, #0]
 8008dbc:	1e10      	subs	r0, r2, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2001      	movne	r0, #1
 8008dc2:	b002      	add	sp, #8
 8008dc4:	4770      	bx	lr
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	e7fb      	b.n	8008dc2 <__ascii_mbtowc+0x16>
 8008dca:	f06f 0001 	mvn.w	r0, #1
 8008dce:	e7f8      	b.n	8008dc2 <__ascii_mbtowc+0x16>

08008dd0 <__malloc_lock>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__malloc_lock+0x8>)
 8008dd2:	f7ff b8c0 	b.w	8007f56 <__retarget_lock_acquire_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	20000418 	.word	0x20000418

08008ddc <__malloc_unlock>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__malloc_unlock+0x8>)
 8008dde:	f7ff b8bb 	b.w	8007f58 <__retarget_lock_release_recursive>
 8008de2:	bf00      	nop
 8008de4:	20000418 	.word	0x20000418

08008de8 <_read_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4d07      	ldr	r5, [pc, #28]	; (8008e08 <_read_r+0x20>)
 8008dec:	4604      	mov	r4, r0
 8008dee:	4608      	mov	r0, r1
 8008df0:	4611      	mov	r1, r2
 8008df2:	2200      	movs	r2, #0
 8008df4:	602a      	str	r2, [r5, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	f7f8 fcec 	bl	80017d4 <_read>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_read_r+0x1e>
 8008e00:	682b      	ldr	r3, [r5, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_read_r+0x1e>
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	20000424 	.word	0x20000424

08008e0c <__ascii_wctomb>:
 8008e0c:	b149      	cbz	r1, 8008e22 <__ascii_wctomb+0x16>
 8008e0e:	2aff      	cmp	r2, #255	; 0xff
 8008e10:	bf85      	ittet	hi
 8008e12:	238a      	movhi	r3, #138	; 0x8a
 8008e14:	6003      	strhi	r3, [r0, #0]
 8008e16:	700a      	strbls	r2, [r1, #0]
 8008e18:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e1c:	bf98      	it	ls
 8008e1e:	2001      	movls	r0, #1
 8008e20:	4770      	bx	lr
 8008e22:	4608      	mov	r0, r1
 8008e24:	4770      	bx	lr

08008e26 <abort>:
 8008e26:	b508      	push	{r3, lr}
 8008e28:	2006      	movs	r0, #6
 8008e2a:	f000 f82b 	bl	8008e84 <raise>
 8008e2e:	2001      	movs	r0, #1
 8008e30:	f7f8 fcc6 	bl	80017c0 <_exit>

08008e34 <_raise_r>:
 8008e34:	291f      	cmp	r1, #31
 8008e36:	b538      	push	{r3, r4, r5, lr}
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	d904      	bls.n	8008e48 <_raise_r+0x14>
 8008e3e:	2316      	movs	r3, #22
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e4a:	b112      	cbz	r2, 8008e52 <_raise_r+0x1e>
 8008e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e50:	b94b      	cbnz	r3, 8008e66 <_raise_r+0x32>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f830 	bl	8008eb8 <_getpid_r>
 8008e58:	462a      	mov	r2, r5
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e62:	f000 b817 	b.w	8008e94 <_kill_r>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d00a      	beq.n	8008e80 <_raise_r+0x4c>
 8008e6a:	1c59      	adds	r1, r3, #1
 8008e6c:	d103      	bne.n	8008e76 <_raise_r+0x42>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	2001      	movs	r0, #1
 8008e74:	e7e7      	b.n	8008e46 <_raise_r+0x12>
 8008e76:	2400      	movs	r4, #0
 8008e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	4798      	blx	r3
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7e0      	b.n	8008e46 <_raise_r+0x12>

08008e84 <raise>:
 8008e84:	4b02      	ldr	r3, [pc, #8]	; (8008e90 <raise+0xc>)
 8008e86:	4601      	mov	r1, r0
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	f7ff bfd3 	b.w	8008e34 <_raise_r>
 8008e8e:	bf00      	nop
 8008e90:	20000040 	.word	0x20000040

08008e94 <_kill_r>:
 8008e94:	b538      	push	{r3, r4, r5, lr}
 8008e96:	4d07      	ldr	r5, [pc, #28]	; (8008eb4 <_kill_r+0x20>)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f7f8 fc7d 	bl	80017a0 <_kill>
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	d102      	bne.n	8008eb0 <_kill_r+0x1c>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b103      	cbz	r3, 8008eb0 <_kill_r+0x1c>
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	bd38      	pop	{r3, r4, r5, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000424 	.word	0x20000424

08008eb8 <_getpid_r>:
 8008eb8:	f7f8 bc6a 	b.w	8001790 <_getpid>

08008ebc <_init>:
 8008ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ebe:	bf00      	nop
 8008ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ec2:	bc08      	pop	{r3}
 8008ec4:	469e      	mov	lr, r3
 8008ec6:	4770      	bx	lr

08008ec8 <_fini>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	bf00      	nop
 8008ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ece:	bc08      	pop	{r3}
 8008ed0:	469e      	mov	lr, r3
 8008ed2:	4770      	bx	lr
